// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: resourceprotocols.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_resourceprotocols_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_resourceprotocols_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_resourceprotocols_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_resourceprotocols_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[18]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_resourceprotocols_2eproto;
class HostCoreResponse;
class HostCoreResponseDefaultTypeInternal;
extern HostCoreResponseDefaultTypeInternal _HostCoreResponse_default_instance_;
class HostProcessorMessageType;
class HostProcessorMessageTypeDefaultTypeInternal;
extern HostProcessorMessageTypeDefaultTypeInternal _HostProcessorMessageType_default_instance_;
class HostTaskFinished;
class HostTaskFinishedDefaultTypeInternal;
extern HostTaskFinishedDefaultTypeInternal _HostTaskFinished_default_instance_;
class HostTaskImageRequest;
class HostTaskImageRequestDefaultTypeInternal;
extern HostTaskImageRequestDefaultTypeInternal _HostTaskImageRequest_default_instance_;
class HostTaskImageResponse;
class HostTaskImageResponseDefaultTypeInternal;
extern HostTaskImageResponseDefaultTypeInternal _HostTaskImageResponse_default_instance_;
class HostTaskModelRequest;
class HostTaskModelRequestDefaultTypeInternal;
extern HostTaskModelRequestDefaultTypeInternal _HostTaskModelRequest_default_instance_;
class HostTaskModelResponse;
class HostTaskModelResponseDefaultTypeInternal;
extern HostTaskModelResponseDefaultTypeInternal _HostTaskModelResponse_default_instance_;
class HostTaskProgress;
class HostTaskProgressDefaultTypeInternal;
extern HostTaskProgressDefaultTypeInternal _HostTaskProgress_default_instance_;
class HostTaskProgressMessage;
class HostTaskProgressMessageDefaultTypeInternal;
extern HostTaskProgressMessageDefaultTypeInternal _HostTaskProgressMessage_default_instance_;
class HostTaskStarted;
class HostTaskStartedDefaultTypeInternal;
extern HostTaskStartedDefaultTypeInternal _HostTaskStarted_default_instance_;
class ProcessorTaskImageRequest;
class ProcessorTaskImageRequestDefaultTypeInternal;
extern ProcessorTaskImageRequestDefaultTypeInternal _ProcessorTaskImageRequest_default_instance_;
class ProcessorTaskImageResponse;
class ProcessorTaskImageResponseDefaultTypeInternal;
extern ProcessorTaskImageResponseDefaultTypeInternal _ProcessorTaskImageResponse_default_instance_;
class ProcessorTaskMessageProgress;
class ProcessorTaskMessageProgressDefaultTypeInternal;
extern ProcessorTaskMessageProgressDefaultTypeInternal _ProcessorTaskMessageProgress_default_instance_;
class ProcessorTaskMessageType;
class ProcessorTaskMessageTypeDefaultTypeInternal;
extern ProcessorTaskMessageTypeDefaultTypeInternal _ProcessorTaskMessageType_default_instance_;
class ProcessorTaskModelRequest;
class ProcessorTaskModelRequestDefaultTypeInternal;
extern ProcessorTaskModelRequestDefaultTypeInternal _ProcessorTaskModelRequest_default_instance_;
class ProcessorTaskModelResponse;
class ProcessorTaskModelResponseDefaultTypeInternal;
extern ProcessorTaskModelResponseDefaultTypeInternal _ProcessorTaskModelResponse_default_instance_;
class ProcessorTaskProgress;
class ProcessorTaskProgressDefaultTypeInternal;
extern ProcessorTaskProgressDefaultTypeInternal _ProcessorTaskProgress_default_instance_;
class ProcessorTaskRequest;
class ProcessorTaskRequestDefaultTypeInternal;
extern ProcessorTaskRequestDefaultTypeInternal _ProcessorTaskRequest_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::HostCoreResponse* Arena::CreateMaybeMessage<::HostCoreResponse>(Arena*);
template<> ::HostProcessorMessageType* Arena::CreateMaybeMessage<::HostProcessorMessageType>(Arena*);
template<> ::HostTaskFinished* Arena::CreateMaybeMessage<::HostTaskFinished>(Arena*);
template<> ::HostTaskImageRequest* Arena::CreateMaybeMessage<::HostTaskImageRequest>(Arena*);
template<> ::HostTaskImageResponse* Arena::CreateMaybeMessage<::HostTaskImageResponse>(Arena*);
template<> ::HostTaskModelRequest* Arena::CreateMaybeMessage<::HostTaskModelRequest>(Arena*);
template<> ::HostTaskModelResponse* Arena::CreateMaybeMessage<::HostTaskModelResponse>(Arena*);
template<> ::HostTaskProgress* Arena::CreateMaybeMessage<::HostTaskProgress>(Arena*);
template<> ::HostTaskProgressMessage* Arena::CreateMaybeMessage<::HostTaskProgressMessage>(Arena*);
template<> ::HostTaskStarted* Arena::CreateMaybeMessage<::HostTaskStarted>(Arena*);
template<> ::ProcessorTaskImageRequest* Arena::CreateMaybeMessage<::ProcessorTaskImageRequest>(Arena*);
template<> ::ProcessorTaskImageResponse* Arena::CreateMaybeMessage<::ProcessorTaskImageResponse>(Arena*);
template<> ::ProcessorTaskMessageProgress* Arena::CreateMaybeMessage<::ProcessorTaskMessageProgress>(Arena*);
template<> ::ProcessorTaskMessageType* Arena::CreateMaybeMessage<::ProcessorTaskMessageType>(Arena*);
template<> ::ProcessorTaskModelRequest* Arena::CreateMaybeMessage<::ProcessorTaskModelRequest>(Arena*);
template<> ::ProcessorTaskModelResponse* Arena::CreateMaybeMessage<::ProcessorTaskModelResponse>(Arena*);
template<> ::ProcessorTaskProgress* Arena::CreateMaybeMessage<::ProcessorTaskProgress>(Arena*);
template<> ::ProcessorTaskRequest* Arena::CreateMaybeMessage<::ProcessorTaskRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum HostProcessorMessageType_MessageType : int {
  HostProcessorMessageType_MessageType_Invalid = 0,
  HostProcessorMessageType_MessageType_CoreRequest = 1,
  HostProcessorMessageType_MessageType_CoreResponse = 2,
  HostProcessorMessageType_MessageType_TaskImageRequest = 3,
  HostProcessorMessageType_MessageType_TaskImageResponse = 4,
  HostProcessorMessageType_MessageType_TaskModelRequest = 5,
  HostProcessorMessageType_MessageType_TaskModelResponse = 6,
  HostProcessorMessageType_MessageType_TaskStarted = 7,
  HostProcessorMessageType_MessageType_TaskFinished = 8,
  HostProcessorMessageType_MessageType_TaskProgress = 9,
  HostProcessorMessageType_MessageType_TaskProgressMessage = 10,
  HostProcessorMessageType_MessageType_ShutdownProcessor = 11,
  HostProcessorMessageType_MessageType_HostProcessorMessageType_MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  HostProcessorMessageType_MessageType_HostProcessorMessageType_MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool HostProcessorMessageType_MessageType_IsValid(int value);
constexpr HostProcessorMessageType_MessageType HostProcessorMessageType_MessageType_MessageType_MIN = HostProcessorMessageType_MessageType_Invalid;
constexpr HostProcessorMessageType_MessageType HostProcessorMessageType_MessageType_MessageType_MAX = HostProcessorMessageType_MessageType_ShutdownProcessor;
constexpr int HostProcessorMessageType_MessageType_MessageType_ARRAYSIZE = HostProcessorMessageType_MessageType_MessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HostProcessorMessageType_MessageType_descriptor();
template<typename T>
inline const std::string& HostProcessorMessageType_MessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HostProcessorMessageType_MessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HostProcessorMessageType_MessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    HostProcessorMessageType_MessageType_descriptor(), enum_t_value);
}
inline bool HostProcessorMessageType_MessageType_Parse(
    const std::string& name, HostProcessorMessageType_MessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HostProcessorMessageType_MessageType>(
    HostProcessorMessageType_MessageType_descriptor(), name, value);
}
enum ProcessorTaskMessageType_MessageType : int {
  ProcessorTaskMessageType_MessageType_Invalid = 0,
  ProcessorTaskMessageType_MessageType_Helo = 1,
  ProcessorTaskMessageType_MessageType_TaskRequest = 2,
  ProcessorTaskMessageType_MessageType_TaskResponse = 3,
  ProcessorTaskMessageType_MessageType_TaskProgress = 4,
  ProcessorTaskMessageType_MessageType_TaskProgressMessage = 5,
  ProcessorTaskMessageType_MessageType_DoneRequest = 6,
  ProcessorTaskMessageType_MessageType_DoneResponse = 7,
  ProcessorTaskMessageType_MessageType_ProcessorTaskMessageType_MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ProcessorTaskMessageType_MessageType_ProcessorTaskMessageType_MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ProcessorTaskMessageType_MessageType_IsValid(int value);
constexpr ProcessorTaskMessageType_MessageType ProcessorTaskMessageType_MessageType_MessageType_MIN = ProcessorTaskMessageType_MessageType_Invalid;
constexpr ProcessorTaskMessageType_MessageType ProcessorTaskMessageType_MessageType_MessageType_MAX = ProcessorTaskMessageType_MessageType_DoneResponse;
constexpr int ProcessorTaskMessageType_MessageType_MessageType_ARRAYSIZE = ProcessorTaskMessageType_MessageType_MessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProcessorTaskMessageType_MessageType_descriptor();
template<typename T>
inline const std::string& ProcessorTaskMessageType_MessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ProcessorTaskMessageType_MessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ProcessorTaskMessageType_MessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ProcessorTaskMessageType_MessageType_descriptor(), enum_t_value);
}
inline bool ProcessorTaskMessageType_MessageType_Parse(
    const std::string& name, ProcessorTaskMessageType_MessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ProcessorTaskMessageType_MessageType>(
    ProcessorTaskMessageType_MessageType_descriptor(), name, value);
}
enum ProcessorTaskRequest_TaskType : int {
  ProcessorTaskRequest_TaskType_Invalid = 0,
  ProcessorTaskRequest_TaskType_Image = 1,
  ProcessorTaskRequest_TaskType_Model = 2,
  ProcessorTaskRequest_TaskType_ProcessorTaskRequest_TaskType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ProcessorTaskRequest_TaskType_ProcessorTaskRequest_TaskType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ProcessorTaskRequest_TaskType_IsValid(int value);
constexpr ProcessorTaskRequest_TaskType ProcessorTaskRequest_TaskType_TaskType_MIN = ProcessorTaskRequest_TaskType_Invalid;
constexpr ProcessorTaskRequest_TaskType ProcessorTaskRequest_TaskType_TaskType_MAX = ProcessorTaskRequest_TaskType_Model;
constexpr int ProcessorTaskRequest_TaskType_TaskType_ARRAYSIZE = ProcessorTaskRequest_TaskType_TaskType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProcessorTaskRequest_TaskType_descriptor();
template<typename T>
inline const std::string& ProcessorTaskRequest_TaskType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ProcessorTaskRequest_TaskType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ProcessorTaskRequest_TaskType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ProcessorTaskRequest_TaskType_descriptor(), enum_t_value);
}
inline bool ProcessorTaskRequest_TaskType_Parse(
    const std::string& name, ProcessorTaskRequest_TaskType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ProcessorTaskRequest_TaskType>(
    ProcessorTaskRequest_TaskType_descriptor(), name, value);
}
// ===================================================================

class HostProcessorMessageType :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HostProcessorMessageType) */ {
 public:
  HostProcessorMessageType();
  virtual ~HostProcessorMessageType();

  HostProcessorMessageType(const HostProcessorMessageType& from);
  HostProcessorMessageType(HostProcessorMessageType&& from) noexcept
    : HostProcessorMessageType() {
    *this = ::std::move(from);
  }

  inline HostProcessorMessageType& operator=(const HostProcessorMessageType& from) {
    CopyFrom(from);
    return *this;
  }
  inline HostProcessorMessageType& operator=(HostProcessorMessageType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HostProcessorMessageType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HostProcessorMessageType* internal_default_instance() {
    return reinterpret_cast<const HostProcessorMessageType*>(
               &_HostProcessorMessageType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HostProcessorMessageType& a, HostProcessorMessageType& b) {
    a.Swap(&b);
  }
  inline void Swap(HostProcessorMessageType* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HostProcessorMessageType* New() const final {
    return CreateMaybeMessage<HostProcessorMessageType>(nullptr);
  }

  HostProcessorMessageType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HostProcessorMessageType>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HostProcessorMessageType& from);
  void MergeFrom(const HostProcessorMessageType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HostProcessorMessageType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HostProcessorMessageType";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resourceprotocols_2eproto);
    return ::descriptor_table_resourceprotocols_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef HostProcessorMessageType_MessageType MessageType;
  static constexpr MessageType Invalid =
    HostProcessorMessageType_MessageType_Invalid;
  static constexpr MessageType CoreRequest =
    HostProcessorMessageType_MessageType_CoreRequest;
  static constexpr MessageType CoreResponse =
    HostProcessorMessageType_MessageType_CoreResponse;
  static constexpr MessageType TaskImageRequest =
    HostProcessorMessageType_MessageType_TaskImageRequest;
  static constexpr MessageType TaskImageResponse =
    HostProcessorMessageType_MessageType_TaskImageResponse;
  static constexpr MessageType TaskModelRequest =
    HostProcessorMessageType_MessageType_TaskModelRequest;
  static constexpr MessageType TaskModelResponse =
    HostProcessorMessageType_MessageType_TaskModelResponse;
  static constexpr MessageType TaskStarted =
    HostProcessorMessageType_MessageType_TaskStarted;
  static constexpr MessageType TaskFinished =
    HostProcessorMessageType_MessageType_TaskFinished;
  static constexpr MessageType TaskProgress =
    HostProcessorMessageType_MessageType_TaskProgress;
  static constexpr MessageType TaskProgressMessage =
    HostProcessorMessageType_MessageType_TaskProgressMessage;
  static constexpr MessageType ShutdownProcessor =
    HostProcessorMessageType_MessageType_ShutdownProcessor;
  static inline bool MessageType_IsValid(int value) {
    return HostProcessorMessageType_MessageType_IsValid(value);
  }
  static constexpr MessageType MessageType_MIN =
    HostProcessorMessageType_MessageType_MessageType_MIN;
  static constexpr MessageType MessageType_MAX =
    HostProcessorMessageType_MessageType_MessageType_MAX;
  static constexpr int MessageType_ARRAYSIZE =
    HostProcessorMessageType_MessageType_MessageType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MessageType_descriptor() {
    return HostProcessorMessageType_MessageType_descriptor();
  }
  template<typename T>
  static inline const std::string& MessageType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MessageType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MessageType_Name.");
    return HostProcessorMessageType_MessageType_Name(enum_t_value);
  }
  static inline bool MessageType_Parse(const std::string& name,
      MessageType* value) {
    return HostProcessorMessageType_MessageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // .HostProcessorMessageType.MessageType type = 1;
  void clear_type();
  ::HostProcessorMessageType_MessageType type() const;
  void set_type(::HostProcessorMessageType_MessageType value);
  private:
  ::HostProcessorMessageType_MessageType _internal_type() const;
  void _internal_set_type(::HostProcessorMessageType_MessageType value);
  public:

  // @@protoc_insertion_point(class_scope:HostProcessorMessageType)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resourceprotocols_2eproto;
};
// -------------------------------------------------------------------

class HostCoreResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HostCoreResponse) */ {
 public:
  HostCoreResponse();
  virtual ~HostCoreResponse();

  HostCoreResponse(const HostCoreResponse& from);
  HostCoreResponse(HostCoreResponse&& from) noexcept
    : HostCoreResponse() {
    *this = ::std::move(from);
  }

  inline HostCoreResponse& operator=(const HostCoreResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HostCoreResponse& operator=(HostCoreResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HostCoreResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HostCoreResponse* internal_default_instance() {
    return reinterpret_cast<const HostCoreResponse*>(
               &_HostCoreResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HostCoreResponse& a, HostCoreResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(HostCoreResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HostCoreResponse* New() const final {
    return CreateMaybeMessage<HostCoreResponse>(nullptr);
  }

  HostCoreResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HostCoreResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HostCoreResponse& from);
  void MergeFrom(const HostCoreResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HostCoreResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HostCoreResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resourceprotocols_2eproto);
    return ::descriptor_table_resourceprotocols_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoresFieldNumber = 1,
  };
  // uint32 cores = 1;
  void clear_cores();
  ::PROTOBUF_NAMESPACE_ID::uint32 cores() const;
  void set_cores(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cores() const;
  void _internal_set_cores(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:HostCoreResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cores_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resourceprotocols_2eproto;
};
// -------------------------------------------------------------------

class HostTaskImageRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HostTaskImageRequest) */ {
 public:
  HostTaskImageRequest();
  virtual ~HostTaskImageRequest();

  HostTaskImageRequest(const HostTaskImageRequest& from);
  HostTaskImageRequest(HostTaskImageRequest&& from) noexcept
    : HostTaskImageRequest() {
    *this = ::std::move(from);
  }

  inline HostTaskImageRequest& operator=(const HostTaskImageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HostTaskImageRequest& operator=(HostTaskImageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HostTaskImageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HostTaskImageRequest* internal_default_instance() {
    return reinterpret_cast<const HostTaskImageRequest*>(
               &_HostTaskImageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(HostTaskImageRequest& a, HostTaskImageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HostTaskImageRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HostTaskImageRequest* New() const final {
    return CreateMaybeMessage<HostTaskImageRequest>(nullptr);
  }

  HostTaskImageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HostTaskImageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HostTaskImageRequest& from);
  void MergeFrom(const HostTaskImageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HostTaskImageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HostTaskImageRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resourceprotocols_2eproto);
    return ::descriptor_table_resourceprotocols_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 1,
    kExtensionFieldNumber = 2,
    kDataFieldNumber = 7,
    kFormatFieldNumber = 3,
    kGenerateMipsFieldNumber = 4,
    kFlipNormalFieldNumber = 5,
    kAlphaClippedFieldNumber = 6,
  };
  // string taskId = 1;
  void clear_taskid();
  const std::string& taskid() const;
  void set_taskid(const std::string& value);
  void set_taskid(std::string&& value);
  void set_taskid(const char* value);
  void set_taskid(const char* value, size_t size);
  std::string* mutable_taskid();
  std::string* release_taskid();
  void set_allocated_taskid(std::string* taskid);
  private:
  const std::string& _internal_taskid() const;
  void _internal_set_taskid(const std::string& value);
  std::string* _internal_mutable_taskid();
  public:

  // string extension = 2;
  void clear_extension();
  const std::string& extension() const;
  void set_extension(const std::string& value);
  void set_extension(std::string&& value);
  void set_extension(const char* value);
  void set_extension(const char* value, size_t size);
  std::string* mutable_extension();
  std::string* release_extension();
  void set_allocated_extension(std::string* extension);
  private:
  const std::string& _internal_extension() const;
  void _internal_set_extension(const std::string& value);
  std::string* _internal_mutable_extension();
  public:

  // bytes data = 7;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // int32 format = 3;
  void clear_format();
  ::PROTOBUF_NAMESPACE_ID::int32 format() const;
  void set_format(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_format() const;
  void _internal_set_format(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool generateMips = 4;
  void clear_generatemips();
  bool generatemips() const;
  void set_generatemips(bool value);
  private:
  bool _internal_generatemips() const;
  void _internal_set_generatemips(bool value);
  public:

  // bool flipNormal = 5;
  void clear_flipnormal();
  bool flipnormal() const;
  void set_flipnormal(bool value);
  private:
  bool _internal_flipnormal() const;
  void _internal_set_flipnormal(bool value);
  public:

  // bool alphaClipped = 6;
  void clear_alphaclipped();
  bool alphaclipped() const;
  void set_alphaclipped(bool value);
  private:
  bool _internal_alphaclipped() const;
  void _internal_set_alphaclipped(bool value);
  public:

  // @@protoc_insertion_point(class_scope:HostTaskImageRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr taskid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extension_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::int32 format_;
  bool generatemips_;
  bool flipnormal_;
  bool alphaclipped_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resourceprotocols_2eproto;
};
// -------------------------------------------------------------------

class HostTaskImageResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HostTaskImageResponse) */ {
 public:
  HostTaskImageResponse();
  virtual ~HostTaskImageResponse();

  HostTaskImageResponse(const HostTaskImageResponse& from);
  HostTaskImageResponse(HostTaskImageResponse&& from) noexcept
    : HostTaskImageResponse() {
    *this = ::std::move(from);
  }

  inline HostTaskImageResponse& operator=(const HostTaskImageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HostTaskImageResponse& operator=(HostTaskImageResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HostTaskImageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HostTaskImageResponse* internal_default_instance() {
    return reinterpret_cast<const HostTaskImageResponse*>(
               &_HostTaskImageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(HostTaskImageResponse& a, HostTaskImageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(HostTaskImageResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HostTaskImageResponse* New() const final {
    return CreateMaybeMessage<HostTaskImageResponse>(nullptr);
  }

  HostTaskImageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HostTaskImageResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HostTaskImageResponse& from);
  void MergeFrom(const HostTaskImageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HostTaskImageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HostTaskImageResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resourceprotocols_2eproto);
    return ::descriptor_table_resourceprotocols_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 1,
    kDataFieldNumber = 6,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
    kMipsFieldNumber = 4,
    kFormatFieldNumber = 5,
  };
  // string taskId = 1;
  void clear_taskid();
  const std::string& taskid() const;
  void set_taskid(const std::string& value);
  void set_taskid(std::string&& value);
  void set_taskid(const char* value);
  void set_taskid(const char* value, size_t size);
  std::string* mutable_taskid();
  std::string* release_taskid();
  void set_allocated_taskid(std::string* taskid);
  private:
  const std::string& _internal_taskid() const;
  void _internal_set_taskid(const std::string& value);
  std::string* _internal_mutable_taskid();
  public:

  // bytes data = 6;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // int32 width = 2;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 height = 3;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mips = 4;
  void clear_mips();
  ::PROTOBUF_NAMESPACE_ID::int32 mips() const;
  void set_mips(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mips() const;
  void _internal_set_mips(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 format = 5;
  void clear_format();
  ::PROTOBUF_NAMESPACE_ID::int32 format() const;
  void set_format(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_format() const;
  void _internal_set_format(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:HostTaskImageResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr taskid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  ::PROTOBUF_NAMESPACE_ID::int32 mips_;
  ::PROTOBUF_NAMESPACE_ID::int32 format_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resourceprotocols_2eproto;
};
// -------------------------------------------------------------------

class HostTaskModelRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HostTaskModelRequest) */ {
 public:
  HostTaskModelRequest();
  virtual ~HostTaskModelRequest();

  HostTaskModelRequest(const HostTaskModelRequest& from);
  HostTaskModelRequest(HostTaskModelRequest&& from) noexcept
    : HostTaskModelRequest() {
    *this = ::std::move(from);
  }

  inline HostTaskModelRequest& operator=(const HostTaskModelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HostTaskModelRequest& operator=(HostTaskModelRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HostTaskModelRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HostTaskModelRequest* internal_default_instance() {
    return reinterpret_cast<const HostTaskModelRequest*>(
               &_HostTaskModelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(HostTaskModelRequest& a, HostTaskModelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HostTaskModelRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HostTaskModelRequest* New() const final {
    return CreateMaybeMessage<HostTaskModelRequest>(nullptr);
  }

  HostTaskModelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HostTaskModelRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HostTaskModelRequest& from);
  void MergeFrom(const HostTaskModelRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HostTaskModelRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HostTaskModelRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resourceprotocols_2eproto);
    return ::descriptor_table_resourceprotocols_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 1,
    kModelTargetPathFieldNumber = 2,
    kAssetNameFieldNumber = 3,
    kDataFieldNumber = 11,
    kScaleXFieldNumber = 4,
    kScaleYFieldNumber = 5,
    kScaleZFieldNumber = 6,
    kRotationXFieldNumber = 7,
    kRotationYFieldNumber = 8,
    kRotationZFieldNumber = 9,
    kRotationWFieldNumber = 10,
  };
  // string taskId = 1;
  void clear_taskid();
  const std::string& taskid() const;
  void set_taskid(const std::string& value);
  void set_taskid(std::string&& value);
  void set_taskid(const char* value);
  void set_taskid(const char* value, size_t size);
  std::string* mutable_taskid();
  std::string* release_taskid();
  void set_allocated_taskid(std::string* taskid);
  private:
  const std::string& _internal_taskid() const;
  void _internal_set_taskid(const std::string& value);
  std::string* _internal_mutable_taskid();
  public:

  // string modelTargetPath = 2;
  void clear_modeltargetpath();
  const std::string& modeltargetpath() const;
  void set_modeltargetpath(const std::string& value);
  void set_modeltargetpath(std::string&& value);
  void set_modeltargetpath(const char* value);
  void set_modeltargetpath(const char* value, size_t size);
  std::string* mutable_modeltargetpath();
  std::string* release_modeltargetpath();
  void set_allocated_modeltargetpath(std::string* modeltargetpath);
  private:
  const std::string& _internal_modeltargetpath() const;
  void _internal_set_modeltargetpath(const std::string& value);
  std::string* _internal_mutable_modeltargetpath();
  public:

  // string assetName = 3;
  void clear_assetname();
  const std::string& assetname() const;
  void set_assetname(const std::string& value);
  void set_assetname(std::string&& value);
  void set_assetname(const char* value);
  void set_assetname(const char* value, size_t size);
  std::string* mutable_assetname();
  std::string* release_assetname();
  void set_allocated_assetname(std::string* assetname);
  private:
  const std::string& _internal_assetname() const;
  void _internal_set_assetname(const std::string& value);
  std::string* _internal_mutable_assetname();
  public:

  // bytes data = 11;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // float scaleX = 4;
  void clear_scalex();
  float scalex() const;
  void set_scalex(float value);
  private:
  float _internal_scalex() const;
  void _internal_set_scalex(float value);
  public:

  // float scaleY = 5;
  void clear_scaley();
  float scaley() const;
  void set_scaley(float value);
  private:
  float _internal_scaley() const;
  void _internal_set_scaley(float value);
  public:

  // float scaleZ = 6;
  void clear_scalez();
  float scalez() const;
  void set_scalez(float value);
  private:
  float _internal_scalez() const;
  void _internal_set_scalez(float value);
  public:

  // float rotationX = 7;
  void clear_rotationx();
  float rotationx() const;
  void set_rotationx(float value);
  private:
  float _internal_rotationx() const;
  void _internal_set_rotationx(float value);
  public:

  // float rotationY = 8;
  void clear_rotationy();
  float rotationy() const;
  void set_rotationy(float value);
  private:
  float _internal_rotationy() const;
  void _internal_set_rotationy(float value);
  public:

  // float rotationZ = 9;
  void clear_rotationz();
  float rotationz() const;
  void set_rotationz(float value);
  private:
  float _internal_rotationz() const;
  void _internal_set_rotationz(float value);
  public:

  // float rotationW = 10;
  void clear_rotationw();
  float rotationw() const;
  void set_rotationw(float value);
  private:
  float _internal_rotationw() const;
  void _internal_set_rotationw(float value);
  public:

  // @@protoc_insertion_point(class_scope:HostTaskModelRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr taskid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr modeltargetpath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr assetname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  float scalex_;
  float scaley_;
  float scalez_;
  float rotationx_;
  float rotationy_;
  float rotationz_;
  float rotationw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resourceprotocols_2eproto;
};
// -------------------------------------------------------------------

class HostTaskModelResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HostTaskModelResponse) */ {
 public:
  HostTaskModelResponse();
  virtual ~HostTaskModelResponse();

  HostTaskModelResponse(const HostTaskModelResponse& from);
  HostTaskModelResponse(HostTaskModelResponse&& from) noexcept
    : HostTaskModelResponse() {
    *this = ::std::move(from);
  }

  inline HostTaskModelResponse& operator=(const HostTaskModelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HostTaskModelResponse& operator=(HostTaskModelResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HostTaskModelResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HostTaskModelResponse* internal_default_instance() {
    return reinterpret_cast<const HostTaskModelResponse*>(
               &_HostTaskModelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(HostTaskModelResponse& a, HostTaskModelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(HostTaskModelResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HostTaskModelResponse* New() const final {
    return CreateMaybeMessage<HostTaskModelResponse>(nullptr);
  }

  HostTaskModelResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HostTaskModelResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HostTaskModelResponse& from);
  void MergeFrom(const HostTaskModelResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HostTaskModelResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HostTaskModelResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resourceprotocols_2eproto);
    return ::descriptor_table_resourceprotocols_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 1,
    kModelDataFieldNumber = 2,
    kPrefabDataFieldNumber = 3,
  };
  // string taskId = 1;
  void clear_taskid();
  const std::string& taskid() const;
  void set_taskid(const std::string& value);
  void set_taskid(std::string&& value);
  void set_taskid(const char* value);
  void set_taskid(const char* value, size_t size);
  std::string* mutable_taskid();
  std::string* release_taskid();
  void set_allocated_taskid(std::string* taskid);
  private:
  const std::string& _internal_taskid() const;
  void _internal_set_taskid(const std::string& value);
  std::string* _internal_mutable_taskid();
  public:

  // bytes modelData = 2;
  void clear_modeldata();
  const std::string& modeldata() const;
  void set_modeldata(const std::string& value);
  void set_modeldata(std::string&& value);
  void set_modeldata(const char* value);
  void set_modeldata(const void* value, size_t size);
  std::string* mutable_modeldata();
  std::string* release_modeldata();
  void set_allocated_modeldata(std::string* modeldata);
  private:
  const std::string& _internal_modeldata() const;
  void _internal_set_modeldata(const std::string& value);
  std::string* _internal_mutable_modeldata();
  public:

  // bytes prefabData = 3;
  void clear_prefabdata();
  const std::string& prefabdata() const;
  void set_prefabdata(const std::string& value);
  void set_prefabdata(std::string&& value);
  void set_prefabdata(const char* value);
  void set_prefabdata(const void* value, size_t size);
  std::string* mutable_prefabdata();
  std::string* release_prefabdata();
  void set_allocated_prefabdata(std::string* prefabdata);
  private:
  const std::string& _internal_prefabdata() const;
  void _internal_set_prefabdata(const std::string& value);
  std::string* _internal_mutable_prefabdata();
  public:

  // @@protoc_insertion_point(class_scope:HostTaskModelResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr taskid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr modeldata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefabdata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resourceprotocols_2eproto;
};
// -------------------------------------------------------------------

class HostTaskStarted :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HostTaskStarted) */ {
 public:
  HostTaskStarted();
  virtual ~HostTaskStarted();

  HostTaskStarted(const HostTaskStarted& from);
  HostTaskStarted(HostTaskStarted&& from) noexcept
    : HostTaskStarted() {
    *this = ::std::move(from);
  }

  inline HostTaskStarted& operator=(const HostTaskStarted& from) {
    CopyFrom(from);
    return *this;
  }
  inline HostTaskStarted& operator=(HostTaskStarted&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HostTaskStarted& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HostTaskStarted* internal_default_instance() {
    return reinterpret_cast<const HostTaskStarted*>(
               &_HostTaskStarted_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(HostTaskStarted& a, HostTaskStarted& b) {
    a.Swap(&b);
  }
  inline void Swap(HostTaskStarted* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HostTaskStarted* New() const final {
    return CreateMaybeMessage<HostTaskStarted>(nullptr);
  }

  HostTaskStarted* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HostTaskStarted>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HostTaskStarted& from);
  void MergeFrom(const HostTaskStarted& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HostTaskStarted* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HostTaskStarted";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resourceprotocols_2eproto);
    return ::descriptor_table_resourceprotocols_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 1,
  };
  // string taskId = 1;
  void clear_taskid();
  const std::string& taskid() const;
  void set_taskid(const std::string& value);
  void set_taskid(std::string&& value);
  void set_taskid(const char* value);
  void set_taskid(const char* value, size_t size);
  std::string* mutable_taskid();
  std::string* release_taskid();
  void set_allocated_taskid(std::string* taskid);
  private:
  const std::string& _internal_taskid() const;
  void _internal_set_taskid(const std::string& value);
  std::string* _internal_mutable_taskid();
  public:

  // @@protoc_insertion_point(class_scope:HostTaskStarted)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr taskid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resourceprotocols_2eproto;
};
// -------------------------------------------------------------------

class HostTaskFinished :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HostTaskFinished) */ {
 public:
  HostTaskFinished();
  virtual ~HostTaskFinished();

  HostTaskFinished(const HostTaskFinished& from);
  HostTaskFinished(HostTaskFinished&& from) noexcept
    : HostTaskFinished() {
    *this = ::std::move(from);
  }

  inline HostTaskFinished& operator=(const HostTaskFinished& from) {
    CopyFrom(from);
    return *this;
  }
  inline HostTaskFinished& operator=(HostTaskFinished&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HostTaskFinished& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HostTaskFinished* internal_default_instance() {
    return reinterpret_cast<const HostTaskFinished*>(
               &_HostTaskFinished_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(HostTaskFinished& a, HostTaskFinished& b) {
    a.Swap(&b);
  }
  inline void Swap(HostTaskFinished* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HostTaskFinished* New() const final {
    return CreateMaybeMessage<HostTaskFinished>(nullptr);
  }

  HostTaskFinished* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HostTaskFinished>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HostTaskFinished& from);
  void MergeFrom(const HostTaskFinished& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HostTaskFinished* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HostTaskFinished";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resourceprotocols_2eproto);
    return ::descriptor_table_resourceprotocols_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 1,
  };
  // string taskId = 1;
  void clear_taskid();
  const std::string& taskid() const;
  void set_taskid(const std::string& value);
  void set_taskid(std::string&& value);
  void set_taskid(const char* value);
  void set_taskid(const char* value, size_t size);
  std::string* mutable_taskid();
  std::string* release_taskid();
  void set_allocated_taskid(std::string* taskid);
  private:
  const std::string& _internal_taskid() const;
  void _internal_set_taskid(const std::string& value);
  std::string* _internal_mutable_taskid();
  public:

  // @@protoc_insertion_point(class_scope:HostTaskFinished)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr taskid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resourceprotocols_2eproto;
};
// -------------------------------------------------------------------

class HostTaskProgress :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HostTaskProgress) */ {
 public:
  HostTaskProgress();
  virtual ~HostTaskProgress();

  HostTaskProgress(const HostTaskProgress& from);
  HostTaskProgress(HostTaskProgress&& from) noexcept
    : HostTaskProgress() {
    *this = ::std::move(from);
  }

  inline HostTaskProgress& operator=(const HostTaskProgress& from) {
    CopyFrom(from);
    return *this;
  }
  inline HostTaskProgress& operator=(HostTaskProgress&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HostTaskProgress& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HostTaskProgress* internal_default_instance() {
    return reinterpret_cast<const HostTaskProgress*>(
               &_HostTaskProgress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(HostTaskProgress& a, HostTaskProgress& b) {
    a.Swap(&b);
  }
  inline void Swap(HostTaskProgress* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HostTaskProgress* New() const final {
    return CreateMaybeMessage<HostTaskProgress>(nullptr);
  }

  HostTaskProgress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HostTaskProgress>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HostTaskProgress& from);
  void MergeFrom(const HostTaskProgress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HostTaskProgress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HostTaskProgress";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resourceprotocols_2eproto);
    return ::descriptor_table_resourceprotocols_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 1,
    kProgressFieldNumber = 2,
  };
  // string taskId = 1;
  void clear_taskid();
  const std::string& taskid() const;
  void set_taskid(const std::string& value);
  void set_taskid(std::string&& value);
  void set_taskid(const char* value);
  void set_taskid(const char* value, size_t size);
  std::string* mutable_taskid();
  std::string* release_taskid();
  void set_allocated_taskid(std::string* taskid);
  private:
  const std::string& _internal_taskid() const;
  void _internal_set_taskid(const std::string& value);
  std::string* _internal_mutable_taskid();
  public:

  // float progress = 2;
  void clear_progress();
  float progress() const;
  void set_progress(float value);
  private:
  float _internal_progress() const;
  void _internal_set_progress(float value);
  public:

  // @@protoc_insertion_point(class_scope:HostTaskProgress)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr taskid_;
  float progress_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resourceprotocols_2eproto;
};
// -------------------------------------------------------------------

class HostTaskProgressMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HostTaskProgressMessage) */ {
 public:
  HostTaskProgressMessage();
  virtual ~HostTaskProgressMessage();

  HostTaskProgressMessage(const HostTaskProgressMessage& from);
  HostTaskProgressMessage(HostTaskProgressMessage&& from) noexcept
    : HostTaskProgressMessage() {
    *this = ::std::move(from);
  }

  inline HostTaskProgressMessage& operator=(const HostTaskProgressMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline HostTaskProgressMessage& operator=(HostTaskProgressMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HostTaskProgressMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HostTaskProgressMessage* internal_default_instance() {
    return reinterpret_cast<const HostTaskProgressMessage*>(
               &_HostTaskProgressMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(HostTaskProgressMessage& a, HostTaskProgressMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(HostTaskProgressMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HostTaskProgressMessage* New() const final {
    return CreateMaybeMessage<HostTaskProgressMessage>(nullptr);
  }

  HostTaskProgressMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HostTaskProgressMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HostTaskProgressMessage& from);
  void MergeFrom(const HostTaskProgressMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HostTaskProgressMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HostTaskProgressMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resourceprotocols_2eproto);
    return ::descriptor_table_resourceprotocols_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 1,
    kMessageFieldNumber = 3,
    kProgressFieldNumber = 2,
  };
  // string taskId = 1;
  void clear_taskid();
  const std::string& taskid() const;
  void set_taskid(const std::string& value);
  void set_taskid(std::string&& value);
  void set_taskid(const char* value);
  void set_taskid(const char* value, size_t size);
  std::string* mutable_taskid();
  std::string* release_taskid();
  void set_allocated_taskid(std::string* taskid);
  private:
  const std::string& _internal_taskid() const;
  void _internal_set_taskid(const std::string& value);
  std::string* _internal_mutable_taskid();
  public:

  // string message = 3;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // float progress = 2;
  void clear_progress();
  float progress() const;
  void set_progress(float value);
  private:
  float _internal_progress() const;
  void _internal_set_progress(float value);
  public:

  // @@protoc_insertion_point(class_scope:HostTaskProgressMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr taskid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  float progress_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resourceprotocols_2eproto;
};
// -------------------------------------------------------------------

class ProcessorTaskMessageType :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProcessorTaskMessageType) */ {
 public:
  ProcessorTaskMessageType();
  virtual ~ProcessorTaskMessageType();

  ProcessorTaskMessageType(const ProcessorTaskMessageType& from);
  ProcessorTaskMessageType(ProcessorTaskMessageType&& from) noexcept
    : ProcessorTaskMessageType() {
    *this = ::std::move(from);
  }

  inline ProcessorTaskMessageType& operator=(const ProcessorTaskMessageType& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessorTaskMessageType& operator=(ProcessorTaskMessageType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProcessorTaskMessageType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcessorTaskMessageType* internal_default_instance() {
    return reinterpret_cast<const ProcessorTaskMessageType*>(
               &_ProcessorTaskMessageType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ProcessorTaskMessageType& a, ProcessorTaskMessageType& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessorTaskMessageType* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProcessorTaskMessageType* New() const final {
    return CreateMaybeMessage<ProcessorTaskMessageType>(nullptr);
  }

  ProcessorTaskMessageType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProcessorTaskMessageType>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProcessorTaskMessageType& from);
  void MergeFrom(const ProcessorTaskMessageType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessorTaskMessageType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProcessorTaskMessageType";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resourceprotocols_2eproto);
    return ::descriptor_table_resourceprotocols_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ProcessorTaskMessageType_MessageType MessageType;
  static constexpr MessageType Invalid =
    ProcessorTaskMessageType_MessageType_Invalid;
  static constexpr MessageType Helo =
    ProcessorTaskMessageType_MessageType_Helo;
  static constexpr MessageType TaskRequest =
    ProcessorTaskMessageType_MessageType_TaskRequest;
  static constexpr MessageType TaskResponse =
    ProcessorTaskMessageType_MessageType_TaskResponse;
  static constexpr MessageType TaskProgress =
    ProcessorTaskMessageType_MessageType_TaskProgress;
  static constexpr MessageType TaskProgressMessage =
    ProcessorTaskMessageType_MessageType_TaskProgressMessage;
  static constexpr MessageType DoneRequest =
    ProcessorTaskMessageType_MessageType_DoneRequest;
  static constexpr MessageType DoneResponse =
    ProcessorTaskMessageType_MessageType_DoneResponse;
  static inline bool MessageType_IsValid(int value) {
    return ProcessorTaskMessageType_MessageType_IsValid(value);
  }
  static constexpr MessageType MessageType_MIN =
    ProcessorTaskMessageType_MessageType_MessageType_MIN;
  static constexpr MessageType MessageType_MAX =
    ProcessorTaskMessageType_MessageType_MessageType_MAX;
  static constexpr int MessageType_ARRAYSIZE =
    ProcessorTaskMessageType_MessageType_MessageType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MessageType_descriptor() {
    return ProcessorTaskMessageType_MessageType_descriptor();
  }
  template<typename T>
  static inline const std::string& MessageType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MessageType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MessageType_Name.");
    return ProcessorTaskMessageType_MessageType_Name(enum_t_value);
  }
  static inline bool MessageType_Parse(const std::string& name,
      MessageType* value) {
    return ProcessorTaskMessageType_MessageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // .ProcessorTaskMessageType.MessageType type = 1;
  void clear_type();
  ::ProcessorTaskMessageType_MessageType type() const;
  void set_type(::ProcessorTaskMessageType_MessageType value);
  private:
  ::ProcessorTaskMessageType_MessageType _internal_type() const;
  void _internal_set_type(::ProcessorTaskMessageType_MessageType value);
  public:

  // @@protoc_insertion_point(class_scope:ProcessorTaskMessageType)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resourceprotocols_2eproto;
};
// -------------------------------------------------------------------

class ProcessorTaskRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProcessorTaskRequest) */ {
 public:
  ProcessorTaskRequest();
  virtual ~ProcessorTaskRequest();

  ProcessorTaskRequest(const ProcessorTaskRequest& from);
  ProcessorTaskRequest(ProcessorTaskRequest&& from) noexcept
    : ProcessorTaskRequest() {
    *this = ::std::move(from);
  }

  inline ProcessorTaskRequest& operator=(const ProcessorTaskRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessorTaskRequest& operator=(ProcessorTaskRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProcessorTaskRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcessorTaskRequest* internal_default_instance() {
    return reinterpret_cast<const ProcessorTaskRequest*>(
               &_ProcessorTaskRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ProcessorTaskRequest& a, ProcessorTaskRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessorTaskRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProcessorTaskRequest* New() const final {
    return CreateMaybeMessage<ProcessorTaskRequest>(nullptr);
  }

  ProcessorTaskRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProcessorTaskRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProcessorTaskRequest& from);
  void MergeFrom(const ProcessorTaskRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessorTaskRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProcessorTaskRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resourceprotocols_2eproto);
    return ::descriptor_table_resourceprotocols_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ProcessorTaskRequest_TaskType TaskType;
  static constexpr TaskType Invalid =
    ProcessorTaskRequest_TaskType_Invalid;
  static constexpr TaskType Image =
    ProcessorTaskRequest_TaskType_Image;
  static constexpr TaskType Model =
    ProcessorTaskRequest_TaskType_Model;
  static inline bool TaskType_IsValid(int value) {
    return ProcessorTaskRequest_TaskType_IsValid(value);
  }
  static constexpr TaskType TaskType_MIN =
    ProcessorTaskRequest_TaskType_TaskType_MIN;
  static constexpr TaskType TaskType_MAX =
    ProcessorTaskRequest_TaskType_TaskType_MAX;
  static constexpr int TaskType_ARRAYSIZE =
    ProcessorTaskRequest_TaskType_TaskType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TaskType_descriptor() {
    return ProcessorTaskRequest_TaskType_descriptor();
  }
  template<typename T>
  static inline const std::string& TaskType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TaskType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TaskType_Name.");
    return ProcessorTaskRequest_TaskType_Name(enum_t_value);
  }
  static inline bool TaskType_Parse(const std::string& name,
      TaskType* value) {
    return ProcessorTaskRequest_TaskType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // .ProcessorTaskRequest.TaskType type = 1;
  void clear_type();
  ::ProcessorTaskRequest_TaskType type() const;
  void set_type(::ProcessorTaskRequest_TaskType value);
  private:
  ::ProcessorTaskRequest_TaskType _internal_type() const;
  void _internal_set_type(::ProcessorTaskRequest_TaskType value);
  public:

  // @@protoc_insertion_point(class_scope:ProcessorTaskRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resourceprotocols_2eproto;
};
// -------------------------------------------------------------------

class ProcessorTaskImageRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProcessorTaskImageRequest) */ {
 public:
  ProcessorTaskImageRequest();
  virtual ~ProcessorTaskImageRequest();

  ProcessorTaskImageRequest(const ProcessorTaskImageRequest& from);
  ProcessorTaskImageRequest(ProcessorTaskImageRequest&& from) noexcept
    : ProcessorTaskImageRequest() {
    *this = ::std::move(from);
  }

  inline ProcessorTaskImageRequest& operator=(const ProcessorTaskImageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessorTaskImageRequest& operator=(ProcessorTaskImageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProcessorTaskImageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcessorTaskImageRequest* internal_default_instance() {
    return reinterpret_cast<const ProcessorTaskImageRequest*>(
               &_ProcessorTaskImageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ProcessorTaskImageRequest& a, ProcessorTaskImageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessorTaskImageRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProcessorTaskImageRequest* New() const final {
    return CreateMaybeMessage<ProcessorTaskImageRequest>(nullptr);
  }

  ProcessorTaskImageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProcessorTaskImageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProcessorTaskImageRequest& from);
  void MergeFrom(const ProcessorTaskImageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessorTaskImageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProcessorTaskImageRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resourceprotocols_2eproto);
    return ::descriptor_table_resourceprotocols_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 1,
    kDataFieldNumber = 12,
    kSourceCMformatFieldNumber = 2,
    kTargetCMBCformatFieldNumber = 3,
    kEnginePackedFormatFieldNumber = 4,
    kWidthFieldNumber = 5,
    kHeightFieldNumber = 6,
    kStrideFieldNumber = 7,
    kMipCountFieldNumber = 8,
    kMipFieldNumber = 9,
    kPartIdFieldNumber = 10,
    kPartSizeFieldNumber = 11,
  };
  // string taskId = 1;
  void clear_taskid();
  const std::string& taskid() const;
  void set_taskid(const std::string& value);
  void set_taskid(std::string&& value);
  void set_taskid(const char* value);
  void set_taskid(const char* value, size_t size);
  std::string* mutable_taskid();
  std::string* release_taskid();
  void set_allocated_taskid(std::string* taskid);
  private:
  const std::string& _internal_taskid() const;
  void _internal_set_taskid(const std::string& value);
  std::string* _internal_mutable_taskid();
  public:

  // bytes data = 12;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // int32 sourceCMformat = 2;
  void clear_sourcecmformat();
  ::PROTOBUF_NAMESPACE_ID::int32 sourcecmformat() const;
  void set_sourcecmformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sourcecmformat() const;
  void _internal_set_sourcecmformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 targetCMBCformat = 3;
  void clear_targetcmbcformat();
  ::PROTOBUF_NAMESPACE_ID::int32 targetcmbcformat() const;
  void set_targetcmbcformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_targetcmbcformat() const;
  void _internal_set_targetcmbcformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 enginePackedFormat = 4;
  void clear_enginepackedformat();
  ::PROTOBUF_NAMESPACE_ID::int32 enginepackedformat() const;
  void set_enginepackedformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_enginepackedformat() const;
  void _internal_set_enginepackedformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 width = 5;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 height = 6;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 stride = 7;
  void clear_stride();
  ::PROTOBUF_NAMESPACE_ID::int32 stride() const;
  void set_stride(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stride() const;
  void _internal_set_stride(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mipCount = 8;
  void clear_mipcount();
  ::PROTOBUF_NAMESPACE_ID::int32 mipcount() const;
  void set_mipcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mipcount() const;
  void _internal_set_mipcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mip = 9;
  void clear_mip();
  ::PROTOBUF_NAMESPACE_ID::int32 mip() const;
  void set_mip(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mip() const;
  void _internal_set_mip(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 partId = 10;
  void clear_partid();
  ::PROTOBUF_NAMESPACE_ID::int32 partid() const;
  void set_partid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_partid() const;
  void _internal_set_partid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 partSize = 11;
  void clear_partsize();
  ::PROTOBUF_NAMESPACE_ID::int32 partsize() const;
  void set_partsize(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_partsize() const;
  void _internal_set_partsize(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ProcessorTaskImageRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr taskid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::int32 sourcecmformat_;
  ::PROTOBUF_NAMESPACE_ID::int32 targetcmbcformat_;
  ::PROTOBUF_NAMESPACE_ID::int32 enginepackedformat_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  ::PROTOBUF_NAMESPACE_ID::int32 stride_;
  ::PROTOBUF_NAMESPACE_ID::int32 mipcount_;
  ::PROTOBUF_NAMESPACE_ID::int32 mip_;
  ::PROTOBUF_NAMESPACE_ID::int32 partid_;
  ::PROTOBUF_NAMESPACE_ID::int32 partsize_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resourceprotocols_2eproto;
};
// -------------------------------------------------------------------

class ProcessorTaskImageResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProcessorTaskImageResponse) */ {
 public:
  ProcessorTaskImageResponse();
  virtual ~ProcessorTaskImageResponse();

  ProcessorTaskImageResponse(const ProcessorTaskImageResponse& from);
  ProcessorTaskImageResponse(ProcessorTaskImageResponse&& from) noexcept
    : ProcessorTaskImageResponse() {
    *this = ::std::move(from);
  }

  inline ProcessorTaskImageResponse& operator=(const ProcessorTaskImageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessorTaskImageResponse& operator=(ProcessorTaskImageResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProcessorTaskImageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcessorTaskImageResponse* internal_default_instance() {
    return reinterpret_cast<const ProcessorTaskImageResponse*>(
               &_ProcessorTaskImageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ProcessorTaskImageResponse& a, ProcessorTaskImageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessorTaskImageResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProcessorTaskImageResponse* New() const final {
    return CreateMaybeMessage<ProcessorTaskImageResponse>(nullptr);
  }

  ProcessorTaskImageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProcessorTaskImageResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProcessorTaskImageResponse& from);
  void MergeFrom(const ProcessorTaskImageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessorTaskImageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProcessorTaskImageResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resourceprotocols_2eproto);
    return ::descriptor_table_resourceprotocols_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 1,
    kDataFieldNumber = 9,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
    kFormatFieldNumber = 4,
    kMipCountFieldNumber = 5,
    kMipFieldNumber = 6,
    kPartIdFieldNumber = 7,
    kPartSizeFieldNumber = 8,
  };
  // string taskId = 1;
  void clear_taskid();
  const std::string& taskid() const;
  void set_taskid(const std::string& value);
  void set_taskid(std::string&& value);
  void set_taskid(const char* value);
  void set_taskid(const char* value, size_t size);
  std::string* mutable_taskid();
  std::string* release_taskid();
  void set_allocated_taskid(std::string* taskid);
  private:
  const std::string& _internal_taskid() const;
  void _internal_set_taskid(const std::string& value);
  std::string* _internal_mutable_taskid();
  public:

  // bytes data = 9;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // int32 width = 2;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 height = 3;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 format = 4;
  void clear_format();
  ::PROTOBUF_NAMESPACE_ID::int32 format() const;
  void set_format(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_format() const;
  void _internal_set_format(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mipCount = 5;
  void clear_mipcount();
  ::PROTOBUF_NAMESPACE_ID::int32 mipcount() const;
  void set_mipcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mipcount() const;
  void _internal_set_mipcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mip = 6;
  void clear_mip();
  ::PROTOBUF_NAMESPACE_ID::int32 mip() const;
  void set_mip(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mip() const;
  void _internal_set_mip(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 partId = 7;
  void clear_partid();
  ::PROTOBUF_NAMESPACE_ID::int32 partid() const;
  void set_partid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_partid() const;
  void _internal_set_partid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 partSize = 8;
  void clear_partsize();
  ::PROTOBUF_NAMESPACE_ID::int32 partsize() const;
  void set_partsize(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_partsize() const;
  void _internal_set_partsize(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ProcessorTaskImageResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr taskid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  ::PROTOBUF_NAMESPACE_ID::int32 format_;
  ::PROTOBUF_NAMESPACE_ID::int32 mipcount_;
  ::PROTOBUF_NAMESPACE_ID::int32 mip_;
  ::PROTOBUF_NAMESPACE_ID::int32 partid_;
  ::PROTOBUF_NAMESPACE_ID::int32 partsize_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resourceprotocols_2eproto;
};
// -------------------------------------------------------------------

class ProcessorTaskProgress :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProcessorTaskProgress) */ {
 public:
  ProcessorTaskProgress();
  virtual ~ProcessorTaskProgress();

  ProcessorTaskProgress(const ProcessorTaskProgress& from);
  ProcessorTaskProgress(ProcessorTaskProgress&& from) noexcept
    : ProcessorTaskProgress() {
    *this = ::std::move(from);
  }

  inline ProcessorTaskProgress& operator=(const ProcessorTaskProgress& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessorTaskProgress& operator=(ProcessorTaskProgress&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProcessorTaskProgress& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcessorTaskProgress* internal_default_instance() {
    return reinterpret_cast<const ProcessorTaskProgress*>(
               &_ProcessorTaskProgress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ProcessorTaskProgress& a, ProcessorTaskProgress& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessorTaskProgress* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProcessorTaskProgress* New() const final {
    return CreateMaybeMessage<ProcessorTaskProgress>(nullptr);
  }

  ProcessorTaskProgress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProcessorTaskProgress>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProcessorTaskProgress& from);
  void MergeFrom(const ProcessorTaskProgress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessorTaskProgress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProcessorTaskProgress";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resourceprotocols_2eproto);
    return ::descriptor_table_resourceprotocols_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 1,
    kProgressFieldNumber = 2,
  };
  // string taskId = 1;
  void clear_taskid();
  const std::string& taskid() const;
  void set_taskid(const std::string& value);
  void set_taskid(std::string&& value);
  void set_taskid(const char* value);
  void set_taskid(const char* value, size_t size);
  std::string* mutable_taskid();
  std::string* release_taskid();
  void set_allocated_taskid(std::string* taskid);
  private:
  const std::string& _internal_taskid() const;
  void _internal_set_taskid(const std::string& value);
  std::string* _internal_mutable_taskid();
  public:

  // float progress = 2;
  void clear_progress();
  float progress() const;
  void set_progress(float value);
  private:
  float _internal_progress() const;
  void _internal_set_progress(float value);
  public:

  // @@protoc_insertion_point(class_scope:ProcessorTaskProgress)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr taskid_;
  float progress_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resourceprotocols_2eproto;
};
// -------------------------------------------------------------------

class ProcessorTaskMessageProgress :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProcessorTaskMessageProgress) */ {
 public:
  ProcessorTaskMessageProgress();
  virtual ~ProcessorTaskMessageProgress();

  ProcessorTaskMessageProgress(const ProcessorTaskMessageProgress& from);
  ProcessorTaskMessageProgress(ProcessorTaskMessageProgress&& from) noexcept
    : ProcessorTaskMessageProgress() {
    *this = ::std::move(from);
  }

  inline ProcessorTaskMessageProgress& operator=(const ProcessorTaskMessageProgress& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessorTaskMessageProgress& operator=(ProcessorTaskMessageProgress&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProcessorTaskMessageProgress& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcessorTaskMessageProgress* internal_default_instance() {
    return reinterpret_cast<const ProcessorTaskMessageProgress*>(
               &_ProcessorTaskMessageProgress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ProcessorTaskMessageProgress& a, ProcessorTaskMessageProgress& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessorTaskMessageProgress* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProcessorTaskMessageProgress* New() const final {
    return CreateMaybeMessage<ProcessorTaskMessageProgress>(nullptr);
  }

  ProcessorTaskMessageProgress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProcessorTaskMessageProgress>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProcessorTaskMessageProgress& from);
  void MergeFrom(const ProcessorTaskMessageProgress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessorTaskMessageProgress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProcessorTaskMessageProgress";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resourceprotocols_2eproto);
    return ::descriptor_table_resourceprotocols_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 1,
    kMessageFieldNumber = 3,
    kProgressFieldNumber = 2,
  };
  // string taskId = 1;
  void clear_taskid();
  const std::string& taskid() const;
  void set_taskid(const std::string& value);
  void set_taskid(std::string&& value);
  void set_taskid(const char* value);
  void set_taskid(const char* value, size_t size);
  std::string* mutable_taskid();
  std::string* release_taskid();
  void set_allocated_taskid(std::string* taskid);
  private:
  const std::string& _internal_taskid() const;
  void _internal_set_taskid(const std::string& value);
  std::string* _internal_mutable_taskid();
  public:

  // string message = 3;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // float progress = 2;
  void clear_progress();
  float progress() const;
  void set_progress(float value);
  private:
  float _internal_progress() const;
  void _internal_set_progress(float value);
  public:

  // @@protoc_insertion_point(class_scope:ProcessorTaskMessageProgress)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr taskid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  float progress_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resourceprotocols_2eproto;
};
// -------------------------------------------------------------------

class ProcessorTaskModelRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProcessorTaskModelRequest) */ {
 public:
  ProcessorTaskModelRequest();
  virtual ~ProcessorTaskModelRequest();

  ProcessorTaskModelRequest(const ProcessorTaskModelRequest& from);
  ProcessorTaskModelRequest(ProcessorTaskModelRequest&& from) noexcept
    : ProcessorTaskModelRequest() {
    *this = ::std::move(from);
  }

  inline ProcessorTaskModelRequest& operator=(const ProcessorTaskModelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessorTaskModelRequest& operator=(ProcessorTaskModelRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProcessorTaskModelRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcessorTaskModelRequest* internal_default_instance() {
    return reinterpret_cast<const ProcessorTaskModelRequest*>(
               &_ProcessorTaskModelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ProcessorTaskModelRequest& a, ProcessorTaskModelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessorTaskModelRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProcessorTaskModelRequest* New() const final {
    return CreateMaybeMessage<ProcessorTaskModelRequest>(nullptr);
  }

  ProcessorTaskModelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProcessorTaskModelRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProcessorTaskModelRequest& from);
  void MergeFrom(const ProcessorTaskModelRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessorTaskModelRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProcessorTaskModelRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resourceprotocols_2eproto);
    return ::descriptor_table_resourceprotocols_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 1,
    kModelTargetPathFieldNumber = 2,
    kAssetNameFieldNumber = 3,
    kModelDataFieldNumber = 11,
    kScaleXFieldNumber = 4,
    kScaleYFieldNumber = 5,
    kScaleZFieldNumber = 6,
    kRotationXFieldNumber = 7,
    kRotationYFieldNumber = 8,
    kRotationZFieldNumber = 9,
    kRotationWFieldNumber = 10,
  };
  // string taskId = 1;
  void clear_taskid();
  const std::string& taskid() const;
  void set_taskid(const std::string& value);
  void set_taskid(std::string&& value);
  void set_taskid(const char* value);
  void set_taskid(const char* value, size_t size);
  std::string* mutable_taskid();
  std::string* release_taskid();
  void set_allocated_taskid(std::string* taskid);
  private:
  const std::string& _internal_taskid() const;
  void _internal_set_taskid(const std::string& value);
  std::string* _internal_mutable_taskid();
  public:

  // string modelTargetPath = 2;
  void clear_modeltargetpath();
  const std::string& modeltargetpath() const;
  void set_modeltargetpath(const std::string& value);
  void set_modeltargetpath(std::string&& value);
  void set_modeltargetpath(const char* value);
  void set_modeltargetpath(const char* value, size_t size);
  std::string* mutable_modeltargetpath();
  std::string* release_modeltargetpath();
  void set_allocated_modeltargetpath(std::string* modeltargetpath);
  private:
  const std::string& _internal_modeltargetpath() const;
  void _internal_set_modeltargetpath(const std::string& value);
  std::string* _internal_mutable_modeltargetpath();
  public:

  // string assetName = 3;
  void clear_assetname();
  const std::string& assetname() const;
  void set_assetname(const std::string& value);
  void set_assetname(std::string&& value);
  void set_assetname(const char* value);
  void set_assetname(const char* value, size_t size);
  std::string* mutable_assetname();
  std::string* release_assetname();
  void set_allocated_assetname(std::string* assetname);
  private:
  const std::string& _internal_assetname() const;
  void _internal_set_assetname(const std::string& value);
  std::string* _internal_mutable_assetname();
  public:

  // bytes modelData = 11;
  void clear_modeldata();
  const std::string& modeldata() const;
  void set_modeldata(const std::string& value);
  void set_modeldata(std::string&& value);
  void set_modeldata(const char* value);
  void set_modeldata(const void* value, size_t size);
  std::string* mutable_modeldata();
  std::string* release_modeldata();
  void set_allocated_modeldata(std::string* modeldata);
  private:
  const std::string& _internal_modeldata() const;
  void _internal_set_modeldata(const std::string& value);
  std::string* _internal_mutable_modeldata();
  public:

  // float scaleX = 4;
  void clear_scalex();
  float scalex() const;
  void set_scalex(float value);
  private:
  float _internal_scalex() const;
  void _internal_set_scalex(float value);
  public:

  // float scaleY = 5;
  void clear_scaley();
  float scaley() const;
  void set_scaley(float value);
  private:
  float _internal_scaley() const;
  void _internal_set_scaley(float value);
  public:

  // float scaleZ = 6;
  void clear_scalez();
  float scalez() const;
  void set_scalez(float value);
  private:
  float _internal_scalez() const;
  void _internal_set_scalez(float value);
  public:

  // float rotationX = 7;
  void clear_rotationx();
  float rotationx() const;
  void set_rotationx(float value);
  private:
  float _internal_rotationx() const;
  void _internal_set_rotationx(float value);
  public:

  // float rotationY = 8;
  void clear_rotationy();
  float rotationy() const;
  void set_rotationy(float value);
  private:
  float _internal_rotationy() const;
  void _internal_set_rotationy(float value);
  public:

  // float rotationZ = 9;
  void clear_rotationz();
  float rotationz() const;
  void set_rotationz(float value);
  private:
  float _internal_rotationz() const;
  void _internal_set_rotationz(float value);
  public:

  // float rotationW = 10;
  void clear_rotationw();
  float rotationw() const;
  void set_rotationw(float value);
  private:
  float _internal_rotationw() const;
  void _internal_set_rotationw(float value);
  public:

  // @@protoc_insertion_point(class_scope:ProcessorTaskModelRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr taskid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr modeltargetpath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr assetname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr modeldata_;
  float scalex_;
  float scaley_;
  float scalez_;
  float rotationx_;
  float rotationy_;
  float rotationz_;
  float rotationw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resourceprotocols_2eproto;
};
// -------------------------------------------------------------------

class ProcessorTaskModelResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProcessorTaskModelResponse) */ {
 public:
  ProcessorTaskModelResponse();
  virtual ~ProcessorTaskModelResponse();

  ProcessorTaskModelResponse(const ProcessorTaskModelResponse& from);
  ProcessorTaskModelResponse(ProcessorTaskModelResponse&& from) noexcept
    : ProcessorTaskModelResponse() {
    *this = ::std::move(from);
  }

  inline ProcessorTaskModelResponse& operator=(const ProcessorTaskModelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessorTaskModelResponse& operator=(ProcessorTaskModelResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProcessorTaskModelResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcessorTaskModelResponse* internal_default_instance() {
    return reinterpret_cast<const ProcessorTaskModelResponse*>(
               &_ProcessorTaskModelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ProcessorTaskModelResponse& a, ProcessorTaskModelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessorTaskModelResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProcessorTaskModelResponse* New() const final {
    return CreateMaybeMessage<ProcessorTaskModelResponse>(nullptr);
  }

  ProcessorTaskModelResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProcessorTaskModelResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProcessorTaskModelResponse& from);
  void MergeFrom(const ProcessorTaskModelResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessorTaskModelResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProcessorTaskModelResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resourceprotocols_2eproto);
    return ::descriptor_table_resourceprotocols_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 1,
    kModelDataFieldNumber = 2,
    kPrefabDataFieldNumber = 3,
  };
  // string taskId = 1;
  void clear_taskid();
  const std::string& taskid() const;
  void set_taskid(const std::string& value);
  void set_taskid(std::string&& value);
  void set_taskid(const char* value);
  void set_taskid(const char* value, size_t size);
  std::string* mutable_taskid();
  std::string* release_taskid();
  void set_allocated_taskid(std::string* taskid);
  private:
  const std::string& _internal_taskid() const;
  void _internal_set_taskid(const std::string& value);
  std::string* _internal_mutable_taskid();
  public:

  // bytes modelData = 2;
  void clear_modeldata();
  const std::string& modeldata() const;
  void set_modeldata(const std::string& value);
  void set_modeldata(std::string&& value);
  void set_modeldata(const char* value);
  void set_modeldata(const void* value, size_t size);
  std::string* mutable_modeldata();
  std::string* release_modeldata();
  void set_allocated_modeldata(std::string* modeldata);
  private:
  const std::string& _internal_modeldata() const;
  void _internal_set_modeldata(const std::string& value);
  std::string* _internal_mutable_modeldata();
  public:

  // bytes prefabData = 3;
  void clear_prefabdata();
  const std::string& prefabdata() const;
  void set_prefabdata(const std::string& value);
  void set_prefabdata(std::string&& value);
  void set_prefabdata(const char* value);
  void set_prefabdata(const void* value, size_t size);
  std::string* mutable_prefabdata();
  std::string* release_prefabdata();
  void set_allocated_prefabdata(std::string* prefabdata);
  private:
  const std::string& _internal_prefabdata() const;
  void _internal_set_prefabdata(const std::string& value);
  std::string* _internal_mutable_prefabdata();
  public:

  // @@protoc_insertion_point(class_scope:ProcessorTaskModelResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr taskid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr modeldata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefabdata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resourceprotocols_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HostProcessorMessageType

// .HostProcessorMessageType.MessageType type = 1;
inline void HostProcessorMessageType::clear_type() {
  type_ = 0;
}
inline ::HostProcessorMessageType_MessageType HostProcessorMessageType::_internal_type() const {
  return static_cast< ::HostProcessorMessageType_MessageType >(type_);
}
inline ::HostProcessorMessageType_MessageType HostProcessorMessageType::type() const {
  // @@protoc_insertion_point(field_get:HostProcessorMessageType.type)
  return _internal_type();
}
inline void HostProcessorMessageType::_internal_set_type(::HostProcessorMessageType_MessageType value) {
  
  type_ = value;
}
inline void HostProcessorMessageType::set_type(::HostProcessorMessageType_MessageType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:HostProcessorMessageType.type)
}

// -------------------------------------------------------------------

// HostCoreResponse

// uint32 cores = 1;
inline void HostCoreResponse::clear_cores() {
  cores_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HostCoreResponse::_internal_cores() const {
  return cores_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HostCoreResponse::cores() const {
  // @@protoc_insertion_point(field_get:HostCoreResponse.cores)
  return _internal_cores();
}
inline void HostCoreResponse::_internal_set_cores(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cores_ = value;
}
inline void HostCoreResponse::set_cores(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cores(value);
  // @@protoc_insertion_point(field_set:HostCoreResponse.cores)
}

// -------------------------------------------------------------------

// HostTaskImageRequest

// string taskId = 1;
inline void HostTaskImageRequest::clear_taskid() {
  taskid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HostTaskImageRequest::taskid() const {
  // @@protoc_insertion_point(field_get:HostTaskImageRequest.taskId)
  return _internal_taskid();
}
inline void HostTaskImageRequest::set_taskid(const std::string& value) {
  _internal_set_taskid(value);
  // @@protoc_insertion_point(field_set:HostTaskImageRequest.taskId)
}
inline std::string* HostTaskImageRequest::mutable_taskid() {
  // @@protoc_insertion_point(field_mutable:HostTaskImageRequest.taskId)
  return _internal_mutable_taskid();
}
inline const std::string& HostTaskImageRequest::_internal_taskid() const {
  return taskid_.GetNoArena();
}
inline void HostTaskImageRequest::_internal_set_taskid(const std::string& value) {
  
  taskid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void HostTaskImageRequest::set_taskid(std::string&& value) {
  
  taskid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HostTaskImageRequest.taskId)
}
inline void HostTaskImageRequest::set_taskid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  taskid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HostTaskImageRequest.taskId)
}
inline void HostTaskImageRequest::set_taskid(const char* value, size_t size) {
  
  taskid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HostTaskImageRequest.taskId)
}
inline std::string* HostTaskImageRequest::_internal_mutable_taskid() {
  
  return taskid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HostTaskImageRequest::release_taskid() {
  // @@protoc_insertion_point(field_release:HostTaskImageRequest.taskId)
  
  return taskid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HostTaskImageRequest::set_allocated_taskid(std::string* taskid) {
  if (taskid != nullptr) {
    
  } else {
    
  }
  taskid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), taskid);
  // @@protoc_insertion_point(field_set_allocated:HostTaskImageRequest.taskId)
}

// string extension = 2;
inline void HostTaskImageRequest::clear_extension() {
  extension_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HostTaskImageRequest::extension() const {
  // @@protoc_insertion_point(field_get:HostTaskImageRequest.extension)
  return _internal_extension();
}
inline void HostTaskImageRequest::set_extension(const std::string& value) {
  _internal_set_extension(value);
  // @@protoc_insertion_point(field_set:HostTaskImageRequest.extension)
}
inline std::string* HostTaskImageRequest::mutable_extension() {
  // @@protoc_insertion_point(field_mutable:HostTaskImageRequest.extension)
  return _internal_mutable_extension();
}
inline const std::string& HostTaskImageRequest::_internal_extension() const {
  return extension_.GetNoArena();
}
inline void HostTaskImageRequest::_internal_set_extension(const std::string& value) {
  
  extension_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void HostTaskImageRequest::set_extension(std::string&& value) {
  
  extension_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HostTaskImageRequest.extension)
}
inline void HostTaskImageRequest::set_extension(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  extension_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HostTaskImageRequest.extension)
}
inline void HostTaskImageRequest::set_extension(const char* value, size_t size) {
  
  extension_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HostTaskImageRequest.extension)
}
inline std::string* HostTaskImageRequest::_internal_mutable_extension() {
  
  return extension_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HostTaskImageRequest::release_extension() {
  // @@protoc_insertion_point(field_release:HostTaskImageRequest.extension)
  
  return extension_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HostTaskImageRequest::set_allocated_extension(std::string* extension) {
  if (extension != nullptr) {
    
  } else {
    
  }
  extension_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), extension);
  // @@protoc_insertion_point(field_set_allocated:HostTaskImageRequest.extension)
}

// int32 format = 3;
inline void HostTaskImageRequest::clear_format() {
  format_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HostTaskImageRequest::_internal_format() const {
  return format_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HostTaskImageRequest::format() const {
  // @@protoc_insertion_point(field_get:HostTaskImageRequest.format)
  return _internal_format();
}
inline void HostTaskImageRequest::_internal_set_format(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  format_ = value;
}
inline void HostTaskImageRequest::set_format(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:HostTaskImageRequest.format)
}

// bool generateMips = 4;
inline void HostTaskImageRequest::clear_generatemips() {
  generatemips_ = false;
}
inline bool HostTaskImageRequest::_internal_generatemips() const {
  return generatemips_;
}
inline bool HostTaskImageRequest::generatemips() const {
  // @@protoc_insertion_point(field_get:HostTaskImageRequest.generateMips)
  return _internal_generatemips();
}
inline void HostTaskImageRequest::_internal_set_generatemips(bool value) {
  
  generatemips_ = value;
}
inline void HostTaskImageRequest::set_generatemips(bool value) {
  _internal_set_generatemips(value);
  // @@protoc_insertion_point(field_set:HostTaskImageRequest.generateMips)
}

// bool flipNormal = 5;
inline void HostTaskImageRequest::clear_flipnormal() {
  flipnormal_ = false;
}
inline bool HostTaskImageRequest::_internal_flipnormal() const {
  return flipnormal_;
}
inline bool HostTaskImageRequest::flipnormal() const {
  // @@protoc_insertion_point(field_get:HostTaskImageRequest.flipNormal)
  return _internal_flipnormal();
}
inline void HostTaskImageRequest::_internal_set_flipnormal(bool value) {
  
  flipnormal_ = value;
}
inline void HostTaskImageRequest::set_flipnormal(bool value) {
  _internal_set_flipnormal(value);
  // @@protoc_insertion_point(field_set:HostTaskImageRequest.flipNormal)
}

// bool alphaClipped = 6;
inline void HostTaskImageRequest::clear_alphaclipped() {
  alphaclipped_ = false;
}
inline bool HostTaskImageRequest::_internal_alphaclipped() const {
  return alphaclipped_;
}
inline bool HostTaskImageRequest::alphaclipped() const {
  // @@protoc_insertion_point(field_get:HostTaskImageRequest.alphaClipped)
  return _internal_alphaclipped();
}
inline void HostTaskImageRequest::_internal_set_alphaclipped(bool value) {
  
  alphaclipped_ = value;
}
inline void HostTaskImageRequest::set_alphaclipped(bool value) {
  _internal_set_alphaclipped(value);
  // @@protoc_insertion_point(field_set:HostTaskImageRequest.alphaClipped)
}

// bytes data = 7;
inline void HostTaskImageRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HostTaskImageRequest::data() const {
  // @@protoc_insertion_point(field_get:HostTaskImageRequest.data)
  return _internal_data();
}
inline void HostTaskImageRequest::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:HostTaskImageRequest.data)
}
inline std::string* HostTaskImageRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable:HostTaskImageRequest.data)
  return _internal_mutable_data();
}
inline const std::string& HostTaskImageRequest::_internal_data() const {
  return data_.GetNoArena();
}
inline void HostTaskImageRequest::_internal_set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void HostTaskImageRequest::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HostTaskImageRequest.data)
}
inline void HostTaskImageRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HostTaskImageRequest.data)
}
inline void HostTaskImageRequest::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HostTaskImageRequest.data)
}
inline std::string* HostTaskImageRequest::_internal_mutable_data() {
  
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HostTaskImageRequest::release_data() {
  // @@protoc_insertion_point(field_release:HostTaskImageRequest.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HostTaskImageRequest::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:HostTaskImageRequest.data)
}

// -------------------------------------------------------------------

// HostTaskImageResponse

// string taskId = 1;
inline void HostTaskImageResponse::clear_taskid() {
  taskid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HostTaskImageResponse::taskid() const {
  // @@protoc_insertion_point(field_get:HostTaskImageResponse.taskId)
  return _internal_taskid();
}
inline void HostTaskImageResponse::set_taskid(const std::string& value) {
  _internal_set_taskid(value);
  // @@protoc_insertion_point(field_set:HostTaskImageResponse.taskId)
}
inline std::string* HostTaskImageResponse::mutable_taskid() {
  // @@protoc_insertion_point(field_mutable:HostTaskImageResponse.taskId)
  return _internal_mutable_taskid();
}
inline const std::string& HostTaskImageResponse::_internal_taskid() const {
  return taskid_.GetNoArena();
}
inline void HostTaskImageResponse::_internal_set_taskid(const std::string& value) {
  
  taskid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void HostTaskImageResponse::set_taskid(std::string&& value) {
  
  taskid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HostTaskImageResponse.taskId)
}
inline void HostTaskImageResponse::set_taskid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  taskid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HostTaskImageResponse.taskId)
}
inline void HostTaskImageResponse::set_taskid(const char* value, size_t size) {
  
  taskid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HostTaskImageResponse.taskId)
}
inline std::string* HostTaskImageResponse::_internal_mutable_taskid() {
  
  return taskid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HostTaskImageResponse::release_taskid() {
  // @@protoc_insertion_point(field_release:HostTaskImageResponse.taskId)
  
  return taskid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HostTaskImageResponse::set_allocated_taskid(std::string* taskid) {
  if (taskid != nullptr) {
    
  } else {
    
  }
  taskid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), taskid);
  // @@protoc_insertion_point(field_set_allocated:HostTaskImageResponse.taskId)
}

// int32 width = 2;
inline void HostTaskImageResponse::clear_width() {
  width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HostTaskImageResponse::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HostTaskImageResponse::width() const {
  // @@protoc_insertion_point(field_get:HostTaskImageResponse.width)
  return _internal_width();
}
inline void HostTaskImageResponse::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  width_ = value;
}
inline void HostTaskImageResponse::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:HostTaskImageResponse.width)
}

// int32 height = 3;
inline void HostTaskImageResponse::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HostTaskImageResponse::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HostTaskImageResponse::height() const {
  // @@protoc_insertion_point(field_get:HostTaskImageResponse.height)
  return _internal_height();
}
inline void HostTaskImageResponse::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
}
inline void HostTaskImageResponse::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:HostTaskImageResponse.height)
}

// int32 mips = 4;
inline void HostTaskImageResponse::clear_mips() {
  mips_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HostTaskImageResponse::_internal_mips() const {
  return mips_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HostTaskImageResponse::mips() const {
  // @@protoc_insertion_point(field_get:HostTaskImageResponse.mips)
  return _internal_mips();
}
inline void HostTaskImageResponse::_internal_set_mips(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mips_ = value;
}
inline void HostTaskImageResponse::set_mips(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mips(value);
  // @@protoc_insertion_point(field_set:HostTaskImageResponse.mips)
}

// int32 format = 5;
inline void HostTaskImageResponse::clear_format() {
  format_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HostTaskImageResponse::_internal_format() const {
  return format_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HostTaskImageResponse::format() const {
  // @@protoc_insertion_point(field_get:HostTaskImageResponse.format)
  return _internal_format();
}
inline void HostTaskImageResponse::_internal_set_format(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  format_ = value;
}
inline void HostTaskImageResponse::set_format(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:HostTaskImageResponse.format)
}

// bytes data = 6;
inline void HostTaskImageResponse::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HostTaskImageResponse::data() const {
  // @@protoc_insertion_point(field_get:HostTaskImageResponse.data)
  return _internal_data();
}
inline void HostTaskImageResponse::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:HostTaskImageResponse.data)
}
inline std::string* HostTaskImageResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable:HostTaskImageResponse.data)
  return _internal_mutable_data();
}
inline const std::string& HostTaskImageResponse::_internal_data() const {
  return data_.GetNoArena();
}
inline void HostTaskImageResponse::_internal_set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void HostTaskImageResponse::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HostTaskImageResponse.data)
}
inline void HostTaskImageResponse::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HostTaskImageResponse.data)
}
inline void HostTaskImageResponse::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HostTaskImageResponse.data)
}
inline std::string* HostTaskImageResponse::_internal_mutable_data() {
  
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HostTaskImageResponse::release_data() {
  // @@protoc_insertion_point(field_release:HostTaskImageResponse.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HostTaskImageResponse::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:HostTaskImageResponse.data)
}

// -------------------------------------------------------------------

// HostTaskModelRequest

// string taskId = 1;
inline void HostTaskModelRequest::clear_taskid() {
  taskid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HostTaskModelRequest::taskid() const {
  // @@protoc_insertion_point(field_get:HostTaskModelRequest.taskId)
  return _internal_taskid();
}
inline void HostTaskModelRequest::set_taskid(const std::string& value) {
  _internal_set_taskid(value);
  // @@protoc_insertion_point(field_set:HostTaskModelRequest.taskId)
}
inline std::string* HostTaskModelRequest::mutable_taskid() {
  // @@protoc_insertion_point(field_mutable:HostTaskModelRequest.taskId)
  return _internal_mutable_taskid();
}
inline const std::string& HostTaskModelRequest::_internal_taskid() const {
  return taskid_.GetNoArena();
}
inline void HostTaskModelRequest::_internal_set_taskid(const std::string& value) {
  
  taskid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void HostTaskModelRequest::set_taskid(std::string&& value) {
  
  taskid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HostTaskModelRequest.taskId)
}
inline void HostTaskModelRequest::set_taskid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  taskid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HostTaskModelRequest.taskId)
}
inline void HostTaskModelRequest::set_taskid(const char* value, size_t size) {
  
  taskid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HostTaskModelRequest.taskId)
}
inline std::string* HostTaskModelRequest::_internal_mutable_taskid() {
  
  return taskid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HostTaskModelRequest::release_taskid() {
  // @@protoc_insertion_point(field_release:HostTaskModelRequest.taskId)
  
  return taskid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HostTaskModelRequest::set_allocated_taskid(std::string* taskid) {
  if (taskid != nullptr) {
    
  } else {
    
  }
  taskid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), taskid);
  // @@protoc_insertion_point(field_set_allocated:HostTaskModelRequest.taskId)
}

// string modelTargetPath = 2;
inline void HostTaskModelRequest::clear_modeltargetpath() {
  modeltargetpath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HostTaskModelRequest::modeltargetpath() const {
  // @@protoc_insertion_point(field_get:HostTaskModelRequest.modelTargetPath)
  return _internal_modeltargetpath();
}
inline void HostTaskModelRequest::set_modeltargetpath(const std::string& value) {
  _internal_set_modeltargetpath(value);
  // @@protoc_insertion_point(field_set:HostTaskModelRequest.modelTargetPath)
}
inline std::string* HostTaskModelRequest::mutable_modeltargetpath() {
  // @@protoc_insertion_point(field_mutable:HostTaskModelRequest.modelTargetPath)
  return _internal_mutable_modeltargetpath();
}
inline const std::string& HostTaskModelRequest::_internal_modeltargetpath() const {
  return modeltargetpath_.GetNoArena();
}
inline void HostTaskModelRequest::_internal_set_modeltargetpath(const std::string& value) {
  
  modeltargetpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void HostTaskModelRequest::set_modeltargetpath(std::string&& value) {
  
  modeltargetpath_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HostTaskModelRequest.modelTargetPath)
}
inline void HostTaskModelRequest::set_modeltargetpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  modeltargetpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HostTaskModelRequest.modelTargetPath)
}
inline void HostTaskModelRequest::set_modeltargetpath(const char* value, size_t size) {
  
  modeltargetpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HostTaskModelRequest.modelTargetPath)
}
inline std::string* HostTaskModelRequest::_internal_mutable_modeltargetpath() {
  
  return modeltargetpath_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HostTaskModelRequest::release_modeltargetpath() {
  // @@protoc_insertion_point(field_release:HostTaskModelRequest.modelTargetPath)
  
  return modeltargetpath_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HostTaskModelRequest::set_allocated_modeltargetpath(std::string* modeltargetpath) {
  if (modeltargetpath != nullptr) {
    
  } else {
    
  }
  modeltargetpath_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), modeltargetpath);
  // @@protoc_insertion_point(field_set_allocated:HostTaskModelRequest.modelTargetPath)
}

// string assetName = 3;
inline void HostTaskModelRequest::clear_assetname() {
  assetname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HostTaskModelRequest::assetname() const {
  // @@protoc_insertion_point(field_get:HostTaskModelRequest.assetName)
  return _internal_assetname();
}
inline void HostTaskModelRequest::set_assetname(const std::string& value) {
  _internal_set_assetname(value);
  // @@protoc_insertion_point(field_set:HostTaskModelRequest.assetName)
}
inline std::string* HostTaskModelRequest::mutable_assetname() {
  // @@protoc_insertion_point(field_mutable:HostTaskModelRequest.assetName)
  return _internal_mutable_assetname();
}
inline const std::string& HostTaskModelRequest::_internal_assetname() const {
  return assetname_.GetNoArena();
}
inline void HostTaskModelRequest::_internal_set_assetname(const std::string& value) {
  
  assetname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void HostTaskModelRequest::set_assetname(std::string&& value) {
  
  assetname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HostTaskModelRequest.assetName)
}
inline void HostTaskModelRequest::set_assetname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  assetname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HostTaskModelRequest.assetName)
}
inline void HostTaskModelRequest::set_assetname(const char* value, size_t size) {
  
  assetname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HostTaskModelRequest.assetName)
}
inline std::string* HostTaskModelRequest::_internal_mutable_assetname() {
  
  return assetname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HostTaskModelRequest::release_assetname() {
  // @@protoc_insertion_point(field_release:HostTaskModelRequest.assetName)
  
  return assetname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HostTaskModelRequest::set_allocated_assetname(std::string* assetname) {
  if (assetname != nullptr) {
    
  } else {
    
  }
  assetname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), assetname);
  // @@protoc_insertion_point(field_set_allocated:HostTaskModelRequest.assetName)
}

// float scaleX = 4;
inline void HostTaskModelRequest::clear_scalex() {
  scalex_ = 0;
}
inline float HostTaskModelRequest::_internal_scalex() const {
  return scalex_;
}
inline float HostTaskModelRequest::scalex() const {
  // @@protoc_insertion_point(field_get:HostTaskModelRequest.scaleX)
  return _internal_scalex();
}
inline void HostTaskModelRequest::_internal_set_scalex(float value) {
  
  scalex_ = value;
}
inline void HostTaskModelRequest::set_scalex(float value) {
  _internal_set_scalex(value);
  // @@protoc_insertion_point(field_set:HostTaskModelRequest.scaleX)
}

// float scaleY = 5;
inline void HostTaskModelRequest::clear_scaley() {
  scaley_ = 0;
}
inline float HostTaskModelRequest::_internal_scaley() const {
  return scaley_;
}
inline float HostTaskModelRequest::scaley() const {
  // @@protoc_insertion_point(field_get:HostTaskModelRequest.scaleY)
  return _internal_scaley();
}
inline void HostTaskModelRequest::_internal_set_scaley(float value) {
  
  scaley_ = value;
}
inline void HostTaskModelRequest::set_scaley(float value) {
  _internal_set_scaley(value);
  // @@protoc_insertion_point(field_set:HostTaskModelRequest.scaleY)
}

// float scaleZ = 6;
inline void HostTaskModelRequest::clear_scalez() {
  scalez_ = 0;
}
inline float HostTaskModelRequest::_internal_scalez() const {
  return scalez_;
}
inline float HostTaskModelRequest::scalez() const {
  // @@protoc_insertion_point(field_get:HostTaskModelRequest.scaleZ)
  return _internal_scalez();
}
inline void HostTaskModelRequest::_internal_set_scalez(float value) {
  
  scalez_ = value;
}
inline void HostTaskModelRequest::set_scalez(float value) {
  _internal_set_scalez(value);
  // @@protoc_insertion_point(field_set:HostTaskModelRequest.scaleZ)
}

// float rotationX = 7;
inline void HostTaskModelRequest::clear_rotationx() {
  rotationx_ = 0;
}
inline float HostTaskModelRequest::_internal_rotationx() const {
  return rotationx_;
}
inline float HostTaskModelRequest::rotationx() const {
  // @@protoc_insertion_point(field_get:HostTaskModelRequest.rotationX)
  return _internal_rotationx();
}
inline void HostTaskModelRequest::_internal_set_rotationx(float value) {
  
  rotationx_ = value;
}
inline void HostTaskModelRequest::set_rotationx(float value) {
  _internal_set_rotationx(value);
  // @@protoc_insertion_point(field_set:HostTaskModelRequest.rotationX)
}

// float rotationY = 8;
inline void HostTaskModelRequest::clear_rotationy() {
  rotationy_ = 0;
}
inline float HostTaskModelRequest::_internal_rotationy() const {
  return rotationy_;
}
inline float HostTaskModelRequest::rotationy() const {
  // @@protoc_insertion_point(field_get:HostTaskModelRequest.rotationY)
  return _internal_rotationy();
}
inline void HostTaskModelRequest::_internal_set_rotationy(float value) {
  
  rotationy_ = value;
}
inline void HostTaskModelRequest::set_rotationy(float value) {
  _internal_set_rotationy(value);
  // @@protoc_insertion_point(field_set:HostTaskModelRequest.rotationY)
}

// float rotationZ = 9;
inline void HostTaskModelRequest::clear_rotationz() {
  rotationz_ = 0;
}
inline float HostTaskModelRequest::_internal_rotationz() const {
  return rotationz_;
}
inline float HostTaskModelRequest::rotationz() const {
  // @@protoc_insertion_point(field_get:HostTaskModelRequest.rotationZ)
  return _internal_rotationz();
}
inline void HostTaskModelRequest::_internal_set_rotationz(float value) {
  
  rotationz_ = value;
}
inline void HostTaskModelRequest::set_rotationz(float value) {
  _internal_set_rotationz(value);
  // @@protoc_insertion_point(field_set:HostTaskModelRequest.rotationZ)
}

// float rotationW = 10;
inline void HostTaskModelRequest::clear_rotationw() {
  rotationw_ = 0;
}
inline float HostTaskModelRequest::_internal_rotationw() const {
  return rotationw_;
}
inline float HostTaskModelRequest::rotationw() const {
  // @@protoc_insertion_point(field_get:HostTaskModelRequest.rotationW)
  return _internal_rotationw();
}
inline void HostTaskModelRequest::_internal_set_rotationw(float value) {
  
  rotationw_ = value;
}
inline void HostTaskModelRequest::set_rotationw(float value) {
  _internal_set_rotationw(value);
  // @@protoc_insertion_point(field_set:HostTaskModelRequest.rotationW)
}

// bytes data = 11;
inline void HostTaskModelRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HostTaskModelRequest::data() const {
  // @@protoc_insertion_point(field_get:HostTaskModelRequest.data)
  return _internal_data();
}
inline void HostTaskModelRequest::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:HostTaskModelRequest.data)
}
inline std::string* HostTaskModelRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable:HostTaskModelRequest.data)
  return _internal_mutable_data();
}
inline const std::string& HostTaskModelRequest::_internal_data() const {
  return data_.GetNoArena();
}
inline void HostTaskModelRequest::_internal_set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void HostTaskModelRequest::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HostTaskModelRequest.data)
}
inline void HostTaskModelRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HostTaskModelRequest.data)
}
inline void HostTaskModelRequest::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HostTaskModelRequest.data)
}
inline std::string* HostTaskModelRequest::_internal_mutable_data() {
  
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HostTaskModelRequest::release_data() {
  // @@protoc_insertion_point(field_release:HostTaskModelRequest.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HostTaskModelRequest::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:HostTaskModelRequest.data)
}

// -------------------------------------------------------------------

// HostTaskModelResponse

// string taskId = 1;
inline void HostTaskModelResponse::clear_taskid() {
  taskid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HostTaskModelResponse::taskid() const {
  // @@protoc_insertion_point(field_get:HostTaskModelResponse.taskId)
  return _internal_taskid();
}
inline void HostTaskModelResponse::set_taskid(const std::string& value) {
  _internal_set_taskid(value);
  // @@protoc_insertion_point(field_set:HostTaskModelResponse.taskId)
}
inline std::string* HostTaskModelResponse::mutable_taskid() {
  // @@protoc_insertion_point(field_mutable:HostTaskModelResponse.taskId)
  return _internal_mutable_taskid();
}
inline const std::string& HostTaskModelResponse::_internal_taskid() const {
  return taskid_.GetNoArena();
}
inline void HostTaskModelResponse::_internal_set_taskid(const std::string& value) {
  
  taskid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void HostTaskModelResponse::set_taskid(std::string&& value) {
  
  taskid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HostTaskModelResponse.taskId)
}
inline void HostTaskModelResponse::set_taskid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  taskid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HostTaskModelResponse.taskId)
}
inline void HostTaskModelResponse::set_taskid(const char* value, size_t size) {
  
  taskid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HostTaskModelResponse.taskId)
}
inline std::string* HostTaskModelResponse::_internal_mutable_taskid() {
  
  return taskid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HostTaskModelResponse::release_taskid() {
  // @@protoc_insertion_point(field_release:HostTaskModelResponse.taskId)
  
  return taskid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HostTaskModelResponse::set_allocated_taskid(std::string* taskid) {
  if (taskid != nullptr) {
    
  } else {
    
  }
  taskid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), taskid);
  // @@protoc_insertion_point(field_set_allocated:HostTaskModelResponse.taskId)
}

// bytes modelData = 2;
inline void HostTaskModelResponse::clear_modeldata() {
  modeldata_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HostTaskModelResponse::modeldata() const {
  // @@protoc_insertion_point(field_get:HostTaskModelResponse.modelData)
  return _internal_modeldata();
}
inline void HostTaskModelResponse::set_modeldata(const std::string& value) {
  _internal_set_modeldata(value);
  // @@protoc_insertion_point(field_set:HostTaskModelResponse.modelData)
}
inline std::string* HostTaskModelResponse::mutable_modeldata() {
  // @@protoc_insertion_point(field_mutable:HostTaskModelResponse.modelData)
  return _internal_mutable_modeldata();
}
inline const std::string& HostTaskModelResponse::_internal_modeldata() const {
  return modeldata_.GetNoArena();
}
inline void HostTaskModelResponse::_internal_set_modeldata(const std::string& value) {
  
  modeldata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void HostTaskModelResponse::set_modeldata(std::string&& value) {
  
  modeldata_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HostTaskModelResponse.modelData)
}
inline void HostTaskModelResponse::set_modeldata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  modeldata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HostTaskModelResponse.modelData)
}
inline void HostTaskModelResponse::set_modeldata(const void* value, size_t size) {
  
  modeldata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HostTaskModelResponse.modelData)
}
inline std::string* HostTaskModelResponse::_internal_mutable_modeldata() {
  
  return modeldata_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HostTaskModelResponse::release_modeldata() {
  // @@protoc_insertion_point(field_release:HostTaskModelResponse.modelData)
  
  return modeldata_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HostTaskModelResponse::set_allocated_modeldata(std::string* modeldata) {
  if (modeldata != nullptr) {
    
  } else {
    
  }
  modeldata_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), modeldata);
  // @@protoc_insertion_point(field_set_allocated:HostTaskModelResponse.modelData)
}

// bytes prefabData = 3;
inline void HostTaskModelResponse::clear_prefabdata() {
  prefabdata_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HostTaskModelResponse::prefabdata() const {
  // @@protoc_insertion_point(field_get:HostTaskModelResponse.prefabData)
  return _internal_prefabdata();
}
inline void HostTaskModelResponse::set_prefabdata(const std::string& value) {
  _internal_set_prefabdata(value);
  // @@protoc_insertion_point(field_set:HostTaskModelResponse.prefabData)
}
inline std::string* HostTaskModelResponse::mutable_prefabdata() {
  // @@protoc_insertion_point(field_mutable:HostTaskModelResponse.prefabData)
  return _internal_mutable_prefabdata();
}
inline const std::string& HostTaskModelResponse::_internal_prefabdata() const {
  return prefabdata_.GetNoArena();
}
inline void HostTaskModelResponse::_internal_set_prefabdata(const std::string& value) {
  
  prefabdata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void HostTaskModelResponse::set_prefabdata(std::string&& value) {
  
  prefabdata_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HostTaskModelResponse.prefabData)
}
inline void HostTaskModelResponse::set_prefabdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prefabdata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HostTaskModelResponse.prefabData)
}
inline void HostTaskModelResponse::set_prefabdata(const void* value, size_t size) {
  
  prefabdata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HostTaskModelResponse.prefabData)
}
inline std::string* HostTaskModelResponse::_internal_mutable_prefabdata() {
  
  return prefabdata_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HostTaskModelResponse::release_prefabdata() {
  // @@protoc_insertion_point(field_release:HostTaskModelResponse.prefabData)
  
  return prefabdata_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HostTaskModelResponse::set_allocated_prefabdata(std::string* prefabdata) {
  if (prefabdata != nullptr) {
    
  } else {
    
  }
  prefabdata_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prefabdata);
  // @@protoc_insertion_point(field_set_allocated:HostTaskModelResponse.prefabData)
}

// -------------------------------------------------------------------

// HostTaskStarted

// string taskId = 1;
inline void HostTaskStarted::clear_taskid() {
  taskid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HostTaskStarted::taskid() const {
  // @@protoc_insertion_point(field_get:HostTaskStarted.taskId)
  return _internal_taskid();
}
inline void HostTaskStarted::set_taskid(const std::string& value) {
  _internal_set_taskid(value);
  // @@protoc_insertion_point(field_set:HostTaskStarted.taskId)
}
inline std::string* HostTaskStarted::mutable_taskid() {
  // @@protoc_insertion_point(field_mutable:HostTaskStarted.taskId)
  return _internal_mutable_taskid();
}
inline const std::string& HostTaskStarted::_internal_taskid() const {
  return taskid_.GetNoArena();
}
inline void HostTaskStarted::_internal_set_taskid(const std::string& value) {
  
  taskid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void HostTaskStarted::set_taskid(std::string&& value) {
  
  taskid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HostTaskStarted.taskId)
}
inline void HostTaskStarted::set_taskid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  taskid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HostTaskStarted.taskId)
}
inline void HostTaskStarted::set_taskid(const char* value, size_t size) {
  
  taskid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HostTaskStarted.taskId)
}
inline std::string* HostTaskStarted::_internal_mutable_taskid() {
  
  return taskid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HostTaskStarted::release_taskid() {
  // @@protoc_insertion_point(field_release:HostTaskStarted.taskId)
  
  return taskid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HostTaskStarted::set_allocated_taskid(std::string* taskid) {
  if (taskid != nullptr) {
    
  } else {
    
  }
  taskid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), taskid);
  // @@protoc_insertion_point(field_set_allocated:HostTaskStarted.taskId)
}

// -------------------------------------------------------------------

// HostTaskFinished

// string taskId = 1;
inline void HostTaskFinished::clear_taskid() {
  taskid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HostTaskFinished::taskid() const {
  // @@protoc_insertion_point(field_get:HostTaskFinished.taskId)
  return _internal_taskid();
}
inline void HostTaskFinished::set_taskid(const std::string& value) {
  _internal_set_taskid(value);
  // @@protoc_insertion_point(field_set:HostTaskFinished.taskId)
}
inline std::string* HostTaskFinished::mutable_taskid() {
  // @@protoc_insertion_point(field_mutable:HostTaskFinished.taskId)
  return _internal_mutable_taskid();
}
inline const std::string& HostTaskFinished::_internal_taskid() const {
  return taskid_.GetNoArena();
}
inline void HostTaskFinished::_internal_set_taskid(const std::string& value) {
  
  taskid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void HostTaskFinished::set_taskid(std::string&& value) {
  
  taskid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HostTaskFinished.taskId)
}
inline void HostTaskFinished::set_taskid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  taskid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HostTaskFinished.taskId)
}
inline void HostTaskFinished::set_taskid(const char* value, size_t size) {
  
  taskid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HostTaskFinished.taskId)
}
inline std::string* HostTaskFinished::_internal_mutable_taskid() {
  
  return taskid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HostTaskFinished::release_taskid() {
  // @@protoc_insertion_point(field_release:HostTaskFinished.taskId)
  
  return taskid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HostTaskFinished::set_allocated_taskid(std::string* taskid) {
  if (taskid != nullptr) {
    
  } else {
    
  }
  taskid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), taskid);
  // @@protoc_insertion_point(field_set_allocated:HostTaskFinished.taskId)
}

// -------------------------------------------------------------------

// HostTaskProgress

// string taskId = 1;
inline void HostTaskProgress::clear_taskid() {
  taskid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HostTaskProgress::taskid() const {
  // @@protoc_insertion_point(field_get:HostTaskProgress.taskId)
  return _internal_taskid();
}
inline void HostTaskProgress::set_taskid(const std::string& value) {
  _internal_set_taskid(value);
  // @@protoc_insertion_point(field_set:HostTaskProgress.taskId)
}
inline std::string* HostTaskProgress::mutable_taskid() {
  // @@protoc_insertion_point(field_mutable:HostTaskProgress.taskId)
  return _internal_mutable_taskid();
}
inline const std::string& HostTaskProgress::_internal_taskid() const {
  return taskid_.GetNoArena();
}
inline void HostTaskProgress::_internal_set_taskid(const std::string& value) {
  
  taskid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void HostTaskProgress::set_taskid(std::string&& value) {
  
  taskid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HostTaskProgress.taskId)
}
inline void HostTaskProgress::set_taskid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  taskid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HostTaskProgress.taskId)
}
inline void HostTaskProgress::set_taskid(const char* value, size_t size) {
  
  taskid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HostTaskProgress.taskId)
}
inline std::string* HostTaskProgress::_internal_mutable_taskid() {
  
  return taskid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HostTaskProgress::release_taskid() {
  // @@protoc_insertion_point(field_release:HostTaskProgress.taskId)
  
  return taskid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HostTaskProgress::set_allocated_taskid(std::string* taskid) {
  if (taskid != nullptr) {
    
  } else {
    
  }
  taskid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), taskid);
  // @@protoc_insertion_point(field_set_allocated:HostTaskProgress.taskId)
}

// float progress = 2;
inline void HostTaskProgress::clear_progress() {
  progress_ = 0;
}
inline float HostTaskProgress::_internal_progress() const {
  return progress_;
}
inline float HostTaskProgress::progress() const {
  // @@protoc_insertion_point(field_get:HostTaskProgress.progress)
  return _internal_progress();
}
inline void HostTaskProgress::_internal_set_progress(float value) {
  
  progress_ = value;
}
inline void HostTaskProgress::set_progress(float value) {
  _internal_set_progress(value);
  // @@protoc_insertion_point(field_set:HostTaskProgress.progress)
}

// -------------------------------------------------------------------

// HostTaskProgressMessage

// string taskId = 1;
inline void HostTaskProgressMessage::clear_taskid() {
  taskid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HostTaskProgressMessage::taskid() const {
  // @@protoc_insertion_point(field_get:HostTaskProgressMessage.taskId)
  return _internal_taskid();
}
inline void HostTaskProgressMessage::set_taskid(const std::string& value) {
  _internal_set_taskid(value);
  // @@protoc_insertion_point(field_set:HostTaskProgressMessage.taskId)
}
inline std::string* HostTaskProgressMessage::mutable_taskid() {
  // @@protoc_insertion_point(field_mutable:HostTaskProgressMessage.taskId)
  return _internal_mutable_taskid();
}
inline const std::string& HostTaskProgressMessage::_internal_taskid() const {
  return taskid_.GetNoArena();
}
inline void HostTaskProgressMessage::_internal_set_taskid(const std::string& value) {
  
  taskid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void HostTaskProgressMessage::set_taskid(std::string&& value) {
  
  taskid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HostTaskProgressMessage.taskId)
}
inline void HostTaskProgressMessage::set_taskid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  taskid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HostTaskProgressMessage.taskId)
}
inline void HostTaskProgressMessage::set_taskid(const char* value, size_t size) {
  
  taskid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HostTaskProgressMessage.taskId)
}
inline std::string* HostTaskProgressMessage::_internal_mutable_taskid() {
  
  return taskid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HostTaskProgressMessage::release_taskid() {
  // @@protoc_insertion_point(field_release:HostTaskProgressMessage.taskId)
  
  return taskid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HostTaskProgressMessage::set_allocated_taskid(std::string* taskid) {
  if (taskid != nullptr) {
    
  } else {
    
  }
  taskid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), taskid);
  // @@protoc_insertion_point(field_set_allocated:HostTaskProgressMessage.taskId)
}

// float progress = 2;
inline void HostTaskProgressMessage::clear_progress() {
  progress_ = 0;
}
inline float HostTaskProgressMessage::_internal_progress() const {
  return progress_;
}
inline float HostTaskProgressMessage::progress() const {
  // @@protoc_insertion_point(field_get:HostTaskProgressMessage.progress)
  return _internal_progress();
}
inline void HostTaskProgressMessage::_internal_set_progress(float value) {
  
  progress_ = value;
}
inline void HostTaskProgressMessage::set_progress(float value) {
  _internal_set_progress(value);
  // @@protoc_insertion_point(field_set:HostTaskProgressMessage.progress)
}

// string message = 3;
inline void HostTaskProgressMessage::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HostTaskProgressMessage::message() const {
  // @@protoc_insertion_point(field_get:HostTaskProgressMessage.message)
  return _internal_message();
}
inline void HostTaskProgressMessage::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:HostTaskProgressMessage.message)
}
inline std::string* HostTaskProgressMessage::mutable_message() {
  // @@protoc_insertion_point(field_mutable:HostTaskProgressMessage.message)
  return _internal_mutable_message();
}
inline const std::string& HostTaskProgressMessage::_internal_message() const {
  return message_.GetNoArena();
}
inline void HostTaskProgressMessage::_internal_set_message(const std::string& value) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void HostTaskProgressMessage::set_message(std::string&& value) {
  
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HostTaskProgressMessage.message)
}
inline void HostTaskProgressMessage::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HostTaskProgressMessage.message)
}
inline void HostTaskProgressMessage::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HostTaskProgressMessage.message)
}
inline std::string* HostTaskProgressMessage::_internal_mutable_message() {
  
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HostTaskProgressMessage::release_message() {
  // @@protoc_insertion_point(field_release:HostTaskProgressMessage.message)
  
  return message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HostTaskProgressMessage::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:HostTaskProgressMessage.message)
}

// -------------------------------------------------------------------

// ProcessorTaskMessageType

// .ProcessorTaskMessageType.MessageType type = 1;
inline void ProcessorTaskMessageType::clear_type() {
  type_ = 0;
}
inline ::ProcessorTaskMessageType_MessageType ProcessorTaskMessageType::_internal_type() const {
  return static_cast< ::ProcessorTaskMessageType_MessageType >(type_);
}
inline ::ProcessorTaskMessageType_MessageType ProcessorTaskMessageType::type() const {
  // @@protoc_insertion_point(field_get:ProcessorTaskMessageType.type)
  return _internal_type();
}
inline void ProcessorTaskMessageType::_internal_set_type(::ProcessorTaskMessageType_MessageType value) {
  
  type_ = value;
}
inline void ProcessorTaskMessageType::set_type(::ProcessorTaskMessageType_MessageType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ProcessorTaskMessageType.type)
}

// -------------------------------------------------------------------

// ProcessorTaskRequest

// .ProcessorTaskRequest.TaskType type = 1;
inline void ProcessorTaskRequest::clear_type() {
  type_ = 0;
}
inline ::ProcessorTaskRequest_TaskType ProcessorTaskRequest::_internal_type() const {
  return static_cast< ::ProcessorTaskRequest_TaskType >(type_);
}
inline ::ProcessorTaskRequest_TaskType ProcessorTaskRequest::type() const {
  // @@protoc_insertion_point(field_get:ProcessorTaskRequest.type)
  return _internal_type();
}
inline void ProcessorTaskRequest::_internal_set_type(::ProcessorTaskRequest_TaskType value) {
  
  type_ = value;
}
inline void ProcessorTaskRequest::set_type(::ProcessorTaskRequest_TaskType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ProcessorTaskRequest.type)
}

// -------------------------------------------------------------------

// ProcessorTaskImageRequest

// string taskId = 1;
inline void ProcessorTaskImageRequest::clear_taskid() {
  taskid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProcessorTaskImageRequest::taskid() const {
  // @@protoc_insertion_point(field_get:ProcessorTaskImageRequest.taskId)
  return _internal_taskid();
}
inline void ProcessorTaskImageRequest::set_taskid(const std::string& value) {
  _internal_set_taskid(value);
  // @@protoc_insertion_point(field_set:ProcessorTaskImageRequest.taskId)
}
inline std::string* ProcessorTaskImageRequest::mutable_taskid() {
  // @@protoc_insertion_point(field_mutable:ProcessorTaskImageRequest.taskId)
  return _internal_mutable_taskid();
}
inline const std::string& ProcessorTaskImageRequest::_internal_taskid() const {
  return taskid_.GetNoArena();
}
inline void ProcessorTaskImageRequest::_internal_set_taskid(const std::string& value) {
  
  taskid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProcessorTaskImageRequest::set_taskid(std::string&& value) {
  
  taskid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ProcessorTaskImageRequest.taskId)
}
inline void ProcessorTaskImageRequest::set_taskid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  taskid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProcessorTaskImageRequest.taskId)
}
inline void ProcessorTaskImageRequest::set_taskid(const char* value, size_t size) {
  
  taskid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProcessorTaskImageRequest.taskId)
}
inline std::string* ProcessorTaskImageRequest::_internal_mutable_taskid() {
  
  return taskid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProcessorTaskImageRequest::release_taskid() {
  // @@protoc_insertion_point(field_release:ProcessorTaskImageRequest.taskId)
  
  return taskid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessorTaskImageRequest::set_allocated_taskid(std::string* taskid) {
  if (taskid != nullptr) {
    
  } else {
    
  }
  taskid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), taskid);
  // @@protoc_insertion_point(field_set_allocated:ProcessorTaskImageRequest.taskId)
}

// int32 sourceCMformat = 2;
inline void ProcessorTaskImageRequest::clear_sourcecmformat() {
  sourcecmformat_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessorTaskImageRequest::_internal_sourcecmformat() const {
  return sourcecmformat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessorTaskImageRequest::sourcecmformat() const {
  // @@protoc_insertion_point(field_get:ProcessorTaskImageRequest.sourceCMformat)
  return _internal_sourcecmformat();
}
inline void ProcessorTaskImageRequest::_internal_set_sourcecmformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sourcecmformat_ = value;
}
inline void ProcessorTaskImageRequest::set_sourcecmformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sourcecmformat(value);
  // @@protoc_insertion_point(field_set:ProcessorTaskImageRequest.sourceCMformat)
}

// int32 targetCMBCformat = 3;
inline void ProcessorTaskImageRequest::clear_targetcmbcformat() {
  targetcmbcformat_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessorTaskImageRequest::_internal_targetcmbcformat() const {
  return targetcmbcformat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessorTaskImageRequest::targetcmbcformat() const {
  // @@protoc_insertion_point(field_get:ProcessorTaskImageRequest.targetCMBCformat)
  return _internal_targetcmbcformat();
}
inline void ProcessorTaskImageRequest::_internal_set_targetcmbcformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  targetcmbcformat_ = value;
}
inline void ProcessorTaskImageRequest::set_targetcmbcformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_targetcmbcformat(value);
  // @@protoc_insertion_point(field_set:ProcessorTaskImageRequest.targetCMBCformat)
}

// int32 enginePackedFormat = 4;
inline void ProcessorTaskImageRequest::clear_enginepackedformat() {
  enginepackedformat_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessorTaskImageRequest::_internal_enginepackedformat() const {
  return enginepackedformat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessorTaskImageRequest::enginepackedformat() const {
  // @@protoc_insertion_point(field_get:ProcessorTaskImageRequest.enginePackedFormat)
  return _internal_enginepackedformat();
}
inline void ProcessorTaskImageRequest::_internal_set_enginepackedformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  enginepackedformat_ = value;
}
inline void ProcessorTaskImageRequest::set_enginepackedformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_enginepackedformat(value);
  // @@protoc_insertion_point(field_set:ProcessorTaskImageRequest.enginePackedFormat)
}

// int32 width = 5;
inline void ProcessorTaskImageRequest::clear_width() {
  width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessorTaskImageRequest::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessorTaskImageRequest::width() const {
  // @@protoc_insertion_point(field_get:ProcessorTaskImageRequest.width)
  return _internal_width();
}
inline void ProcessorTaskImageRequest::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  width_ = value;
}
inline void ProcessorTaskImageRequest::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:ProcessorTaskImageRequest.width)
}

// int32 height = 6;
inline void ProcessorTaskImageRequest::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessorTaskImageRequest::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessorTaskImageRequest::height() const {
  // @@protoc_insertion_point(field_get:ProcessorTaskImageRequest.height)
  return _internal_height();
}
inline void ProcessorTaskImageRequest::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
}
inline void ProcessorTaskImageRequest::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:ProcessorTaskImageRequest.height)
}

// int32 stride = 7;
inline void ProcessorTaskImageRequest::clear_stride() {
  stride_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessorTaskImageRequest::_internal_stride() const {
  return stride_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessorTaskImageRequest::stride() const {
  // @@protoc_insertion_point(field_get:ProcessorTaskImageRequest.stride)
  return _internal_stride();
}
inline void ProcessorTaskImageRequest::_internal_set_stride(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  stride_ = value;
}
inline void ProcessorTaskImageRequest::set_stride(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stride(value);
  // @@protoc_insertion_point(field_set:ProcessorTaskImageRequest.stride)
}

// int32 mipCount = 8;
inline void ProcessorTaskImageRequest::clear_mipcount() {
  mipcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessorTaskImageRequest::_internal_mipcount() const {
  return mipcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessorTaskImageRequest::mipcount() const {
  // @@protoc_insertion_point(field_get:ProcessorTaskImageRequest.mipCount)
  return _internal_mipcount();
}
inline void ProcessorTaskImageRequest::_internal_set_mipcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mipcount_ = value;
}
inline void ProcessorTaskImageRequest::set_mipcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mipcount(value);
  // @@protoc_insertion_point(field_set:ProcessorTaskImageRequest.mipCount)
}

// int32 mip = 9;
inline void ProcessorTaskImageRequest::clear_mip() {
  mip_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessorTaskImageRequest::_internal_mip() const {
  return mip_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessorTaskImageRequest::mip() const {
  // @@protoc_insertion_point(field_get:ProcessorTaskImageRequest.mip)
  return _internal_mip();
}
inline void ProcessorTaskImageRequest::_internal_set_mip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mip_ = value;
}
inline void ProcessorTaskImageRequest::set_mip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mip(value);
  // @@protoc_insertion_point(field_set:ProcessorTaskImageRequest.mip)
}

// int32 partId = 10;
inline void ProcessorTaskImageRequest::clear_partid() {
  partid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessorTaskImageRequest::_internal_partid() const {
  return partid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessorTaskImageRequest::partid() const {
  // @@protoc_insertion_point(field_get:ProcessorTaskImageRequest.partId)
  return _internal_partid();
}
inline void ProcessorTaskImageRequest::_internal_set_partid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  partid_ = value;
}
inline void ProcessorTaskImageRequest::set_partid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_partid(value);
  // @@protoc_insertion_point(field_set:ProcessorTaskImageRequest.partId)
}

// int32 partSize = 11;
inline void ProcessorTaskImageRequest::clear_partsize() {
  partsize_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessorTaskImageRequest::_internal_partsize() const {
  return partsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessorTaskImageRequest::partsize() const {
  // @@protoc_insertion_point(field_get:ProcessorTaskImageRequest.partSize)
  return _internal_partsize();
}
inline void ProcessorTaskImageRequest::_internal_set_partsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  partsize_ = value;
}
inline void ProcessorTaskImageRequest::set_partsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_partsize(value);
  // @@protoc_insertion_point(field_set:ProcessorTaskImageRequest.partSize)
}

// bytes data = 12;
inline void ProcessorTaskImageRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProcessorTaskImageRequest::data() const {
  // @@protoc_insertion_point(field_get:ProcessorTaskImageRequest.data)
  return _internal_data();
}
inline void ProcessorTaskImageRequest::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:ProcessorTaskImageRequest.data)
}
inline std::string* ProcessorTaskImageRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable:ProcessorTaskImageRequest.data)
  return _internal_mutable_data();
}
inline const std::string& ProcessorTaskImageRequest::_internal_data() const {
  return data_.GetNoArena();
}
inline void ProcessorTaskImageRequest::_internal_set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProcessorTaskImageRequest::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ProcessorTaskImageRequest.data)
}
inline void ProcessorTaskImageRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProcessorTaskImageRequest.data)
}
inline void ProcessorTaskImageRequest::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProcessorTaskImageRequest.data)
}
inline std::string* ProcessorTaskImageRequest::_internal_mutable_data() {
  
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProcessorTaskImageRequest::release_data() {
  // @@protoc_insertion_point(field_release:ProcessorTaskImageRequest.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessorTaskImageRequest::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:ProcessorTaskImageRequest.data)
}

// -------------------------------------------------------------------

// ProcessorTaskImageResponse

// string taskId = 1;
inline void ProcessorTaskImageResponse::clear_taskid() {
  taskid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProcessorTaskImageResponse::taskid() const {
  // @@protoc_insertion_point(field_get:ProcessorTaskImageResponse.taskId)
  return _internal_taskid();
}
inline void ProcessorTaskImageResponse::set_taskid(const std::string& value) {
  _internal_set_taskid(value);
  // @@protoc_insertion_point(field_set:ProcessorTaskImageResponse.taskId)
}
inline std::string* ProcessorTaskImageResponse::mutable_taskid() {
  // @@protoc_insertion_point(field_mutable:ProcessorTaskImageResponse.taskId)
  return _internal_mutable_taskid();
}
inline const std::string& ProcessorTaskImageResponse::_internal_taskid() const {
  return taskid_.GetNoArena();
}
inline void ProcessorTaskImageResponse::_internal_set_taskid(const std::string& value) {
  
  taskid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProcessorTaskImageResponse::set_taskid(std::string&& value) {
  
  taskid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ProcessorTaskImageResponse.taskId)
}
inline void ProcessorTaskImageResponse::set_taskid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  taskid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProcessorTaskImageResponse.taskId)
}
inline void ProcessorTaskImageResponse::set_taskid(const char* value, size_t size) {
  
  taskid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProcessorTaskImageResponse.taskId)
}
inline std::string* ProcessorTaskImageResponse::_internal_mutable_taskid() {
  
  return taskid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProcessorTaskImageResponse::release_taskid() {
  // @@protoc_insertion_point(field_release:ProcessorTaskImageResponse.taskId)
  
  return taskid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessorTaskImageResponse::set_allocated_taskid(std::string* taskid) {
  if (taskid != nullptr) {
    
  } else {
    
  }
  taskid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), taskid);
  // @@protoc_insertion_point(field_set_allocated:ProcessorTaskImageResponse.taskId)
}

// int32 width = 2;
inline void ProcessorTaskImageResponse::clear_width() {
  width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessorTaskImageResponse::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessorTaskImageResponse::width() const {
  // @@protoc_insertion_point(field_get:ProcessorTaskImageResponse.width)
  return _internal_width();
}
inline void ProcessorTaskImageResponse::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  width_ = value;
}
inline void ProcessorTaskImageResponse::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:ProcessorTaskImageResponse.width)
}

// int32 height = 3;
inline void ProcessorTaskImageResponse::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessorTaskImageResponse::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessorTaskImageResponse::height() const {
  // @@protoc_insertion_point(field_get:ProcessorTaskImageResponse.height)
  return _internal_height();
}
inline void ProcessorTaskImageResponse::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
}
inline void ProcessorTaskImageResponse::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:ProcessorTaskImageResponse.height)
}

// int32 format = 4;
inline void ProcessorTaskImageResponse::clear_format() {
  format_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessorTaskImageResponse::_internal_format() const {
  return format_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessorTaskImageResponse::format() const {
  // @@protoc_insertion_point(field_get:ProcessorTaskImageResponse.format)
  return _internal_format();
}
inline void ProcessorTaskImageResponse::_internal_set_format(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  format_ = value;
}
inline void ProcessorTaskImageResponse::set_format(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:ProcessorTaskImageResponse.format)
}

// int32 mipCount = 5;
inline void ProcessorTaskImageResponse::clear_mipcount() {
  mipcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessorTaskImageResponse::_internal_mipcount() const {
  return mipcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessorTaskImageResponse::mipcount() const {
  // @@protoc_insertion_point(field_get:ProcessorTaskImageResponse.mipCount)
  return _internal_mipcount();
}
inline void ProcessorTaskImageResponse::_internal_set_mipcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mipcount_ = value;
}
inline void ProcessorTaskImageResponse::set_mipcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mipcount(value);
  // @@protoc_insertion_point(field_set:ProcessorTaskImageResponse.mipCount)
}

// int32 mip = 6;
inline void ProcessorTaskImageResponse::clear_mip() {
  mip_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessorTaskImageResponse::_internal_mip() const {
  return mip_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessorTaskImageResponse::mip() const {
  // @@protoc_insertion_point(field_get:ProcessorTaskImageResponse.mip)
  return _internal_mip();
}
inline void ProcessorTaskImageResponse::_internal_set_mip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mip_ = value;
}
inline void ProcessorTaskImageResponse::set_mip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mip(value);
  // @@protoc_insertion_point(field_set:ProcessorTaskImageResponse.mip)
}

// int32 partId = 7;
inline void ProcessorTaskImageResponse::clear_partid() {
  partid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessorTaskImageResponse::_internal_partid() const {
  return partid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessorTaskImageResponse::partid() const {
  // @@protoc_insertion_point(field_get:ProcessorTaskImageResponse.partId)
  return _internal_partid();
}
inline void ProcessorTaskImageResponse::_internal_set_partid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  partid_ = value;
}
inline void ProcessorTaskImageResponse::set_partid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_partid(value);
  // @@protoc_insertion_point(field_set:ProcessorTaskImageResponse.partId)
}

// int32 partSize = 8;
inline void ProcessorTaskImageResponse::clear_partsize() {
  partsize_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessorTaskImageResponse::_internal_partsize() const {
  return partsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessorTaskImageResponse::partsize() const {
  // @@protoc_insertion_point(field_get:ProcessorTaskImageResponse.partSize)
  return _internal_partsize();
}
inline void ProcessorTaskImageResponse::_internal_set_partsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  partsize_ = value;
}
inline void ProcessorTaskImageResponse::set_partsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_partsize(value);
  // @@protoc_insertion_point(field_set:ProcessorTaskImageResponse.partSize)
}

// bytes data = 9;
inline void ProcessorTaskImageResponse::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProcessorTaskImageResponse::data() const {
  // @@protoc_insertion_point(field_get:ProcessorTaskImageResponse.data)
  return _internal_data();
}
inline void ProcessorTaskImageResponse::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:ProcessorTaskImageResponse.data)
}
inline std::string* ProcessorTaskImageResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable:ProcessorTaskImageResponse.data)
  return _internal_mutable_data();
}
inline const std::string& ProcessorTaskImageResponse::_internal_data() const {
  return data_.GetNoArena();
}
inline void ProcessorTaskImageResponse::_internal_set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProcessorTaskImageResponse::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ProcessorTaskImageResponse.data)
}
inline void ProcessorTaskImageResponse::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProcessorTaskImageResponse.data)
}
inline void ProcessorTaskImageResponse::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProcessorTaskImageResponse.data)
}
inline std::string* ProcessorTaskImageResponse::_internal_mutable_data() {
  
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProcessorTaskImageResponse::release_data() {
  // @@protoc_insertion_point(field_release:ProcessorTaskImageResponse.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessorTaskImageResponse::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:ProcessorTaskImageResponse.data)
}

// -------------------------------------------------------------------

// ProcessorTaskProgress

// string taskId = 1;
inline void ProcessorTaskProgress::clear_taskid() {
  taskid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProcessorTaskProgress::taskid() const {
  // @@protoc_insertion_point(field_get:ProcessorTaskProgress.taskId)
  return _internal_taskid();
}
inline void ProcessorTaskProgress::set_taskid(const std::string& value) {
  _internal_set_taskid(value);
  // @@protoc_insertion_point(field_set:ProcessorTaskProgress.taskId)
}
inline std::string* ProcessorTaskProgress::mutable_taskid() {
  // @@protoc_insertion_point(field_mutable:ProcessorTaskProgress.taskId)
  return _internal_mutable_taskid();
}
inline const std::string& ProcessorTaskProgress::_internal_taskid() const {
  return taskid_.GetNoArena();
}
inline void ProcessorTaskProgress::_internal_set_taskid(const std::string& value) {
  
  taskid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProcessorTaskProgress::set_taskid(std::string&& value) {
  
  taskid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ProcessorTaskProgress.taskId)
}
inline void ProcessorTaskProgress::set_taskid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  taskid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProcessorTaskProgress.taskId)
}
inline void ProcessorTaskProgress::set_taskid(const char* value, size_t size) {
  
  taskid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProcessorTaskProgress.taskId)
}
inline std::string* ProcessorTaskProgress::_internal_mutable_taskid() {
  
  return taskid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProcessorTaskProgress::release_taskid() {
  // @@protoc_insertion_point(field_release:ProcessorTaskProgress.taskId)
  
  return taskid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessorTaskProgress::set_allocated_taskid(std::string* taskid) {
  if (taskid != nullptr) {
    
  } else {
    
  }
  taskid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), taskid);
  // @@protoc_insertion_point(field_set_allocated:ProcessorTaskProgress.taskId)
}

// float progress = 2;
inline void ProcessorTaskProgress::clear_progress() {
  progress_ = 0;
}
inline float ProcessorTaskProgress::_internal_progress() const {
  return progress_;
}
inline float ProcessorTaskProgress::progress() const {
  // @@protoc_insertion_point(field_get:ProcessorTaskProgress.progress)
  return _internal_progress();
}
inline void ProcessorTaskProgress::_internal_set_progress(float value) {
  
  progress_ = value;
}
inline void ProcessorTaskProgress::set_progress(float value) {
  _internal_set_progress(value);
  // @@protoc_insertion_point(field_set:ProcessorTaskProgress.progress)
}

// -------------------------------------------------------------------

// ProcessorTaskMessageProgress

// string taskId = 1;
inline void ProcessorTaskMessageProgress::clear_taskid() {
  taskid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProcessorTaskMessageProgress::taskid() const {
  // @@protoc_insertion_point(field_get:ProcessorTaskMessageProgress.taskId)
  return _internal_taskid();
}
inline void ProcessorTaskMessageProgress::set_taskid(const std::string& value) {
  _internal_set_taskid(value);
  // @@protoc_insertion_point(field_set:ProcessorTaskMessageProgress.taskId)
}
inline std::string* ProcessorTaskMessageProgress::mutable_taskid() {
  // @@protoc_insertion_point(field_mutable:ProcessorTaskMessageProgress.taskId)
  return _internal_mutable_taskid();
}
inline const std::string& ProcessorTaskMessageProgress::_internal_taskid() const {
  return taskid_.GetNoArena();
}
inline void ProcessorTaskMessageProgress::_internal_set_taskid(const std::string& value) {
  
  taskid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProcessorTaskMessageProgress::set_taskid(std::string&& value) {
  
  taskid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ProcessorTaskMessageProgress.taskId)
}
inline void ProcessorTaskMessageProgress::set_taskid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  taskid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProcessorTaskMessageProgress.taskId)
}
inline void ProcessorTaskMessageProgress::set_taskid(const char* value, size_t size) {
  
  taskid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProcessorTaskMessageProgress.taskId)
}
inline std::string* ProcessorTaskMessageProgress::_internal_mutable_taskid() {
  
  return taskid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProcessorTaskMessageProgress::release_taskid() {
  // @@protoc_insertion_point(field_release:ProcessorTaskMessageProgress.taskId)
  
  return taskid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessorTaskMessageProgress::set_allocated_taskid(std::string* taskid) {
  if (taskid != nullptr) {
    
  } else {
    
  }
  taskid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), taskid);
  // @@protoc_insertion_point(field_set_allocated:ProcessorTaskMessageProgress.taskId)
}

// float progress = 2;
inline void ProcessorTaskMessageProgress::clear_progress() {
  progress_ = 0;
}
inline float ProcessorTaskMessageProgress::_internal_progress() const {
  return progress_;
}
inline float ProcessorTaskMessageProgress::progress() const {
  // @@protoc_insertion_point(field_get:ProcessorTaskMessageProgress.progress)
  return _internal_progress();
}
inline void ProcessorTaskMessageProgress::_internal_set_progress(float value) {
  
  progress_ = value;
}
inline void ProcessorTaskMessageProgress::set_progress(float value) {
  _internal_set_progress(value);
  // @@protoc_insertion_point(field_set:ProcessorTaskMessageProgress.progress)
}

// string message = 3;
inline void ProcessorTaskMessageProgress::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProcessorTaskMessageProgress::message() const {
  // @@protoc_insertion_point(field_get:ProcessorTaskMessageProgress.message)
  return _internal_message();
}
inline void ProcessorTaskMessageProgress::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:ProcessorTaskMessageProgress.message)
}
inline std::string* ProcessorTaskMessageProgress::mutable_message() {
  // @@protoc_insertion_point(field_mutable:ProcessorTaskMessageProgress.message)
  return _internal_mutable_message();
}
inline const std::string& ProcessorTaskMessageProgress::_internal_message() const {
  return message_.GetNoArena();
}
inline void ProcessorTaskMessageProgress::_internal_set_message(const std::string& value) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProcessorTaskMessageProgress::set_message(std::string&& value) {
  
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ProcessorTaskMessageProgress.message)
}
inline void ProcessorTaskMessageProgress::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProcessorTaskMessageProgress.message)
}
inline void ProcessorTaskMessageProgress::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProcessorTaskMessageProgress.message)
}
inline std::string* ProcessorTaskMessageProgress::_internal_mutable_message() {
  
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProcessorTaskMessageProgress::release_message() {
  // @@protoc_insertion_point(field_release:ProcessorTaskMessageProgress.message)
  
  return message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessorTaskMessageProgress::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:ProcessorTaskMessageProgress.message)
}

// -------------------------------------------------------------------

// ProcessorTaskModelRequest

// string taskId = 1;
inline void ProcessorTaskModelRequest::clear_taskid() {
  taskid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProcessorTaskModelRequest::taskid() const {
  // @@protoc_insertion_point(field_get:ProcessorTaskModelRequest.taskId)
  return _internal_taskid();
}
inline void ProcessorTaskModelRequest::set_taskid(const std::string& value) {
  _internal_set_taskid(value);
  // @@protoc_insertion_point(field_set:ProcessorTaskModelRequest.taskId)
}
inline std::string* ProcessorTaskModelRequest::mutable_taskid() {
  // @@protoc_insertion_point(field_mutable:ProcessorTaskModelRequest.taskId)
  return _internal_mutable_taskid();
}
inline const std::string& ProcessorTaskModelRequest::_internal_taskid() const {
  return taskid_.GetNoArena();
}
inline void ProcessorTaskModelRequest::_internal_set_taskid(const std::string& value) {
  
  taskid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProcessorTaskModelRequest::set_taskid(std::string&& value) {
  
  taskid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ProcessorTaskModelRequest.taskId)
}
inline void ProcessorTaskModelRequest::set_taskid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  taskid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProcessorTaskModelRequest.taskId)
}
inline void ProcessorTaskModelRequest::set_taskid(const char* value, size_t size) {
  
  taskid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProcessorTaskModelRequest.taskId)
}
inline std::string* ProcessorTaskModelRequest::_internal_mutable_taskid() {
  
  return taskid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProcessorTaskModelRequest::release_taskid() {
  // @@protoc_insertion_point(field_release:ProcessorTaskModelRequest.taskId)
  
  return taskid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessorTaskModelRequest::set_allocated_taskid(std::string* taskid) {
  if (taskid != nullptr) {
    
  } else {
    
  }
  taskid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), taskid);
  // @@protoc_insertion_point(field_set_allocated:ProcessorTaskModelRequest.taskId)
}

// string modelTargetPath = 2;
inline void ProcessorTaskModelRequest::clear_modeltargetpath() {
  modeltargetpath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProcessorTaskModelRequest::modeltargetpath() const {
  // @@protoc_insertion_point(field_get:ProcessorTaskModelRequest.modelTargetPath)
  return _internal_modeltargetpath();
}
inline void ProcessorTaskModelRequest::set_modeltargetpath(const std::string& value) {
  _internal_set_modeltargetpath(value);
  // @@protoc_insertion_point(field_set:ProcessorTaskModelRequest.modelTargetPath)
}
inline std::string* ProcessorTaskModelRequest::mutable_modeltargetpath() {
  // @@protoc_insertion_point(field_mutable:ProcessorTaskModelRequest.modelTargetPath)
  return _internal_mutable_modeltargetpath();
}
inline const std::string& ProcessorTaskModelRequest::_internal_modeltargetpath() const {
  return modeltargetpath_.GetNoArena();
}
inline void ProcessorTaskModelRequest::_internal_set_modeltargetpath(const std::string& value) {
  
  modeltargetpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProcessorTaskModelRequest::set_modeltargetpath(std::string&& value) {
  
  modeltargetpath_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ProcessorTaskModelRequest.modelTargetPath)
}
inline void ProcessorTaskModelRequest::set_modeltargetpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  modeltargetpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProcessorTaskModelRequest.modelTargetPath)
}
inline void ProcessorTaskModelRequest::set_modeltargetpath(const char* value, size_t size) {
  
  modeltargetpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProcessorTaskModelRequest.modelTargetPath)
}
inline std::string* ProcessorTaskModelRequest::_internal_mutable_modeltargetpath() {
  
  return modeltargetpath_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProcessorTaskModelRequest::release_modeltargetpath() {
  // @@protoc_insertion_point(field_release:ProcessorTaskModelRequest.modelTargetPath)
  
  return modeltargetpath_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessorTaskModelRequest::set_allocated_modeltargetpath(std::string* modeltargetpath) {
  if (modeltargetpath != nullptr) {
    
  } else {
    
  }
  modeltargetpath_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), modeltargetpath);
  // @@protoc_insertion_point(field_set_allocated:ProcessorTaskModelRequest.modelTargetPath)
}

// string assetName = 3;
inline void ProcessorTaskModelRequest::clear_assetname() {
  assetname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProcessorTaskModelRequest::assetname() const {
  // @@protoc_insertion_point(field_get:ProcessorTaskModelRequest.assetName)
  return _internal_assetname();
}
inline void ProcessorTaskModelRequest::set_assetname(const std::string& value) {
  _internal_set_assetname(value);
  // @@protoc_insertion_point(field_set:ProcessorTaskModelRequest.assetName)
}
inline std::string* ProcessorTaskModelRequest::mutable_assetname() {
  // @@protoc_insertion_point(field_mutable:ProcessorTaskModelRequest.assetName)
  return _internal_mutable_assetname();
}
inline const std::string& ProcessorTaskModelRequest::_internal_assetname() const {
  return assetname_.GetNoArena();
}
inline void ProcessorTaskModelRequest::_internal_set_assetname(const std::string& value) {
  
  assetname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProcessorTaskModelRequest::set_assetname(std::string&& value) {
  
  assetname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ProcessorTaskModelRequest.assetName)
}
inline void ProcessorTaskModelRequest::set_assetname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  assetname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProcessorTaskModelRequest.assetName)
}
inline void ProcessorTaskModelRequest::set_assetname(const char* value, size_t size) {
  
  assetname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProcessorTaskModelRequest.assetName)
}
inline std::string* ProcessorTaskModelRequest::_internal_mutable_assetname() {
  
  return assetname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProcessorTaskModelRequest::release_assetname() {
  // @@protoc_insertion_point(field_release:ProcessorTaskModelRequest.assetName)
  
  return assetname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessorTaskModelRequest::set_allocated_assetname(std::string* assetname) {
  if (assetname != nullptr) {
    
  } else {
    
  }
  assetname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), assetname);
  // @@protoc_insertion_point(field_set_allocated:ProcessorTaskModelRequest.assetName)
}

// float scaleX = 4;
inline void ProcessorTaskModelRequest::clear_scalex() {
  scalex_ = 0;
}
inline float ProcessorTaskModelRequest::_internal_scalex() const {
  return scalex_;
}
inline float ProcessorTaskModelRequest::scalex() const {
  // @@protoc_insertion_point(field_get:ProcessorTaskModelRequest.scaleX)
  return _internal_scalex();
}
inline void ProcessorTaskModelRequest::_internal_set_scalex(float value) {
  
  scalex_ = value;
}
inline void ProcessorTaskModelRequest::set_scalex(float value) {
  _internal_set_scalex(value);
  // @@protoc_insertion_point(field_set:ProcessorTaskModelRequest.scaleX)
}

// float scaleY = 5;
inline void ProcessorTaskModelRequest::clear_scaley() {
  scaley_ = 0;
}
inline float ProcessorTaskModelRequest::_internal_scaley() const {
  return scaley_;
}
inline float ProcessorTaskModelRequest::scaley() const {
  // @@protoc_insertion_point(field_get:ProcessorTaskModelRequest.scaleY)
  return _internal_scaley();
}
inline void ProcessorTaskModelRequest::_internal_set_scaley(float value) {
  
  scaley_ = value;
}
inline void ProcessorTaskModelRequest::set_scaley(float value) {
  _internal_set_scaley(value);
  // @@protoc_insertion_point(field_set:ProcessorTaskModelRequest.scaleY)
}

// float scaleZ = 6;
inline void ProcessorTaskModelRequest::clear_scalez() {
  scalez_ = 0;
}
inline float ProcessorTaskModelRequest::_internal_scalez() const {
  return scalez_;
}
inline float ProcessorTaskModelRequest::scalez() const {
  // @@protoc_insertion_point(field_get:ProcessorTaskModelRequest.scaleZ)
  return _internal_scalez();
}
inline void ProcessorTaskModelRequest::_internal_set_scalez(float value) {
  
  scalez_ = value;
}
inline void ProcessorTaskModelRequest::set_scalez(float value) {
  _internal_set_scalez(value);
  // @@protoc_insertion_point(field_set:ProcessorTaskModelRequest.scaleZ)
}

// float rotationX = 7;
inline void ProcessorTaskModelRequest::clear_rotationx() {
  rotationx_ = 0;
}
inline float ProcessorTaskModelRequest::_internal_rotationx() const {
  return rotationx_;
}
inline float ProcessorTaskModelRequest::rotationx() const {
  // @@protoc_insertion_point(field_get:ProcessorTaskModelRequest.rotationX)
  return _internal_rotationx();
}
inline void ProcessorTaskModelRequest::_internal_set_rotationx(float value) {
  
  rotationx_ = value;
}
inline void ProcessorTaskModelRequest::set_rotationx(float value) {
  _internal_set_rotationx(value);
  // @@protoc_insertion_point(field_set:ProcessorTaskModelRequest.rotationX)
}

// float rotationY = 8;
inline void ProcessorTaskModelRequest::clear_rotationy() {
  rotationy_ = 0;
}
inline float ProcessorTaskModelRequest::_internal_rotationy() const {
  return rotationy_;
}
inline float ProcessorTaskModelRequest::rotationy() const {
  // @@protoc_insertion_point(field_get:ProcessorTaskModelRequest.rotationY)
  return _internal_rotationy();
}
inline void ProcessorTaskModelRequest::_internal_set_rotationy(float value) {
  
  rotationy_ = value;
}
inline void ProcessorTaskModelRequest::set_rotationy(float value) {
  _internal_set_rotationy(value);
  // @@protoc_insertion_point(field_set:ProcessorTaskModelRequest.rotationY)
}

// float rotationZ = 9;
inline void ProcessorTaskModelRequest::clear_rotationz() {
  rotationz_ = 0;
}
inline float ProcessorTaskModelRequest::_internal_rotationz() const {
  return rotationz_;
}
inline float ProcessorTaskModelRequest::rotationz() const {
  // @@protoc_insertion_point(field_get:ProcessorTaskModelRequest.rotationZ)
  return _internal_rotationz();
}
inline void ProcessorTaskModelRequest::_internal_set_rotationz(float value) {
  
  rotationz_ = value;
}
inline void ProcessorTaskModelRequest::set_rotationz(float value) {
  _internal_set_rotationz(value);
  // @@protoc_insertion_point(field_set:ProcessorTaskModelRequest.rotationZ)
}

// float rotationW = 10;
inline void ProcessorTaskModelRequest::clear_rotationw() {
  rotationw_ = 0;
}
inline float ProcessorTaskModelRequest::_internal_rotationw() const {
  return rotationw_;
}
inline float ProcessorTaskModelRequest::rotationw() const {
  // @@protoc_insertion_point(field_get:ProcessorTaskModelRequest.rotationW)
  return _internal_rotationw();
}
inline void ProcessorTaskModelRequest::_internal_set_rotationw(float value) {
  
  rotationw_ = value;
}
inline void ProcessorTaskModelRequest::set_rotationw(float value) {
  _internal_set_rotationw(value);
  // @@protoc_insertion_point(field_set:ProcessorTaskModelRequest.rotationW)
}

// bytes modelData = 11;
inline void ProcessorTaskModelRequest::clear_modeldata() {
  modeldata_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProcessorTaskModelRequest::modeldata() const {
  // @@protoc_insertion_point(field_get:ProcessorTaskModelRequest.modelData)
  return _internal_modeldata();
}
inline void ProcessorTaskModelRequest::set_modeldata(const std::string& value) {
  _internal_set_modeldata(value);
  // @@protoc_insertion_point(field_set:ProcessorTaskModelRequest.modelData)
}
inline std::string* ProcessorTaskModelRequest::mutable_modeldata() {
  // @@protoc_insertion_point(field_mutable:ProcessorTaskModelRequest.modelData)
  return _internal_mutable_modeldata();
}
inline const std::string& ProcessorTaskModelRequest::_internal_modeldata() const {
  return modeldata_.GetNoArena();
}
inline void ProcessorTaskModelRequest::_internal_set_modeldata(const std::string& value) {
  
  modeldata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProcessorTaskModelRequest::set_modeldata(std::string&& value) {
  
  modeldata_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ProcessorTaskModelRequest.modelData)
}
inline void ProcessorTaskModelRequest::set_modeldata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  modeldata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProcessorTaskModelRequest.modelData)
}
inline void ProcessorTaskModelRequest::set_modeldata(const void* value, size_t size) {
  
  modeldata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProcessorTaskModelRequest.modelData)
}
inline std::string* ProcessorTaskModelRequest::_internal_mutable_modeldata() {
  
  return modeldata_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProcessorTaskModelRequest::release_modeldata() {
  // @@protoc_insertion_point(field_release:ProcessorTaskModelRequest.modelData)
  
  return modeldata_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessorTaskModelRequest::set_allocated_modeldata(std::string* modeldata) {
  if (modeldata != nullptr) {
    
  } else {
    
  }
  modeldata_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), modeldata);
  // @@protoc_insertion_point(field_set_allocated:ProcessorTaskModelRequest.modelData)
}

// -------------------------------------------------------------------

// ProcessorTaskModelResponse

// string taskId = 1;
inline void ProcessorTaskModelResponse::clear_taskid() {
  taskid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProcessorTaskModelResponse::taskid() const {
  // @@protoc_insertion_point(field_get:ProcessorTaskModelResponse.taskId)
  return _internal_taskid();
}
inline void ProcessorTaskModelResponse::set_taskid(const std::string& value) {
  _internal_set_taskid(value);
  // @@protoc_insertion_point(field_set:ProcessorTaskModelResponse.taskId)
}
inline std::string* ProcessorTaskModelResponse::mutable_taskid() {
  // @@protoc_insertion_point(field_mutable:ProcessorTaskModelResponse.taskId)
  return _internal_mutable_taskid();
}
inline const std::string& ProcessorTaskModelResponse::_internal_taskid() const {
  return taskid_.GetNoArena();
}
inline void ProcessorTaskModelResponse::_internal_set_taskid(const std::string& value) {
  
  taskid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProcessorTaskModelResponse::set_taskid(std::string&& value) {
  
  taskid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ProcessorTaskModelResponse.taskId)
}
inline void ProcessorTaskModelResponse::set_taskid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  taskid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProcessorTaskModelResponse.taskId)
}
inline void ProcessorTaskModelResponse::set_taskid(const char* value, size_t size) {
  
  taskid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProcessorTaskModelResponse.taskId)
}
inline std::string* ProcessorTaskModelResponse::_internal_mutable_taskid() {
  
  return taskid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProcessorTaskModelResponse::release_taskid() {
  // @@protoc_insertion_point(field_release:ProcessorTaskModelResponse.taskId)
  
  return taskid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessorTaskModelResponse::set_allocated_taskid(std::string* taskid) {
  if (taskid != nullptr) {
    
  } else {
    
  }
  taskid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), taskid);
  // @@protoc_insertion_point(field_set_allocated:ProcessorTaskModelResponse.taskId)
}

// bytes modelData = 2;
inline void ProcessorTaskModelResponse::clear_modeldata() {
  modeldata_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProcessorTaskModelResponse::modeldata() const {
  // @@protoc_insertion_point(field_get:ProcessorTaskModelResponse.modelData)
  return _internal_modeldata();
}
inline void ProcessorTaskModelResponse::set_modeldata(const std::string& value) {
  _internal_set_modeldata(value);
  // @@protoc_insertion_point(field_set:ProcessorTaskModelResponse.modelData)
}
inline std::string* ProcessorTaskModelResponse::mutable_modeldata() {
  // @@protoc_insertion_point(field_mutable:ProcessorTaskModelResponse.modelData)
  return _internal_mutable_modeldata();
}
inline const std::string& ProcessorTaskModelResponse::_internal_modeldata() const {
  return modeldata_.GetNoArena();
}
inline void ProcessorTaskModelResponse::_internal_set_modeldata(const std::string& value) {
  
  modeldata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProcessorTaskModelResponse::set_modeldata(std::string&& value) {
  
  modeldata_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ProcessorTaskModelResponse.modelData)
}
inline void ProcessorTaskModelResponse::set_modeldata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  modeldata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProcessorTaskModelResponse.modelData)
}
inline void ProcessorTaskModelResponse::set_modeldata(const void* value, size_t size) {
  
  modeldata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProcessorTaskModelResponse.modelData)
}
inline std::string* ProcessorTaskModelResponse::_internal_mutable_modeldata() {
  
  return modeldata_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProcessorTaskModelResponse::release_modeldata() {
  // @@protoc_insertion_point(field_release:ProcessorTaskModelResponse.modelData)
  
  return modeldata_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessorTaskModelResponse::set_allocated_modeldata(std::string* modeldata) {
  if (modeldata != nullptr) {
    
  } else {
    
  }
  modeldata_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), modeldata);
  // @@protoc_insertion_point(field_set_allocated:ProcessorTaskModelResponse.modelData)
}

// bytes prefabData = 3;
inline void ProcessorTaskModelResponse::clear_prefabdata() {
  prefabdata_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProcessorTaskModelResponse::prefabdata() const {
  // @@protoc_insertion_point(field_get:ProcessorTaskModelResponse.prefabData)
  return _internal_prefabdata();
}
inline void ProcessorTaskModelResponse::set_prefabdata(const std::string& value) {
  _internal_set_prefabdata(value);
  // @@protoc_insertion_point(field_set:ProcessorTaskModelResponse.prefabData)
}
inline std::string* ProcessorTaskModelResponse::mutable_prefabdata() {
  // @@protoc_insertion_point(field_mutable:ProcessorTaskModelResponse.prefabData)
  return _internal_mutable_prefabdata();
}
inline const std::string& ProcessorTaskModelResponse::_internal_prefabdata() const {
  return prefabdata_.GetNoArena();
}
inline void ProcessorTaskModelResponse::_internal_set_prefabdata(const std::string& value) {
  
  prefabdata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProcessorTaskModelResponse::set_prefabdata(std::string&& value) {
  
  prefabdata_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ProcessorTaskModelResponse.prefabData)
}
inline void ProcessorTaskModelResponse::set_prefabdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prefabdata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProcessorTaskModelResponse.prefabData)
}
inline void ProcessorTaskModelResponse::set_prefabdata(const void* value, size_t size) {
  
  prefabdata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProcessorTaskModelResponse.prefabData)
}
inline std::string* ProcessorTaskModelResponse::_internal_mutable_prefabdata() {
  
  return prefabdata_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProcessorTaskModelResponse::release_prefabdata() {
  // @@protoc_insertion_point(field_release:ProcessorTaskModelResponse.prefabData)
  
  return prefabdata_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessorTaskModelResponse::set_allocated_prefabdata(std::string* prefabdata) {
  if (prefabdata != nullptr) {
    
  } else {
    
  }
  prefabdata_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prefabdata);
  // @@protoc_insertion_point(field_set_allocated:ProcessorTaskModelResponse.prefabData)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::HostProcessorMessageType_MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HostProcessorMessageType_MessageType>() {
  return ::HostProcessorMessageType_MessageType_descriptor();
}
template <> struct is_proto_enum< ::ProcessorTaskMessageType_MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProcessorTaskMessageType_MessageType>() {
  return ::ProcessorTaskMessageType_MessageType_descriptor();
}
template <> struct is_proto_enum< ::ProcessorTaskRequest_TaskType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProcessorTaskRequest_TaskType>() {
  return ::ProcessorTaskRequest_TaskType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_resourceprotocols_2eproto
