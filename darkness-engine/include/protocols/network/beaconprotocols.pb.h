// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: beaconprotocols.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_beaconprotocols_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_beaconprotocols_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_beaconprotocols_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_beaconprotocols_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_beaconprotocols_2eproto;
class BeaconHello;
class BeaconHelloDefaultTypeInternal;
extern BeaconHelloDefaultTypeInternal _BeaconHello_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::BeaconHello* Arena::CreateMaybeMessage<::BeaconHello>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum BeaconHello_BeaconType : int {
  BeaconHello_BeaconType_Server = 0,
  BeaconHello_BeaconType_Client = 1,
  BeaconHello_BeaconType_BeaconHello_BeaconType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BeaconHello_BeaconType_BeaconHello_BeaconType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BeaconHello_BeaconType_IsValid(int value);
constexpr BeaconHello_BeaconType BeaconHello_BeaconType_BeaconType_MIN = BeaconHello_BeaconType_Server;
constexpr BeaconHello_BeaconType BeaconHello_BeaconType_BeaconType_MAX = BeaconHello_BeaconType_Client;
constexpr int BeaconHello_BeaconType_BeaconType_ARRAYSIZE = BeaconHello_BeaconType_BeaconType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BeaconHello_BeaconType_descriptor();
template<typename T>
inline const std::string& BeaconHello_BeaconType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BeaconHello_BeaconType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BeaconHello_BeaconType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BeaconHello_BeaconType_descriptor(), enum_t_value);
}
inline bool BeaconHello_BeaconType_Parse(
    const std::string& name, BeaconHello_BeaconType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BeaconHello_BeaconType>(
    BeaconHello_BeaconType_descriptor(), name, value);
}
enum BeaconHello_BeaconAction : int {
  BeaconHello_BeaconAction_Entering = 0,
  BeaconHello_BeaconAction_Leaving = 1,
  BeaconHello_BeaconAction_Alive = 2,
  BeaconHello_BeaconAction_BeaconHello_BeaconAction_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BeaconHello_BeaconAction_BeaconHello_BeaconAction_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BeaconHello_BeaconAction_IsValid(int value);
constexpr BeaconHello_BeaconAction BeaconHello_BeaconAction_BeaconAction_MIN = BeaconHello_BeaconAction_Entering;
constexpr BeaconHello_BeaconAction BeaconHello_BeaconAction_BeaconAction_MAX = BeaconHello_BeaconAction_Alive;
constexpr int BeaconHello_BeaconAction_BeaconAction_ARRAYSIZE = BeaconHello_BeaconAction_BeaconAction_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BeaconHello_BeaconAction_descriptor();
template<typename T>
inline const std::string& BeaconHello_BeaconAction_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BeaconHello_BeaconAction>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BeaconHello_BeaconAction_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BeaconHello_BeaconAction_descriptor(), enum_t_value);
}
inline bool BeaconHello_BeaconAction_Parse(
    const std::string& name, BeaconHello_BeaconAction* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BeaconHello_BeaconAction>(
    BeaconHello_BeaconAction_descriptor(), name, value);
}
// ===================================================================

class BeaconHello :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BeaconHello) */ {
 public:
  BeaconHello();
  virtual ~BeaconHello();

  BeaconHello(const BeaconHello& from);
  BeaconHello(BeaconHello&& from) noexcept
    : BeaconHello() {
    *this = ::std::move(from);
  }

  inline BeaconHello& operator=(const BeaconHello& from) {
    CopyFrom(from);
    return *this;
  }
  inline BeaconHello& operator=(BeaconHello&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BeaconHello& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BeaconHello* internal_default_instance() {
    return reinterpret_cast<const BeaconHello*>(
               &_BeaconHello_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BeaconHello& a, BeaconHello& b) {
    a.Swap(&b);
  }
  inline void Swap(BeaconHello* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BeaconHello* New() const final {
    return CreateMaybeMessage<BeaconHello>(nullptr);
  }

  BeaconHello* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BeaconHello>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BeaconHello& from);
  void MergeFrom(const BeaconHello& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BeaconHello* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BeaconHello";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_beaconprotocols_2eproto);
    return ::descriptor_table_beaconprotocols_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef BeaconHello_BeaconType BeaconType;
  static constexpr BeaconType Server =
    BeaconHello_BeaconType_Server;
  static constexpr BeaconType Client =
    BeaconHello_BeaconType_Client;
  static inline bool BeaconType_IsValid(int value) {
    return BeaconHello_BeaconType_IsValid(value);
  }
  static constexpr BeaconType BeaconType_MIN =
    BeaconHello_BeaconType_BeaconType_MIN;
  static constexpr BeaconType BeaconType_MAX =
    BeaconHello_BeaconType_BeaconType_MAX;
  static constexpr int BeaconType_ARRAYSIZE =
    BeaconHello_BeaconType_BeaconType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  BeaconType_descriptor() {
    return BeaconHello_BeaconType_descriptor();
  }
  template<typename T>
  static inline const std::string& BeaconType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, BeaconType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function BeaconType_Name.");
    return BeaconHello_BeaconType_Name(enum_t_value);
  }
  static inline bool BeaconType_Parse(const std::string& name,
      BeaconType* value) {
    return BeaconHello_BeaconType_Parse(name, value);
  }

  typedef BeaconHello_BeaconAction BeaconAction;
  static constexpr BeaconAction Entering =
    BeaconHello_BeaconAction_Entering;
  static constexpr BeaconAction Leaving =
    BeaconHello_BeaconAction_Leaving;
  static constexpr BeaconAction Alive =
    BeaconHello_BeaconAction_Alive;
  static inline bool BeaconAction_IsValid(int value) {
    return BeaconHello_BeaconAction_IsValid(value);
  }
  static constexpr BeaconAction BeaconAction_MIN =
    BeaconHello_BeaconAction_BeaconAction_MIN;
  static constexpr BeaconAction BeaconAction_MAX =
    BeaconHello_BeaconAction_BeaconAction_MAX;
  static constexpr int BeaconAction_ARRAYSIZE =
    BeaconHello_BeaconAction_BeaconAction_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  BeaconAction_descriptor() {
    return BeaconHello_BeaconAction_descriptor();
  }
  template<typename T>
  static inline const std::string& BeaconAction_Name(T enum_t_value) {
    static_assert(::std::is_same<T, BeaconAction>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function BeaconAction_Name.");
    return BeaconHello_BeaconAction_Name(enum_t_value);
  }
  static inline bool BeaconAction_Parse(const std::string& name,
      BeaconAction* value) {
    return BeaconHello_BeaconAction_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kIdFieldNumber = 2,
    kTypeFieldNumber = 3,
    kActionFieldNumber = 4,
  };
  // string ip = 1;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // string id = 2;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .BeaconHello.BeaconType type = 3;
  void clear_type();
  ::BeaconHello_BeaconType type() const;
  void set_type(::BeaconHello_BeaconType value);
  private:
  ::BeaconHello_BeaconType _internal_type() const;
  void _internal_set_type(::BeaconHello_BeaconType value);
  public:

  // .BeaconHello.BeaconAction action = 4;
  void clear_action();
  ::BeaconHello_BeaconAction action() const;
  void set_action(::BeaconHello_BeaconAction value);
  private:
  ::BeaconHello_BeaconAction _internal_action() const;
  void _internal_set_action(::BeaconHello_BeaconAction value);
  public:

  // @@protoc_insertion_point(class_scope:BeaconHello)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  int type_;
  int action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_beaconprotocols_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BeaconHello

// string ip = 1;
inline void BeaconHello::clear_ip() {
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BeaconHello::ip() const {
  // @@protoc_insertion_point(field_get:BeaconHello.ip)
  return _internal_ip();
}
inline void BeaconHello::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:BeaconHello.ip)
}
inline std::string* BeaconHello::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:BeaconHello.ip)
  return _internal_mutable_ip();
}
inline const std::string& BeaconHello::_internal_ip() const {
  return ip_.GetNoArena();
}
inline void BeaconHello::_internal_set_ip(const std::string& value) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BeaconHello::set_ip(std::string&& value) {
  
  ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BeaconHello.ip)
}
inline void BeaconHello::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BeaconHello.ip)
}
inline void BeaconHello::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BeaconHello.ip)
}
inline std::string* BeaconHello::_internal_mutable_ip() {
  
  return ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BeaconHello::release_ip() {
  // @@protoc_insertion_point(field_release:BeaconHello.ip)
  
  return ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BeaconHello::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:BeaconHello.ip)
}

// string id = 2;
inline void BeaconHello::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BeaconHello::id() const {
  // @@protoc_insertion_point(field_get:BeaconHello.id)
  return _internal_id();
}
inline void BeaconHello::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:BeaconHello.id)
}
inline std::string* BeaconHello::mutable_id() {
  // @@protoc_insertion_point(field_mutable:BeaconHello.id)
  return _internal_mutable_id();
}
inline const std::string& BeaconHello::_internal_id() const {
  return id_.GetNoArena();
}
inline void BeaconHello::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BeaconHello::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BeaconHello.id)
}
inline void BeaconHello::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BeaconHello.id)
}
inline void BeaconHello::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BeaconHello.id)
}
inline std::string* BeaconHello::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BeaconHello::release_id() {
  // @@protoc_insertion_point(field_release:BeaconHello.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BeaconHello::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:BeaconHello.id)
}

// .BeaconHello.BeaconType type = 3;
inline void BeaconHello::clear_type() {
  type_ = 0;
}
inline ::BeaconHello_BeaconType BeaconHello::_internal_type() const {
  return static_cast< ::BeaconHello_BeaconType >(type_);
}
inline ::BeaconHello_BeaconType BeaconHello::type() const {
  // @@protoc_insertion_point(field_get:BeaconHello.type)
  return _internal_type();
}
inline void BeaconHello::_internal_set_type(::BeaconHello_BeaconType value) {
  
  type_ = value;
}
inline void BeaconHello::set_type(::BeaconHello_BeaconType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:BeaconHello.type)
}

// .BeaconHello.BeaconAction action = 4;
inline void BeaconHello::clear_action() {
  action_ = 0;
}
inline ::BeaconHello_BeaconAction BeaconHello::_internal_action() const {
  return static_cast< ::BeaconHello_BeaconAction >(action_);
}
inline ::BeaconHello_BeaconAction BeaconHello::action() const {
  // @@protoc_insertion_point(field_get:BeaconHello.action)
  return _internal_action();
}
inline void BeaconHello::_internal_set_action(::BeaconHello_BeaconAction value) {
  
  action_ = value;
}
inline void BeaconHello::set_action(::BeaconHello_BeaconAction value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:BeaconHello.action)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::BeaconHello_BeaconType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BeaconHello_BeaconType>() {
  return ::BeaconHello_BeaconType_descriptor();
}
template <> struct is_proto_enum< ::BeaconHello_BeaconAction> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BeaconHello_BeaconAction>() {
  return ::BeaconHello_BeaconAction_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_beaconprotocols_2eproto
