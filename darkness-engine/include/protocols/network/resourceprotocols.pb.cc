// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: resourceprotocols.proto

#include "resourceprotocols.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
class HostProcessorMessageTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HostProcessorMessageType> _instance;
} _HostProcessorMessageType_default_instance_;
class HostCoreResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HostCoreResponse> _instance;
} _HostCoreResponse_default_instance_;
class HostTaskImageRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HostTaskImageRequest> _instance;
} _HostTaskImageRequest_default_instance_;
class HostTaskImageResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HostTaskImageResponse> _instance;
} _HostTaskImageResponse_default_instance_;
class HostTaskModelRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HostTaskModelRequest> _instance;
} _HostTaskModelRequest_default_instance_;
class HostTaskModelResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HostTaskModelResponse> _instance;
} _HostTaskModelResponse_default_instance_;
class HostTaskStartedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HostTaskStarted> _instance;
} _HostTaskStarted_default_instance_;
class HostTaskFinishedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HostTaskFinished> _instance;
} _HostTaskFinished_default_instance_;
class HostTaskProgressDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HostTaskProgress> _instance;
} _HostTaskProgress_default_instance_;
class HostTaskProgressMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HostTaskProgressMessage> _instance;
} _HostTaskProgressMessage_default_instance_;
class ProcessorTaskMessageTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcessorTaskMessageType> _instance;
} _ProcessorTaskMessageType_default_instance_;
class ProcessorTaskRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcessorTaskRequest> _instance;
} _ProcessorTaskRequest_default_instance_;
class ProcessorTaskImageRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcessorTaskImageRequest> _instance;
} _ProcessorTaskImageRequest_default_instance_;
class ProcessorTaskImageResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcessorTaskImageResponse> _instance;
} _ProcessorTaskImageResponse_default_instance_;
class ProcessorTaskProgressDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcessorTaskProgress> _instance;
} _ProcessorTaskProgress_default_instance_;
class ProcessorTaskMessageProgressDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcessorTaskMessageProgress> _instance;
} _ProcessorTaskMessageProgress_default_instance_;
class ProcessorTaskModelRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcessorTaskModelRequest> _instance;
} _ProcessorTaskModelRequest_default_instance_;
class ProcessorTaskModelResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcessorTaskModelResponse> _instance;
} _ProcessorTaskModelResponse_default_instance_;
static void InitDefaultsscc_info_HostCoreResponse_resourceprotocols_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_HostCoreResponse_default_instance_;
    new (ptr) ::HostCoreResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HostCoreResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HostCoreResponse_resourceprotocols_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HostCoreResponse_resourceprotocols_2eproto}, {}};

static void InitDefaultsscc_info_HostProcessorMessageType_resourceprotocols_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_HostProcessorMessageType_default_instance_;
    new (ptr) ::HostProcessorMessageType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HostProcessorMessageType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HostProcessorMessageType_resourceprotocols_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HostProcessorMessageType_resourceprotocols_2eproto}, {}};

static void InitDefaultsscc_info_HostTaskFinished_resourceprotocols_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_HostTaskFinished_default_instance_;
    new (ptr) ::HostTaskFinished();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HostTaskFinished::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HostTaskFinished_resourceprotocols_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HostTaskFinished_resourceprotocols_2eproto}, {}};

static void InitDefaultsscc_info_HostTaskImageRequest_resourceprotocols_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_HostTaskImageRequest_default_instance_;
    new (ptr) ::HostTaskImageRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HostTaskImageRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HostTaskImageRequest_resourceprotocols_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HostTaskImageRequest_resourceprotocols_2eproto}, {}};

static void InitDefaultsscc_info_HostTaskImageResponse_resourceprotocols_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_HostTaskImageResponse_default_instance_;
    new (ptr) ::HostTaskImageResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HostTaskImageResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HostTaskImageResponse_resourceprotocols_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HostTaskImageResponse_resourceprotocols_2eproto}, {}};

static void InitDefaultsscc_info_HostTaskModelRequest_resourceprotocols_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_HostTaskModelRequest_default_instance_;
    new (ptr) ::HostTaskModelRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HostTaskModelRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HostTaskModelRequest_resourceprotocols_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HostTaskModelRequest_resourceprotocols_2eproto}, {}};

static void InitDefaultsscc_info_HostTaskModelResponse_resourceprotocols_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_HostTaskModelResponse_default_instance_;
    new (ptr) ::HostTaskModelResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HostTaskModelResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HostTaskModelResponse_resourceprotocols_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HostTaskModelResponse_resourceprotocols_2eproto}, {}};

static void InitDefaultsscc_info_HostTaskProgress_resourceprotocols_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_HostTaskProgress_default_instance_;
    new (ptr) ::HostTaskProgress();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HostTaskProgress::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HostTaskProgress_resourceprotocols_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HostTaskProgress_resourceprotocols_2eproto}, {}};

static void InitDefaultsscc_info_HostTaskProgressMessage_resourceprotocols_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_HostTaskProgressMessage_default_instance_;
    new (ptr) ::HostTaskProgressMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HostTaskProgressMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HostTaskProgressMessage_resourceprotocols_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HostTaskProgressMessage_resourceprotocols_2eproto}, {}};

static void InitDefaultsscc_info_HostTaskStarted_resourceprotocols_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_HostTaskStarted_default_instance_;
    new (ptr) ::HostTaskStarted();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HostTaskStarted::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HostTaskStarted_resourceprotocols_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HostTaskStarted_resourceprotocols_2eproto}, {}};

static void InitDefaultsscc_info_ProcessorTaskImageRequest_resourceprotocols_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProcessorTaskImageRequest_default_instance_;
    new (ptr) ::ProcessorTaskImageRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProcessorTaskImageRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProcessorTaskImageRequest_resourceprotocols_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProcessorTaskImageRequest_resourceprotocols_2eproto}, {}};

static void InitDefaultsscc_info_ProcessorTaskImageResponse_resourceprotocols_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProcessorTaskImageResponse_default_instance_;
    new (ptr) ::ProcessorTaskImageResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProcessorTaskImageResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProcessorTaskImageResponse_resourceprotocols_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProcessorTaskImageResponse_resourceprotocols_2eproto}, {}};

static void InitDefaultsscc_info_ProcessorTaskMessageProgress_resourceprotocols_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProcessorTaskMessageProgress_default_instance_;
    new (ptr) ::ProcessorTaskMessageProgress();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProcessorTaskMessageProgress::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProcessorTaskMessageProgress_resourceprotocols_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProcessorTaskMessageProgress_resourceprotocols_2eproto}, {}};

static void InitDefaultsscc_info_ProcessorTaskMessageType_resourceprotocols_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProcessorTaskMessageType_default_instance_;
    new (ptr) ::ProcessorTaskMessageType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProcessorTaskMessageType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProcessorTaskMessageType_resourceprotocols_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProcessorTaskMessageType_resourceprotocols_2eproto}, {}};

static void InitDefaultsscc_info_ProcessorTaskModelRequest_resourceprotocols_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProcessorTaskModelRequest_default_instance_;
    new (ptr) ::ProcessorTaskModelRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProcessorTaskModelRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProcessorTaskModelRequest_resourceprotocols_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProcessorTaskModelRequest_resourceprotocols_2eproto}, {}};

static void InitDefaultsscc_info_ProcessorTaskModelResponse_resourceprotocols_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProcessorTaskModelResponse_default_instance_;
    new (ptr) ::ProcessorTaskModelResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProcessorTaskModelResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProcessorTaskModelResponse_resourceprotocols_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProcessorTaskModelResponse_resourceprotocols_2eproto}, {}};

static void InitDefaultsscc_info_ProcessorTaskProgress_resourceprotocols_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProcessorTaskProgress_default_instance_;
    new (ptr) ::ProcessorTaskProgress();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProcessorTaskProgress::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProcessorTaskProgress_resourceprotocols_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProcessorTaskProgress_resourceprotocols_2eproto}, {}};

static void InitDefaultsscc_info_ProcessorTaskRequest_resourceprotocols_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProcessorTaskRequest_default_instance_;
    new (ptr) ::ProcessorTaskRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProcessorTaskRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProcessorTaskRequest_resourceprotocols_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProcessorTaskRequest_resourceprotocols_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_resourceprotocols_2eproto[18];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_resourceprotocols_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_resourceprotocols_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_resourceprotocols_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HostProcessorMessageType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HostProcessorMessageType, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HostCoreResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HostCoreResponse, cores_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HostTaskImageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HostTaskImageRequest, taskid_),
  PROTOBUF_FIELD_OFFSET(::HostTaskImageRequest, extension_),
  PROTOBUF_FIELD_OFFSET(::HostTaskImageRequest, format_),
  PROTOBUF_FIELD_OFFSET(::HostTaskImageRequest, generatemips_),
  PROTOBUF_FIELD_OFFSET(::HostTaskImageRequest, flipnormal_),
  PROTOBUF_FIELD_OFFSET(::HostTaskImageRequest, alphaclipped_),
  PROTOBUF_FIELD_OFFSET(::HostTaskImageRequest, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HostTaskImageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HostTaskImageResponse, taskid_),
  PROTOBUF_FIELD_OFFSET(::HostTaskImageResponse, width_),
  PROTOBUF_FIELD_OFFSET(::HostTaskImageResponse, height_),
  PROTOBUF_FIELD_OFFSET(::HostTaskImageResponse, mips_),
  PROTOBUF_FIELD_OFFSET(::HostTaskImageResponse, format_),
  PROTOBUF_FIELD_OFFSET(::HostTaskImageResponse, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HostTaskModelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HostTaskModelRequest, taskid_),
  PROTOBUF_FIELD_OFFSET(::HostTaskModelRequest, modeltargetpath_),
  PROTOBUF_FIELD_OFFSET(::HostTaskModelRequest, assetname_),
  PROTOBUF_FIELD_OFFSET(::HostTaskModelRequest, scalex_),
  PROTOBUF_FIELD_OFFSET(::HostTaskModelRequest, scaley_),
  PROTOBUF_FIELD_OFFSET(::HostTaskModelRequest, scalez_),
  PROTOBUF_FIELD_OFFSET(::HostTaskModelRequest, rotationx_),
  PROTOBUF_FIELD_OFFSET(::HostTaskModelRequest, rotationy_),
  PROTOBUF_FIELD_OFFSET(::HostTaskModelRequest, rotationz_),
  PROTOBUF_FIELD_OFFSET(::HostTaskModelRequest, rotationw_),
  PROTOBUF_FIELD_OFFSET(::HostTaskModelRequest, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HostTaskModelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HostTaskModelResponse, taskid_),
  PROTOBUF_FIELD_OFFSET(::HostTaskModelResponse, modeldata_),
  PROTOBUF_FIELD_OFFSET(::HostTaskModelResponse, prefabdata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HostTaskStarted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HostTaskStarted, taskid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HostTaskFinished, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HostTaskFinished, taskid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HostTaskProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HostTaskProgress, taskid_),
  PROTOBUF_FIELD_OFFSET(::HostTaskProgress, progress_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HostTaskProgressMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HostTaskProgressMessage, taskid_),
  PROTOBUF_FIELD_OFFSET(::HostTaskProgressMessage, progress_),
  PROTOBUF_FIELD_OFFSET(::HostTaskProgressMessage, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProcessorTaskMessageType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProcessorTaskMessageType, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProcessorTaskRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProcessorTaskRequest, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProcessorTaskImageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProcessorTaskImageRequest, taskid_),
  PROTOBUF_FIELD_OFFSET(::ProcessorTaskImageRequest, sourcecmformat_),
  PROTOBUF_FIELD_OFFSET(::ProcessorTaskImageRequest, targetcmbcformat_),
  PROTOBUF_FIELD_OFFSET(::ProcessorTaskImageRequest, enginepackedformat_),
  PROTOBUF_FIELD_OFFSET(::ProcessorTaskImageRequest, width_),
  PROTOBUF_FIELD_OFFSET(::ProcessorTaskImageRequest, height_),
  PROTOBUF_FIELD_OFFSET(::ProcessorTaskImageRequest, stride_),
  PROTOBUF_FIELD_OFFSET(::ProcessorTaskImageRequest, mipcount_),
  PROTOBUF_FIELD_OFFSET(::ProcessorTaskImageRequest, mip_),
  PROTOBUF_FIELD_OFFSET(::ProcessorTaskImageRequest, partid_),
  PROTOBUF_FIELD_OFFSET(::ProcessorTaskImageRequest, partsize_),
  PROTOBUF_FIELD_OFFSET(::ProcessorTaskImageRequest, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProcessorTaskImageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProcessorTaskImageResponse, taskid_),
  PROTOBUF_FIELD_OFFSET(::ProcessorTaskImageResponse, width_),
  PROTOBUF_FIELD_OFFSET(::ProcessorTaskImageResponse, height_),
  PROTOBUF_FIELD_OFFSET(::ProcessorTaskImageResponse, format_),
  PROTOBUF_FIELD_OFFSET(::ProcessorTaskImageResponse, mipcount_),
  PROTOBUF_FIELD_OFFSET(::ProcessorTaskImageResponse, mip_),
  PROTOBUF_FIELD_OFFSET(::ProcessorTaskImageResponse, partid_),
  PROTOBUF_FIELD_OFFSET(::ProcessorTaskImageResponse, partsize_),
  PROTOBUF_FIELD_OFFSET(::ProcessorTaskImageResponse, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProcessorTaskProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProcessorTaskProgress, taskid_),
  PROTOBUF_FIELD_OFFSET(::ProcessorTaskProgress, progress_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProcessorTaskMessageProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProcessorTaskMessageProgress, taskid_),
  PROTOBUF_FIELD_OFFSET(::ProcessorTaskMessageProgress, progress_),
  PROTOBUF_FIELD_OFFSET(::ProcessorTaskMessageProgress, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProcessorTaskModelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProcessorTaskModelRequest, taskid_),
  PROTOBUF_FIELD_OFFSET(::ProcessorTaskModelRequest, modeltargetpath_),
  PROTOBUF_FIELD_OFFSET(::ProcessorTaskModelRequest, assetname_),
  PROTOBUF_FIELD_OFFSET(::ProcessorTaskModelRequest, scalex_),
  PROTOBUF_FIELD_OFFSET(::ProcessorTaskModelRequest, scaley_),
  PROTOBUF_FIELD_OFFSET(::ProcessorTaskModelRequest, scalez_),
  PROTOBUF_FIELD_OFFSET(::ProcessorTaskModelRequest, rotationx_),
  PROTOBUF_FIELD_OFFSET(::ProcessorTaskModelRequest, rotationy_),
  PROTOBUF_FIELD_OFFSET(::ProcessorTaskModelRequest, rotationz_),
  PROTOBUF_FIELD_OFFSET(::ProcessorTaskModelRequest, rotationw_),
  PROTOBUF_FIELD_OFFSET(::ProcessorTaskModelRequest, modeldata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProcessorTaskModelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProcessorTaskModelResponse, taskid_),
  PROTOBUF_FIELD_OFFSET(::ProcessorTaskModelResponse, modeldata_),
  PROTOBUF_FIELD_OFFSET(::ProcessorTaskModelResponse, prefabdata_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::HostProcessorMessageType)},
  { 6, -1, sizeof(::HostCoreResponse)},
  { 12, -1, sizeof(::HostTaskImageRequest)},
  { 24, -1, sizeof(::HostTaskImageResponse)},
  { 35, -1, sizeof(::HostTaskModelRequest)},
  { 51, -1, sizeof(::HostTaskModelResponse)},
  { 59, -1, sizeof(::HostTaskStarted)},
  { 65, -1, sizeof(::HostTaskFinished)},
  { 71, -1, sizeof(::HostTaskProgress)},
  { 78, -1, sizeof(::HostTaskProgressMessage)},
  { 86, -1, sizeof(::ProcessorTaskMessageType)},
  { 92, -1, sizeof(::ProcessorTaskRequest)},
  { 98, -1, sizeof(::ProcessorTaskImageRequest)},
  { 115, -1, sizeof(::ProcessorTaskImageResponse)},
  { 129, -1, sizeof(::ProcessorTaskProgress)},
  { 136, -1, sizeof(::ProcessorTaskMessageProgress)},
  { 144, -1, sizeof(::ProcessorTaskModelRequest)},
  { 160, -1, sizeof(::ProcessorTaskModelResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_HostProcessorMessageType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_HostCoreResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_HostTaskImageRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_HostTaskImageResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_HostTaskModelRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_HostTaskModelResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_HostTaskStarted_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_HostTaskFinished_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_HostTaskProgress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_HostTaskProgressMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProcessorTaskMessageType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProcessorTaskRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProcessorTaskImageRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProcessorTaskImageResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProcessorTaskProgress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProcessorTaskMessageProgress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProcessorTaskModelRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProcessorTaskModelResponse_default_instance_),
};

const char descriptor_table_protodef_resourceprotocols_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027resourceprotocols.proto\"\316\002\n\030HostProces"
  "sorMessageType\0223\n\004type\030\001 \001(\0162%.HostProce"
  "ssorMessageType.MessageType\"\374\001\n\013MessageT"
  "ype\022\013\n\007Invalid\020\000\022\017\n\013CoreRequest\020\001\022\020\n\014Cor"
  "eResponse\020\002\022\024\n\020TaskImageRequest\020\003\022\025\n\021Tas"
  "kImageResponse\020\004\022\024\n\020TaskModelRequest\020\005\022\025"
  "\n\021TaskModelResponse\020\006\022\017\n\013TaskStarted\020\007\022\020"
  "\n\014TaskFinished\020\010\022\020\n\014TaskProgress\020\t\022\027\n\023Ta"
  "skProgressMessage\020\n\022\025\n\021ShutdownProcessor"
  "\020\013\"!\n\020HostCoreResponse\022\r\n\005cores\030\001 \001(\r\"\227\001"
  "\n\024HostTaskImageRequest\022\016\n\006taskId\030\001 \001(\t\022\021"
  "\n\textension\030\002 \001(\t\022\016\n\006format\030\003 \001(\005\022\024\n\014gen"
  "erateMips\030\004 \001(\010\022\022\n\nflipNormal\030\005 \001(\010\022\024\n\014a"
  "lphaClipped\030\006 \001(\010\022\014\n\004data\030\007 \001(\014\"r\n\025HostT"
  "askImageResponse\022\016\n\006taskId\030\001 \001(\t\022\r\n\005widt"
  "h\030\002 \001(\005\022\016\n\006height\030\003 \001(\005\022\014\n\004mips\030\004 \001(\005\022\016\n"
  "\006format\030\005 \001(\005\022\014\n\004data\030\006 \001(\014\"\334\001\n\024HostTask"
  "ModelRequest\022\016\n\006taskId\030\001 \001(\t\022\027\n\017modelTar"
  "getPath\030\002 \001(\t\022\021\n\tassetName\030\003 \001(\t\022\016\n\006scal"
  "eX\030\004 \001(\002\022\016\n\006scaleY\030\005 \001(\002\022\016\n\006scaleZ\030\006 \001(\002"
  "\022\021\n\trotationX\030\007 \001(\002\022\021\n\trotationY\030\010 \001(\002\022\021"
  "\n\trotationZ\030\t \001(\002\022\021\n\trotationW\030\n \001(\002\022\014\n\004"
  "data\030\013 \001(\014\"N\n\025HostTaskModelResponse\022\016\n\006t"
  "askId\030\001 \001(\t\022\021\n\tmodelData\030\002 \001(\014\022\022\n\nprefab"
  "Data\030\003 \001(\014\"!\n\017HostTaskStarted\022\016\n\006taskId\030"
  "\001 \001(\t\"\"\n\020HostTaskFinished\022\016\n\006taskId\030\001 \001("
  "\t\"4\n\020HostTaskProgress\022\016\n\006taskId\030\001 \001(\t\022\020\n"
  "\010progress\030\002 \001(\002\"L\n\027HostTaskProgressMessa"
  "ge\022\016\n\006taskId\030\001 \001(\t\022\020\n\010progress\030\002 \001(\002\022\017\n\007"
  "message\030\003 \001(\t\"\347\001\n\030ProcessorTaskMessageTy"
  "pe\0223\n\004type\030\001 \001(\0162%.ProcessorTaskMessageT"
  "ype.MessageType\"\225\001\n\013MessageType\022\013\n\007Inval"
  "id\020\000\022\010\n\004Helo\020\001\022\017\n\013TaskRequest\020\002\022\020\n\014TaskR"
  "esponse\020\003\022\020\n\014TaskProgress\020\004\022\027\n\023TaskProgr"
  "essMessage\020\005\022\017\n\013DoneRequest\020\006\022\020\n\014DoneRes"
  "ponse\020\007\"s\n\024ProcessorTaskRequest\022,\n\004type\030"
  "\001 \001(\0162\036.ProcessorTaskRequest.TaskType\"-\n"
  "\010TaskType\022\013\n\007Invalid\020\000\022\t\n\005Image\020\001\022\t\n\005Mod"
  "el\020\002\"\367\001\n\031ProcessorTaskImageRequest\022\016\n\006ta"
  "skId\030\001 \001(\t\022\026\n\016sourceCMformat\030\002 \001(\005\022\030\n\020ta"
  "rgetCMBCformat\030\003 \001(\005\022\032\n\022enginePackedForm"
  "at\030\004 \001(\005\022\r\n\005width\030\005 \001(\005\022\016\n\006height\030\006 \001(\005\022"
  "\016\n\006stride\030\007 \001(\005\022\020\n\010mipCount\030\010 \001(\005\022\013\n\003mip"
  "\030\t \001(\005\022\016\n\006partId\030\n \001(\005\022\020\n\010partSize\030\013 \001(\005"
  "\022\014\n\004data\030\014 \001(\014\"\252\001\n\032ProcessorTaskImageRes"
  "ponse\022\016\n\006taskId\030\001 \001(\t\022\r\n\005width\030\002 \001(\005\022\016\n\006"
  "height\030\003 \001(\005\022\016\n\006format\030\004 \001(\005\022\020\n\010mipCount"
  "\030\005 \001(\005\022\013\n\003mip\030\006 \001(\005\022\016\n\006partId\030\007 \001(\005\022\020\n\010p"
  "artSize\030\010 \001(\005\022\014\n\004data\030\t \001(\014\"9\n\025Processor"
  "TaskProgress\022\016\n\006taskId\030\001 \001(\t\022\020\n\010progress"
  "\030\002 \001(\002\"Q\n\034ProcessorTaskMessageProgress\022\016"
  "\n\006taskId\030\001 \001(\t\022\020\n\010progress\030\002 \001(\002\022\017\n\007mess"
  "age\030\003 \001(\t\"\346\001\n\031ProcessorTaskModelRequest\022"
  "\016\n\006taskId\030\001 \001(\t\022\027\n\017modelTargetPath\030\002 \001(\t"
  "\022\021\n\tassetName\030\003 \001(\t\022\016\n\006scaleX\030\004 \001(\002\022\016\n\006s"
  "caleY\030\005 \001(\002\022\016\n\006scaleZ\030\006 \001(\002\022\021\n\trotationX"
  "\030\007 \001(\002\022\021\n\trotationY\030\010 \001(\002\022\021\n\trotationZ\030\t"
  " \001(\002\022\021\n\trotationW\030\n \001(\002\022\021\n\tmodelData\030\013 \001"
  "(\014\"S\n\032ProcessorTaskModelResponse\022\016\n\006task"
  "Id\030\001 \001(\t\022\021\n\tmodelData\030\002 \001(\014\022\022\n\nprefabDat"
  "a\030\003 \001(\014b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_resourceprotocols_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_resourceprotocols_2eproto_sccs[18] = {
  &scc_info_HostCoreResponse_resourceprotocols_2eproto.base,
  &scc_info_HostProcessorMessageType_resourceprotocols_2eproto.base,
  &scc_info_HostTaskFinished_resourceprotocols_2eproto.base,
  &scc_info_HostTaskImageRequest_resourceprotocols_2eproto.base,
  &scc_info_HostTaskImageResponse_resourceprotocols_2eproto.base,
  &scc_info_HostTaskModelRequest_resourceprotocols_2eproto.base,
  &scc_info_HostTaskModelResponse_resourceprotocols_2eproto.base,
  &scc_info_HostTaskProgress_resourceprotocols_2eproto.base,
  &scc_info_HostTaskProgressMessage_resourceprotocols_2eproto.base,
  &scc_info_HostTaskStarted_resourceprotocols_2eproto.base,
  &scc_info_ProcessorTaskImageRequest_resourceprotocols_2eproto.base,
  &scc_info_ProcessorTaskImageResponse_resourceprotocols_2eproto.base,
  &scc_info_ProcessorTaskMessageProgress_resourceprotocols_2eproto.base,
  &scc_info_ProcessorTaskMessageType_resourceprotocols_2eproto.base,
  &scc_info_ProcessorTaskModelRequest_resourceprotocols_2eproto.base,
  &scc_info_ProcessorTaskModelResponse_resourceprotocols_2eproto.base,
  &scc_info_ProcessorTaskProgress_resourceprotocols_2eproto.base,
  &scc_info_ProcessorTaskRequest_resourceprotocols_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_resourceprotocols_2eproto_once;
static bool descriptor_table_resourceprotocols_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_resourceprotocols_2eproto = {
  &descriptor_table_resourceprotocols_2eproto_initialized, descriptor_table_protodef_resourceprotocols_2eproto, "resourceprotocols.proto", 2415,
  &descriptor_table_resourceprotocols_2eproto_once, descriptor_table_resourceprotocols_2eproto_sccs, descriptor_table_resourceprotocols_2eproto_deps, 18, 0,
  schemas, file_default_instances, TableStruct_resourceprotocols_2eproto::offsets,
  file_level_metadata_resourceprotocols_2eproto, 18, file_level_enum_descriptors_resourceprotocols_2eproto, file_level_service_descriptors_resourceprotocols_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_resourceprotocols_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_resourceprotocols_2eproto)), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HostProcessorMessageType_MessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_resourceprotocols_2eproto);
  return file_level_enum_descriptors_resourceprotocols_2eproto[0];
}
bool HostProcessorMessageType_MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr HostProcessorMessageType_MessageType HostProcessorMessageType::Invalid;
constexpr HostProcessorMessageType_MessageType HostProcessorMessageType::CoreRequest;
constexpr HostProcessorMessageType_MessageType HostProcessorMessageType::CoreResponse;
constexpr HostProcessorMessageType_MessageType HostProcessorMessageType::TaskImageRequest;
constexpr HostProcessorMessageType_MessageType HostProcessorMessageType::TaskImageResponse;
constexpr HostProcessorMessageType_MessageType HostProcessorMessageType::TaskModelRequest;
constexpr HostProcessorMessageType_MessageType HostProcessorMessageType::TaskModelResponse;
constexpr HostProcessorMessageType_MessageType HostProcessorMessageType::TaskStarted;
constexpr HostProcessorMessageType_MessageType HostProcessorMessageType::TaskFinished;
constexpr HostProcessorMessageType_MessageType HostProcessorMessageType::TaskProgress;
constexpr HostProcessorMessageType_MessageType HostProcessorMessageType::TaskProgressMessage;
constexpr HostProcessorMessageType_MessageType HostProcessorMessageType::ShutdownProcessor;
constexpr HostProcessorMessageType_MessageType HostProcessorMessageType::MessageType_MIN;
constexpr HostProcessorMessageType_MessageType HostProcessorMessageType::MessageType_MAX;
constexpr int HostProcessorMessageType::MessageType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProcessorTaskMessageType_MessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_resourceprotocols_2eproto);
  return file_level_enum_descriptors_resourceprotocols_2eproto[1];
}
bool ProcessorTaskMessageType_MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ProcessorTaskMessageType_MessageType ProcessorTaskMessageType::Invalid;
constexpr ProcessorTaskMessageType_MessageType ProcessorTaskMessageType::Helo;
constexpr ProcessorTaskMessageType_MessageType ProcessorTaskMessageType::TaskRequest;
constexpr ProcessorTaskMessageType_MessageType ProcessorTaskMessageType::TaskResponse;
constexpr ProcessorTaskMessageType_MessageType ProcessorTaskMessageType::TaskProgress;
constexpr ProcessorTaskMessageType_MessageType ProcessorTaskMessageType::TaskProgressMessage;
constexpr ProcessorTaskMessageType_MessageType ProcessorTaskMessageType::DoneRequest;
constexpr ProcessorTaskMessageType_MessageType ProcessorTaskMessageType::DoneResponse;
constexpr ProcessorTaskMessageType_MessageType ProcessorTaskMessageType::MessageType_MIN;
constexpr ProcessorTaskMessageType_MessageType ProcessorTaskMessageType::MessageType_MAX;
constexpr int ProcessorTaskMessageType::MessageType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProcessorTaskRequest_TaskType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_resourceprotocols_2eproto);
  return file_level_enum_descriptors_resourceprotocols_2eproto[2];
}
bool ProcessorTaskRequest_TaskType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ProcessorTaskRequest_TaskType ProcessorTaskRequest::Invalid;
constexpr ProcessorTaskRequest_TaskType ProcessorTaskRequest::Image;
constexpr ProcessorTaskRequest_TaskType ProcessorTaskRequest::Model;
constexpr ProcessorTaskRequest_TaskType ProcessorTaskRequest::TaskType_MIN;
constexpr ProcessorTaskRequest_TaskType ProcessorTaskRequest::TaskType_MAX;
constexpr int ProcessorTaskRequest::TaskType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void HostProcessorMessageType::InitAsDefaultInstance() {
}
class HostProcessorMessageType::_Internal {
 public:
};

HostProcessorMessageType::HostProcessorMessageType()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:HostProcessorMessageType)
}
HostProcessorMessageType::HostProcessorMessageType(const HostProcessorMessageType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:HostProcessorMessageType)
}

void HostProcessorMessageType::SharedCtor() {
  type_ = 0;
}

HostProcessorMessageType::~HostProcessorMessageType() {
  // @@protoc_insertion_point(destructor:HostProcessorMessageType)
  SharedDtor();
}

void HostProcessorMessageType::SharedDtor() {
}

void HostProcessorMessageType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HostProcessorMessageType& HostProcessorMessageType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HostProcessorMessageType_resourceprotocols_2eproto.base);
  return *internal_default_instance();
}


void HostProcessorMessageType::Clear() {
// @@protoc_insertion_point(message_clear_start:HostProcessorMessageType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _internal_metadata_.Clear();
}

const char* HostProcessorMessageType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .HostProcessorMessageType.MessageType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::HostProcessorMessageType_MessageType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HostProcessorMessageType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HostProcessorMessageType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .HostProcessorMessageType.MessageType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HostProcessorMessageType)
  return target;
}

size_t HostProcessorMessageType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HostProcessorMessageType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .HostProcessorMessageType.MessageType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HostProcessorMessageType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HostProcessorMessageType)
  GOOGLE_DCHECK_NE(&from, this);
  const HostProcessorMessageType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HostProcessorMessageType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HostProcessorMessageType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HostProcessorMessageType)
    MergeFrom(*source);
  }
}

void HostProcessorMessageType::MergeFrom(const HostProcessorMessageType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HostProcessorMessageType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void HostProcessorMessageType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HostProcessorMessageType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HostProcessorMessageType::CopyFrom(const HostProcessorMessageType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HostProcessorMessageType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostProcessorMessageType::IsInitialized() const {
  return true;
}

void HostProcessorMessageType::InternalSwap(HostProcessorMessageType* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HostProcessorMessageType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HostCoreResponse::InitAsDefaultInstance() {
}
class HostCoreResponse::_Internal {
 public:
};

HostCoreResponse::HostCoreResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:HostCoreResponse)
}
HostCoreResponse::HostCoreResponse(const HostCoreResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cores_ = from.cores_;
  // @@protoc_insertion_point(copy_constructor:HostCoreResponse)
}

void HostCoreResponse::SharedCtor() {
  cores_ = 0u;
}

HostCoreResponse::~HostCoreResponse() {
  // @@protoc_insertion_point(destructor:HostCoreResponse)
  SharedDtor();
}

void HostCoreResponse::SharedDtor() {
}

void HostCoreResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HostCoreResponse& HostCoreResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HostCoreResponse_resourceprotocols_2eproto.base);
  return *internal_default_instance();
}


void HostCoreResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:HostCoreResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cores_ = 0u;
  _internal_metadata_.Clear();
}

const char* HostCoreResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 cores = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cores_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HostCoreResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HostCoreResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 cores = 1;
  if (this->cores() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_cores(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HostCoreResponse)
  return target;
}

size_t HostCoreResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HostCoreResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 cores = 1;
  if (this->cores() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cores());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HostCoreResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HostCoreResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const HostCoreResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HostCoreResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HostCoreResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HostCoreResponse)
    MergeFrom(*source);
  }
}

void HostCoreResponse::MergeFrom(const HostCoreResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HostCoreResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cores() != 0) {
    _internal_set_cores(from._internal_cores());
  }
}

void HostCoreResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HostCoreResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HostCoreResponse::CopyFrom(const HostCoreResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HostCoreResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostCoreResponse::IsInitialized() const {
  return true;
}

void HostCoreResponse::InternalSwap(HostCoreResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(cores_, other->cores_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HostCoreResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HostTaskImageRequest::InitAsDefaultInstance() {
}
class HostTaskImageRequest::_Internal {
 public:
};

HostTaskImageRequest::HostTaskImageRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:HostTaskImageRequest)
}
HostTaskImageRequest::HostTaskImageRequest(const HostTaskImageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  taskid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_taskid().empty()) {
    taskid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.taskid_);
  }
  extension_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_extension().empty()) {
    extension_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.extension_);
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&format_, &from.format_,
    static_cast<size_t>(reinterpret_cast<char*>(&alphaclipped_) -
    reinterpret_cast<char*>(&format_)) + sizeof(alphaclipped_));
  // @@protoc_insertion_point(copy_constructor:HostTaskImageRequest)
}

void HostTaskImageRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HostTaskImageRequest_resourceprotocols_2eproto.base);
  taskid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extension_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&format_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alphaclipped_) -
      reinterpret_cast<char*>(&format_)) + sizeof(alphaclipped_));
}

HostTaskImageRequest::~HostTaskImageRequest() {
  // @@protoc_insertion_point(destructor:HostTaskImageRequest)
  SharedDtor();
}

void HostTaskImageRequest::SharedDtor() {
  taskid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extension_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HostTaskImageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HostTaskImageRequest& HostTaskImageRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HostTaskImageRequest_resourceprotocols_2eproto.base);
  return *internal_default_instance();
}


void HostTaskImageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:HostTaskImageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  taskid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extension_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&format_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alphaclipped_) -
      reinterpret_cast<char*>(&format_)) + sizeof(alphaclipped_));
  _internal_metadata_.Clear();
}

const char* HostTaskImageRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string taskId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_taskid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "HostTaskImageRequest.taskId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string extension = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_extension();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "HostTaskImageRequest.extension"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 format = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool generateMips = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          generatemips_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool flipNormal = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          flipnormal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool alphaClipped = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          alphaclipped_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HostTaskImageRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HostTaskImageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string taskId = 1;
  if (this->taskid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_taskid().data(), static_cast<int>(this->_internal_taskid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "HostTaskImageRequest.taskId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_taskid(), target);
  }

  // string extension = 2;
  if (this->extension().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_extension().data(), static_cast<int>(this->_internal_extension().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "HostTaskImageRequest.extension");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_extension(), target);
  }

  // int32 format = 3;
  if (this->format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_format(), target);
  }

  // bool generateMips = 4;
  if (this->generatemips() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_generatemips(), target);
  }

  // bool flipNormal = 5;
  if (this->flipnormal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_flipnormal(), target);
  }

  // bool alphaClipped = 6;
  if (this->alphaclipped() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_alphaclipped(), target);
  }

  // bytes data = 7;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HostTaskImageRequest)
  return target;
}

size_t HostTaskImageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HostTaskImageRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string taskId = 1;
  if (this->taskid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_taskid());
  }

  // string extension = 2;
  if (this->extension().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_extension());
  }

  // bytes data = 7;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // int32 format = 3;
  if (this->format() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_format());
  }

  // bool generateMips = 4;
  if (this->generatemips() != 0) {
    total_size += 1 + 1;
  }

  // bool flipNormal = 5;
  if (this->flipnormal() != 0) {
    total_size += 1 + 1;
  }

  // bool alphaClipped = 6;
  if (this->alphaclipped() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HostTaskImageRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HostTaskImageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const HostTaskImageRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HostTaskImageRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HostTaskImageRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HostTaskImageRequest)
    MergeFrom(*source);
  }
}

void HostTaskImageRequest::MergeFrom(const HostTaskImageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HostTaskImageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.taskid().size() > 0) {

    taskid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.taskid_);
  }
  if (from.extension().size() > 0) {

    extension_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.extension_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.format() != 0) {
    _internal_set_format(from._internal_format());
  }
  if (from.generatemips() != 0) {
    _internal_set_generatemips(from._internal_generatemips());
  }
  if (from.flipnormal() != 0) {
    _internal_set_flipnormal(from._internal_flipnormal());
  }
  if (from.alphaclipped() != 0) {
    _internal_set_alphaclipped(from._internal_alphaclipped());
  }
}

void HostTaskImageRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HostTaskImageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HostTaskImageRequest::CopyFrom(const HostTaskImageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HostTaskImageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostTaskImageRequest::IsInitialized() const {
  return true;
}

void HostTaskImageRequest::InternalSwap(HostTaskImageRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  taskid_.Swap(&other->taskid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  extension_.Swap(&other->extension_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(format_, other->format_);
  swap(generatemips_, other->generatemips_);
  swap(flipnormal_, other->flipnormal_);
  swap(alphaclipped_, other->alphaclipped_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HostTaskImageRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HostTaskImageResponse::InitAsDefaultInstance() {
}
class HostTaskImageResponse::_Internal {
 public:
};

HostTaskImageResponse::HostTaskImageResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:HostTaskImageResponse)
}
HostTaskImageResponse::HostTaskImageResponse(const HostTaskImageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  taskid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_taskid().empty()) {
    taskid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.taskid_);
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&format_) -
    reinterpret_cast<char*>(&width_)) + sizeof(format_));
  // @@protoc_insertion_point(copy_constructor:HostTaskImageResponse)
}

void HostTaskImageResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HostTaskImageResponse_resourceprotocols_2eproto.base);
  taskid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&format_) -
      reinterpret_cast<char*>(&width_)) + sizeof(format_));
}

HostTaskImageResponse::~HostTaskImageResponse() {
  // @@protoc_insertion_point(destructor:HostTaskImageResponse)
  SharedDtor();
}

void HostTaskImageResponse::SharedDtor() {
  taskid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HostTaskImageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HostTaskImageResponse& HostTaskImageResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HostTaskImageResponse_resourceprotocols_2eproto.base);
  return *internal_default_instance();
}


void HostTaskImageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:HostTaskImageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  taskid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&format_) -
      reinterpret_cast<char*>(&width_)) + sizeof(format_));
  _internal_metadata_.Clear();
}

const char* HostTaskImageResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string taskId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_taskid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "HostTaskImageResponse.taskId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mips = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          mips_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 format = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HostTaskImageResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HostTaskImageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string taskId = 1;
  if (this->taskid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_taskid().data(), static_cast<int>(this->_internal_taskid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "HostTaskImageResponse.taskId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_taskid(), target);
  }

  // int32 width = 2;
  if (this->width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_width(), target);
  }

  // int32 height = 3;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_height(), target);
  }

  // int32 mips = 4;
  if (this->mips() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_mips(), target);
  }

  // int32 format = 5;
  if (this->format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_format(), target);
  }

  // bytes data = 6;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HostTaskImageResponse)
  return target;
}

size_t HostTaskImageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HostTaskImageResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string taskId = 1;
  if (this->taskid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_taskid());
  }

  // bytes data = 6;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // int32 width = 2;
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_width());
  }

  // int32 height = 3;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_height());
  }

  // int32 mips = 4;
  if (this->mips() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mips());
  }

  // int32 format = 5;
  if (this->format() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_format());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HostTaskImageResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HostTaskImageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const HostTaskImageResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HostTaskImageResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HostTaskImageResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HostTaskImageResponse)
    MergeFrom(*source);
  }
}

void HostTaskImageResponse::MergeFrom(const HostTaskImageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HostTaskImageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.taskid().size() > 0) {

    taskid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.taskid_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from.mips() != 0) {
    _internal_set_mips(from._internal_mips());
  }
  if (from.format() != 0) {
    _internal_set_format(from._internal_format());
  }
}

void HostTaskImageResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HostTaskImageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HostTaskImageResponse::CopyFrom(const HostTaskImageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HostTaskImageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostTaskImageResponse::IsInitialized() const {
  return true;
}

void HostTaskImageResponse::InternalSwap(HostTaskImageResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  taskid_.Swap(&other->taskid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(mips_, other->mips_);
  swap(format_, other->format_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HostTaskImageResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HostTaskModelRequest::InitAsDefaultInstance() {
}
class HostTaskModelRequest::_Internal {
 public:
};

HostTaskModelRequest::HostTaskModelRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:HostTaskModelRequest)
}
HostTaskModelRequest::HostTaskModelRequest(const HostTaskModelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  taskid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_taskid().empty()) {
    taskid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.taskid_);
  }
  modeltargetpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_modeltargetpath().empty()) {
    modeltargetpath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.modeltargetpath_);
  }
  assetname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_assetname().empty()) {
    assetname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.assetname_);
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&scalex_, &from.scalex_,
    static_cast<size_t>(reinterpret_cast<char*>(&rotationw_) -
    reinterpret_cast<char*>(&scalex_)) + sizeof(rotationw_));
  // @@protoc_insertion_point(copy_constructor:HostTaskModelRequest)
}

void HostTaskModelRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HostTaskModelRequest_resourceprotocols_2eproto.base);
  taskid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modeltargetpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  assetname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&scalex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotationw_) -
      reinterpret_cast<char*>(&scalex_)) + sizeof(rotationw_));
}

HostTaskModelRequest::~HostTaskModelRequest() {
  // @@protoc_insertion_point(destructor:HostTaskModelRequest)
  SharedDtor();
}

void HostTaskModelRequest::SharedDtor() {
  taskid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modeltargetpath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  assetname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HostTaskModelRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HostTaskModelRequest& HostTaskModelRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HostTaskModelRequest_resourceprotocols_2eproto.base);
  return *internal_default_instance();
}


void HostTaskModelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:HostTaskModelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  taskid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modeltargetpath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  assetname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&scalex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotationw_) -
      reinterpret_cast<char*>(&scalex_)) + sizeof(rotationw_));
  _internal_metadata_.Clear();
}

const char* HostTaskModelRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string taskId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_taskid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "HostTaskModelRequest.taskId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string modelTargetPath = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_modeltargetpath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "HostTaskModelRequest.modelTargetPath"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string assetName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_assetname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "HostTaskModelRequest.assetName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float scaleX = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          scalex_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float scaleY = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          scaley_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float scaleZ = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          scalez_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float rotationX = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          rotationx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float rotationY = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          rotationy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float rotationZ = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          rotationz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float rotationW = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          rotationw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bytes data = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HostTaskModelRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HostTaskModelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string taskId = 1;
  if (this->taskid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_taskid().data(), static_cast<int>(this->_internal_taskid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "HostTaskModelRequest.taskId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_taskid(), target);
  }

  // string modelTargetPath = 2;
  if (this->modeltargetpath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_modeltargetpath().data(), static_cast<int>(this->_internal_modeltargetpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "HostTaskModelRequest.modelTargetPath");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_modeltargetpath(), target);
  }

  // string assetName = 3;
  if (this->assetname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_assetname().data(), static_cast<int>(this->_internal_assetname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "HostTaskModelRequest.assetName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_assetname(), target);
  }

  // float scaleX = 4;
  if (!(this->scalex() <= 0 && this->scalex() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_scalex(), target);
  }

  // float scaleY = 5;
  if (!(this->scaley() <= 0 && this->scaley() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_scaley(), target);
  }

  // float scaleZ = 6;
  if (!(this->scalez() <= 0 && this->scalez() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_scalez(), target);
  }

  // float rotationX = 7;
  if (!(this->rotationx() <= 0 && this->rotationx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_rotationx(), target);
  }

  // float rotationY = 8;
  if (!(this->rotationy() <= 0 && this->rotationy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_rotationy(), target);
  }

  // float rotationZ = 9;
  if (!(this->rotationz() <= 0 && this->rotationz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_rotationz(), target);
  }

  // float rotationW = 10;
  if (!(this->rotationw() <= 0 && this->rotationw() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_rotationw(), target);
  }

  // bytes data = 11;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HostTaskModelRequest)
  return target;
}

size_t HostTaskModelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HostTaskModelRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string taskId = 1;
  if (this->taskid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_taskid());
  }

  // string modelTargetPath = 2;
  if (this->modeltargetpath().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_modeltargetpath());
  }

  // string assetName = 3;
  if (this->assetname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_assetname());
  }

  // bytes data = 11;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // float scaleX = 4;
  if (!(this->scalex() <= 0 && this->scalex() >= 0)) {
    total_size += 1 + 4;
  }

  // float scaleY = 5;
  if (!(this->scaley() <= 0 && this->scaley() >= 0)) {
    total_size += 1 + 4;
  }

  // float scaleZ = 6;
  if (!(this->scalez() <= 0 && this->scalez() >= 0)) {
    total_size += 1 + 4;
  }

  // float rotationX = 7;
  if (!(this->rotationx() <= 0 && this->rotationx() >= 0)) {
    total_size += 1 + 4;
  }

  // float rotationY = 8;
  if (!(this->rotationy() <= 0 && this->rotationy() >= 0)) {
    total_size += 1 + 4;
  }

  // float rotationZ = 9;
  if (!(this->rotationz() <= 0 && this->rotationz() >= 0)) {
    total_size += 1 + 4;
  }

  // float rotationW = 10;
  if (!(this->rotationw() <= 0 && this->rotationw() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HostTaskModelRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HostTaskModelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const HostTaskModelRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HostTaskModelRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HostTaskModelRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HostTaskModelRequest)
    MergeFrom(*source);
  }
}

void HostTaskModelRequest::MergeFrom(const HostTaskModelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HostTaskModelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.taskid().size() > 0) {

    taskid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.taskid_);
  }
  if (from.modeltargetpath().size() > 0) {

    modeltargetpath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.modeltargetpath_);
  }
  if (from.assetname().size() > 0) {

    assetname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.assetname_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (!(from.scalex() <= 0 && from.scalex() >= 0)) {
    _internal_set_scalex(from._internal_scalex());
  }
  if (!(from.scaley() <= 0 && from.scaley() >= 0)) {
    _internal_set_scaley(from._internal_scaley());
  }
  if (!(from.scalez() <= 0 && from.scalez() >= 0)) {
    _internal_set_scalez(from._internal_scalez());
  }
  if (!(from.rotationx() <= 0 && from.rotationx() >= 0)) {
    _internal_set_rotationx(from._internal_rotationx());
  }
  if (!(from.rotationy() <= 0 && from.rotationy() >= 0)) {
    _internal_set_rotationy(from._internal_rotationy());
  }
  if (!(from.rotationz() <= 0 && from.rotationz() >= 0)) {
    _internal_set_rotationz(from._internal_rotationz());
  }
  if (!(from.rotationw() <= 0 && from.rotationw() >= 0)) {
    _internal_set_rotationw(from._internal_rotationw());
  }
}

void HostTaskModelRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HostTaskModelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HostTaskModelRequest::CopyFrom(const HostTaskModelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HostTaskModelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostTaskModelRequest::IsInitialized() const {
  return true;
}

void HostTaskModelRequest::InternalSwap(HostTaskModelRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  taskid_.Swap(&other->taskid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  modeltargetpath_.Swap(&other->modeltargetpath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  assetname_.Swap(&other->assetname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(scalex_, other->scalex_);
  swap(scaley_, other->scaley_);
  swap(scalez_, other->scalez_);
  swap(rotationx_, other->rotationx_);
  swap(rotationy_, other->rotationy_);
  swap(rotationz_, other->rotationz_);
  swap(rotationw_, other->rotationw_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HostTaskModelRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HostTaskModelResponse::InitAsDefaultInstance() {
}
class HostTaskModelResponse::_Internal {
 public:
};

HostTaskModelResponse::HostTaskModelResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:HostTaskModelResponse)
}
HostTaskModelResponse::HostTaskModelResponse(const HostTaskModelResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  taskid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_taskid().empty()) {
    taskid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.taskid_);
  }
  modeldata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_modeldata().empty()) {
    modeldata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.modeldata_);
  }
  prefabdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_prefabdata().empty()) {
    prefabdata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.prefabdata_);
  }
  // @@protoc_insertion_point(copy_constructor:HostTaskModelResponse)
}

void HostTaskModelResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HostTaskModelResponse_resourceprotocols_2eproto.base);
  taskid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modeldata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prefabdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

HostTaskModelResponse::~HostTaskModelResponse() {
  // @@protoc_insertion_point(destructor:HostTaskModelResponse)
  SharedDtor();
}

void HostTaskModelResponse::SharedDtor() {
  taskid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modeldata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prefabdata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HostTaskModelResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HostTaskModelResponse& HostTaskModelResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HostTaskModelResponse_resourceprotocols_2eproto.base);
  return *internal_default_instance();
}


void HostTaskModelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:HostTaskModelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  taskid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modeldata_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prefabdata_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* HostTaskModelResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string taskId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_taskid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "HostTaskModelResponse.taskId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes modelData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_modeldata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes prefabData = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_prefabdata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HostTaskModelResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HostTaskModelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string taskId = 1;
  if (this->taskid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_taskid().data(), static_cast<int>(this->_internal_taskid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "HostTaskModelResponse.taskId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_taskid(), target);
  }

  // bytes modelData = 2;
  if (this->modeldata().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_modeldata(), target);
  }

  // bytes prefabData = 3;
  if (this->prefabdata().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_prefabdata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HostTaskModelResponse)
  return target;
}

size_t HostTaskModelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HostTaskModelResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string taskId = 1;
  if (this->taskid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_taskid());
  }

  // bytes modelData = 2;
  if (this->modeldata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_modeldata());
  }

  // bytes prefabData = 3;
  if (this->prefabdata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_prefabdata());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HostTaskModelResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HostTaskModelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const HostTaskModelResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HostTaskModelResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HostTaskModelResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HostTaskModelResponse)
    MergeFrom(*source);
  }
}

void HostTaskModelResponse::MergeFrom(const HostTaskModelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HostTaskModelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.taskid().size() > 0) {

    taskid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.taskid_);
  }
  if (from.modeldata().size() > 0) {

    modeldata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.modeldata_);
  }
  if (from.prefabdata().size() > 0) {

    prefabdata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.prefabdata_);
  }
}

void HostTaskModelResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HostTaskModelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HostTaskModelResponse::CopyFrom(const HostTaskModelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HostTaskModelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostTaskModelResponse::IsInitialized() const {
  return true;
}

void HostTaskModelResponse::InternalSwap(HostTaskModelResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  taskid_.Swap(&other->taskid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  modeldata_.Swap(&other->modeldata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  prefabdata_.Swap(&other->prefabdata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata HostTaskModelResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HostTaskStarted::InitAsDefaultInstance() {
}
class HostTaskStarted::_Internal {
 public:
};

HostTaskStarted::HostTaskStarted()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:HostTaskStarted)
}
HostTaskStarted::HostTaskStarted(const HostTaskStarted& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  taskid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_taskid().empty()) {
    taskid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.taskid_);
  }
  // @@protoc_insertion_point(copy_constructor:HostTaskStarted)
}

void HostTaskStarted::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HostTaskStarted_resourceprotocols_2eproto.base);
  taskid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

HostTaskStarted::~HostTaskStarted() {
  // @@protoc_insertion_point(destructor:HostTaskStarted)
  SharedDtor();
}

void HostTaskStarted::SharedDtor() {
  taskid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HostTaskStarted::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HostTaskStarted& HostTaskStarted::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HostTaskStarted_resourceprotocols_2eproto.base);
  return *internal_default_instance();
}


void HostTaskStarted::Clear() {
// @@protoc_insertion_point(message_clear_start:HostTaskStarted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  taskid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* HostTaskStarted::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string taskId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_taskid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "HostTaskStarted.taskId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HostTaskStarted::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HostTaskStarted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string taskId = 1;
  if (this->taskid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_taskid().data(), static_cast<int>(this->_internal_taskid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "HostTaskStarted.taskId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_taskid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HostTaskStarted)
  return target;
}

size_t HostTaskStarted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HostTaskStarted)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string taskId = 1;
  if (this->taskid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_taskid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HostTaskStarted::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HostTaskStarted)
  GOOGLE_DCHECK_NE(&from, this);
  const HostTaskStarted* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HostTaskStarted>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HostTaskStarted)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HostTaskStarted)
    MergeFrom(*source);
  }
}

void HostTaskStarted::MergeFrom(const HostTaskStarted& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HostTaskStarted)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.taskid().size() > 0) {

    taskid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.taskid_);
  }
}

void HostTaskStarted::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HostTaskStarted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HostTaskStarted::CopyFrom(const HostTaskStarted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HostTaskStarted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostTaskStarted::IsInitialized() const {
  return true;
}

void HostTaskStarted::InternalSwap(HostTaskStarted* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  taskid_.Swap(&other->taskid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata HostTaskStarted::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HostTaskFinished::InitAsDefaultInstance() {
}
class HostTaskFinished::_Internal {
 public:
};

HostTaskFinished::HostTaskFinished()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:HostTaskFinished)
}
HostTaskFinished::HostTaskFinished(const HostTaskFinished& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  taskid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_taskid().empty()) {
    taskid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.taskid_);
  }
  // @@protoc_insertion_point(copy_constructor:HostTaskFinished)
}

void HostTaskFinished::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HostTaskFinished_resourceprotocols_2eproto.base);
  taskid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

HostTaskFinished::~HostTaskFinished() {
  // @@protoc_insertion_point(destructor:HostTaskFinished)
  SharedDtor();
}

void HostTaskFinished::SharedDtor() {
  taskid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HostTaskFinished::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HostTaskFinished& HostTaskFinished::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HostTaskFinished_resourceprotocols_2eproto.base);
  return *internal_default_instance();
}


void HostTaskFinished::Clear() {
// @@protoc_insertion_point(message_clear_start:HostTaskFinished)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  taskid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* HostTaskFinished::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string taskId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_taskid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "HostTaskFinished.taskId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HostTaskFinished::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HostTaskFinished)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string taskId = 1;
  if (this->taskid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_taskid().data(), static_cast<int>(this->_internal_taskid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "HostTaskFinished.taskId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_taskid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HostTaskFinished)
  return target;
}

size_t HostTaskFinished::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HostTaskFinished)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string taskId = 1;
  if (this->taskid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_taskid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HostTaskFinished::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HostTaskFinished)
  GOOGLE_DCHECK_NE(&from, this);
  const HostTaskFinished* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HostTaskFinished>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HostTaskFinished)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HostTaskFinished)
    MergeFrom(*source);
  }
}

void HostTaskFinished::MergeFrom(const HostTaskFinished& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HostTaskFinished)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.taskid().size() > 0) {

    taskid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.taskid_);
  }
}

void HostTaskFinished::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HostTaskFinished)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HostTaskFinished::CopyFrom(const HostTaskFinished& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HostTaskFinished)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostTaskFinished::IsInitialized() const {
  return true;
}

void HostTaskFinished::InternalSwap(HostTaskFinished* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  taskid_.Swap(&other->taskid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata HostTaskFinished::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HostTaskProgress::InitAsDefaultInstance() {
}
class HostTaskProgress::_Internal {
 public:
};

HostTaskProgress::HostTaskProgress()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:HostTaskProgress)
}
HostTaskProgress::HostTaskProgress(const HostTaskProgress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  taskid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_taskid().empty()) {
    taskid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.taskid_);
  }
  progress_ = from.progress_;
  // @@protoc_insertion_point(copy_constructor:HostTaskProgress)
}

void HostTaskProgress::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HostTaskProgress_resourceprotocols_2eproto.base);
  taskid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  progress_ = 0;
}

HostTaskProgress::~HostTaskProgress() {
  // @@protoc_insertion_point(destructor:HostTaskProgress)
  SharedDtor();
}

void HostTaskProgress::SharedDtor() {
  taskid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HostTaskProgress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HostTaskProgress& HostTaskProgress::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HostTaskProgress_resourceprotocols_2eproto.base);
  return *internal_default_instance();
}


void HostTaskProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:HostTaskProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  taskid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  progress_ = 0;
  _internal_metadata_.Clear();
}

const char* HostTaskProgress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string taskId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_taskid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "HostTaskProgress.taskId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float progress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          progress_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HostTaskProgress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HostTaskProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string taskId = 1;
  if (this->taskid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_taskid().data(), static_cast<int>(this->_internal_taskid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "HostTaskProgress.taskId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_taskid(), target);
  }

  // float progress = 2;
  if (!(this->progress() <= 0 && this->progress() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_progress(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HostTaskProgress)
  return target;
}

size_t HostTaskProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HostTaskProgress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string taskId = 1;
  if (this->taskid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_taskid());
  }

  // float progress = 2;
  if (!(this->progress() <= 0 && this->progress() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HostTaskProgress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HostTaskProgress)
  GOOGLE_DCHECK_NE(&from, this);
  const HostTaskProgress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HostTaskProgress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HostTaskProgress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HostTaskProgress)
    MergeFrom(*source);
  }
}

void HostTaskProgress::MergeFrom(const HostTaskProgress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HostTaskProgress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.taskid().size() > 0) {

    taskid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.taskid_);
  }
  if (!(from.progress() <= 0 && from.progress() >= 0)) {
    _internal_set_progress(from._internal_progress());
  }
}

void HostTaskProgress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HostTaskProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HostTaskProgress::CopyFrom(const HostTaskProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HostTaskProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostTaskProgress::IsInitialized() const {
  return true;
}

void HostTaskProgress::InternalSwap(HostTaskProgress* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  taskid_.Swap(&other->taskid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(progress_, other->progress_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HostTaskProgress::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HostTaskProgressMessage::InitAsDefaultInstance() {
}
class HostTaskProgressMessage::_Internal {
 public:
};

HostTaskProgressMessage::HostTaskProgressMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:HostTaskProgressMessage)
}
HostTaskProgressMessage::HostTaskProgressMessage(const HostTaskProgressMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  taskid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_taskid().empty()) {
    taskid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.taskid_);
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  progress_ = from.progress_;
  // @@protoc_insertion_point(copy_constructor:HostTaskProgressMessage)
}

void HostTaskProgressMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HostTaskProgressMessage_resourceprotocols_2eproto.base);
  taskid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  progress_ = 0;
}

HostTaskProgressMessage::~HostTaskProgressMessage() {
  // @@protoc_insertion_point(destructor:HostTaskProgressMessage)
  SharedDtor();
}

void HostTaskProgressMessage::SharedDtor() {
  taskid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HostTaskProgressMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HostTaskProgressMessage& HostTaskProgressMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HostTaskProgressMessage_resourceprotocols_2eproto.base);
  return *internal_default_instance();
}


void HostTaskProgressMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:HostTaskProgressMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  taskid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  progress_ = 0;
  _internal_metadata_.Clear();
}

const char* HostTaskProgressMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string taskId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_taskid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "HostTaskProgressMessage.taskId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float progress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          progress_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "HostTaskProgressMessage.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HostTaskProgressMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HostTaskProgressMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string taskId = 1;
  if (this->taskid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_taskid().data(), static_cast<int>(this->_internal_taskid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "HostTaskProgressMessage.taskId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_taskid(), target);
  }

  // float progress = 2;
  if (!(this->progress() <= 0 && this->progress() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_progress(), target);
  }

  // string message = 3;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "HostTaskProgressMessage.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HostTaskProgressMessage)
  return target;
}

size_t HostTaskProgressMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HostTaskProgressMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string taskId = 1;
  if (this->taskid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_taskid());
  }

  // string message = 3;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // float progress = 2;
  if (!(this->progress() <= 0 && this->progress() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HostTaskProgressMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HostTaskProgressMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const HostTaskProgressMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HostTaskProgressMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HostTaskProgressMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HostTaskProgressMessage)
    MergeFrom(*source);
  }
}

void HostTaskProgressMessage::MergeFrom(const HostTaskProgressMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HostTaskProgressMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.taskid().size() > 0) {

    taskid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.taskid_);
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (!(from.progress() <= 0 && from.progress() >= 0)) {
    _internal_set_progress(from._internal_progress());
  }
}

void HostTaskProgressMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HostTaskProgressMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HostTaskProgressMessage::CopyFrom(const HostTaskProgressMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HostTaskProgressMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostTaskProgressMessage::IsInitialized() const {
  return true;
}

void HostTaskProgressMessage::InternalSwap(HostTaskProgressMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  taskid_.Swap(&other->taskid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(progress_, other->progress_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HostTaskProgressMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProcessorTaskMessageType::InitAsDefaultInstance() {
}
class ProcessorTaskMessageType::_Internal {
 public:
};

ProcessorTaskMessageType::ProcessorTaskMessageType()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProcessorTaskMessageType)
}
ProcessorTaskMessageType::ProcessorTaskMessageType(const ProcessorTaskMessageType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:ProcessorTaskMessageType)
}

void ProcessorTaskMessageType::SharedCtor() {
  type_ = 0;
}

ProcessorTaskMessageType::~ProcessorTaskMessageType() {
  // @@protoc_insertion_point(destructor:ProcessorTaskMessageType)
  SharedDtor();
}

void ProcessorTaskMessageType::SharedDtor() {
}

void ProcessorTaskMessageType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProcessorTaskMessageType& ProcessorTaskMessageType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProcessorTaskMessageType_resourceprotocols_2eproto.base);
  return *internal_default_instance();
}


void ProcessorTaskMessageType::Clear() {
// @@protoc_insertion_point(message_clear_start:ProcessorTaskMessageType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _internal_metadata_.Clear();
}

const char* ProcessorTaskMessageType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ProcessorTaskMessageType.MessageType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::ProcessorTaskMessageType_MessageType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProcessorTaskMessageType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProcessorTaskMessageType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ProcessorTaskMessageType.MessageType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProcessorTaskMessageType)
  return target;
}

size_t ProcessorTaskMessageType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProcessorTaskMessageType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ProcessorTaskMessageType.MessageType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcessorTaskMessageType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProcessorTaskMessageType)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessorTaskMessageType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProcessorTaskMessageType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProcessorTaskMessageType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProcessorTaskMessageType)
    MergeFrom(*source);
  }
}

void ProcessorTaskMessageType::MergeFrom(const ProcessorTaskMessageType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProcessorTaskMessageType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void ProcessorTaskMessageType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProcessorTaskMessageType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessorTaskMessageType::CopyFrom(const ProcessorTaskMessageType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProcessorTaskMessageType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessorTaskMessageType::IsInitialized() const {
  return true;
}

void ProcessorTaskMessageType::InternalSwap(ProcessorTaskMessageType* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessorTaskMessageType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProcessorTaskRequest::InitAsDefaultInstance() {
}
class ProcessorTaskRequest::_Internal {
 public:
};

ProcessorTaskRequest::ProcessorTaskRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProcessorTaskRequest)
}
ProcessorTaskRequest::ProcessorTaskRequest(const ProcessorTaskRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:ProcessorTaskRequest)
}

void ProcessorTaskRequest::SharedCtor() {
  type_ = 0;
}

ProcessorTaskRequest::~ProcessorTaskRequest() {
  // @@protoc_insertion_point(destructor:ProcessorTaskRequest)
  SharedDtor();
}

void ProcessorTaskRequest::SharedDtor() {
}

void ProcessorTaskRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProcessorTaskRequest& ProcessorTaskRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProcessorTaskRequest_resourceprotocols_2eproto.base);
  return *internal_default_instance();
}


void ProcessorTaskRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ProcessorTaskRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _internal_metadata_.Clear();
}

const char* ProcessorTaskRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ProcessorTaskRequest.TaskType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::ProcessorTaskRequest_TaskType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProcessorTaskRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProcessorTaskRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ProcessorTaskRequest.TaskType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProcessorTaskRequest)
  return target;
}

size_t ProcessorTaskRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProcessorTaskRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ProcessorTaskRequest.TaskType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcessorTaskRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProcessorTaskRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessorTaskRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProcessorTaskRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProcessorTaskRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProcessorTaskRequest)
    MergeFrom(*source);
  }
}

void ProcessorTaskRequest::MergeFrom(const ProcessorTaskRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProcessorTaskRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void ProcessorTaskRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProcessorTaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessorTaskRequest::CopyFrom(const ProcessorTaskRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProcessorTaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessorTaskRequest::IsInitialized() const {
  return true;
}

void ProcessorTaskRequest::InternalSwap(ProcessorTaskRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessorTaskRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProcessorTaskImageRequest::InitAsDefaultInstance() {
}
class ProcessorTaskImageRequest::_Internal {
 public:
};

ProcessorTaskImageRequest::ProcessorTaskImageRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProcessorTaskImageRequest)
}
ProcessorTaskImageRequest::ProcessorTaskImageRequest(const ProcessorTaskImageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  taskid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_taskid().empty()) {
    taskid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.taskid_);
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&sourcecmformat_, &from.sourcecmformat_,
    static_cast<size_t>(reinterpret_cast<char*>(&partsize_) -
    reinterpret_cast<char*>(&sourcecmformat_)) + sizeof(partsize_));
  // @@protoc_insertion_point(copy_constructor:ProcessorTaskImageRequest)
}

void ProcessorTaskImageRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProcessorTaskImageRequest_resourceprotocols_2eproto.base);
  taskid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sourcecmformat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&partsize_) -
      reinterpret_cast<char*>(&sourcecmformat_)) + sizeof(partsize_));
}

ProcessorTaskImageRequest::~ProcessorTaskImageRequest() {
  // @@protoc_insertion_point(destructor:ProcessorTaskImageRequest)
  SharedDtor();
}

void ProcessorTaskImageRequest::SharedDtor() {
  taskid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProcessorTaskImageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProcessorTaskImageRequest& ProcessorTaskImageRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProcessorTaskImageRequest_resourceprotocols_2eproto.base);
  return *internal_default_instance();
}


void ProcessorTaskImageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ProcessorTaskImageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  taskid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sourcecmformat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&partsize_) -
      reinterpret_cast<char*>(&sourcecmformat_)) + sizeof(partsize_));
  _internal_metadata_.Clear();
}

const char* ProcessorTaskImageRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string taskId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_taskid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProcessorTaskImageRequest.taskId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sourceCMformat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sourcecmformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 targetCMBCformat = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          targetcmbcformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 enginePackedFormat = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          enginepackedformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 width = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 height = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 stride = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          stride_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mipCount = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          mipcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mip = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          mip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 partId = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          partid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 partSize = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          partsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProcessorTaskImageRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProcessorTaskImageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string taskId = 1;
  if (this->taskid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_taskid().data(), static_cast<int>(this->_internal_taskid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProcessorTaskImageRequest.taskId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_taskid(), target);
  }

  // int32 sourceCMformat = 2;
  if (this->sourcecmformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_sourcecmformat(), target);
  }

  // int32 targetCMBCformat = 3;
  if (this->targetcmbcformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_targetcmbcformat(), target);
  }

  // int32 enginePackedFormat = 4;
  if (this->enginepackedformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_enginepackedformat(), target);
  }

  // int32 width = 5;
  if (this->width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_width(), target);
  }

  // int32 height = 6;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_height(), target);
  }

  // int32 stride = 7;
  if (this->stride() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_stride(), target);
  }

  // int32 mipCount = 8;
  if (this->mipcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_mipcount(), target);
  }

  // int32 mip = 9;
  if (this->mip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_mip(), target);
  }

  // int32 partId = 10;
  if (this->partid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_partid(), target);
  }

  // int32 partSize = 11;
  if (this->partsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_partsize(), target);
  }

  // bytes data = 12;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProcessorTaskImageRequest)
  return target;
}

size_t ProcessorTaskImageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProcessorTaskImageRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string taskId = 1;
  if (this->taskid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_taskid());
  }

  // bytes data = 12;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // int32 sourceCMformat = 2;
  if (this->sourcecmformat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sourcecmformat());
  }

  // int32 targetCMBCformat = 3;
  if (this->targetcmbcformat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_targetcmbcformat());
  }

  // int32 enginePackedFormat = 4;
  if (this->enginepackedformat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_enginepackedformat());
  }

  // int32 width = 5;
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_width());
  }

  // int32 height = 6;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_height());
  }

  // int32 stride = 7;
  if (this->stride() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stride());
  }

  // int32 mipCount = 8;
  if (this->mipcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mipcount());
  }

  // int32 mip = 9;
  if (this->mip() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mip());
  }

  // int32 partId = 10;
  if (this->partid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_partid());
  }

  // int32 partSize = 11;
  if (this->partsize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_partsize());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcessorTaskImageRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProcessorTaskImageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessorTaskImageRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProcessorTaskImageRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProcessorTaskImageRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProcessorTaskImageRequest)
    MergeFrom(*source);
  }
}

void ProcessorTaskImageRequest::MergeFrom(const ProcessorTaskImageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProcessorTaskImageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.taskid().size() > 0) {

    taskid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.taskid_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.sourcecmformat() != 0) {
    _internal_set_sourcecmformat(from._internal_sourcecmformat());
  }
  if (from.targetcmbcformat() != 0) {
    _internal_set_targetcmbcformat(from._internal_targetcmbcformat());
  }
  if (from.enginepackedformat() != 0) {
    _internal_set_enginepackedformat(from._internal_enginepackedformat());
  }
  if (from.width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from.stride() != 0) {
    _internal_set_stride(from._internal_stride());
  }
  if (from.mipcount() != 0) {
    _internal_set_mipcount(from._internal_mipcount());
  }
  if (from.mip() != 0) {
    _internal_set_mip(from._internal_mip());
  }
  if (from.partid() != 0) {
    _internal_set_partid(from._internal_partid());
  }
  if (from.partsize() != 0) {
    _internal_set_partsize(from._internal_partsize());
  }
}

void ProcessorTaskImageRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProcessorTaskImageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessorTaskImageRequest::CopyFrom(const ProcessorTaskImageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProcessorTaskImageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessorTaskImageRequest::IsInitialized() const {
  return true;
}

void ProcessorTaskImageRequest::InternalSwap(ProcessorTaskImageRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  taskid_.Swap(&other->taskid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sourcecmformat_, other->sourcecmformat_);
  swap(targetcmbcformat_, other->targetcmbcformat_);
  swap(enginepackedformat_, other->enginepackedformat_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(stride_, other->stride_);
  swap(mipcount_, other->mipcount_);
  swap(mip_, other->mip_);
  swap(partid_, other->partid_);
  swap(partsize_, other->partsize_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessorTaskImageRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProcessorTaskImageResponse::InitAsDefaultInstance() {
}
class ProcessorTaskImageResponse::_Internal {
 public:
};

ProcessorTaskImageResponse::ProcessorTaskImageResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProcessorTaskImageResponse)
}
ProcessorTaskImageResponse::ProcessorTaskImageResponse(const ProcessorTaskImageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  taskid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_taskid().empty()) {
    taskid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.taskid_);
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&partsize_) -
    reinterpret_cast<char*>(&width_)) + sizeof(partsize_));
  // @@protoc_insertion_point(copy_constructor:ProcessorTaskImageResponse)
}

void ProcessorTaskImageResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProcessorTaskImageResponse_resourceprotocols_2eproto.base);
  taskid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&partsize_) -
      reinterpret_cast<char*>(&width_)) + sizeof(partsize_));
}

ProcessorTaskImageResponse::~ProcessorTaskImageResponse() {
  // @@protoc_insertion_point(destructor:ProcessorTaskImageResponse)
  SharedDtor();
}

void ProcessorTaskImageResponse::SharedDtor() {
  taskid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProcessorTaskImageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProcessorTaskImageResponse& ProcessorTaskImageResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProcessorTaskImageResponse_resourceprotocols_2eproto.base);
  return *internal_default_instance();
}


void ProcessorTaskImageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ProcessorTaskImageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  taskid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&partsize_) -
      reinterpret_cast<char*>(&width_)) + sizeof(partsize_));
  _internal_metadata_.Clear();
}

const char* ProcessorTaskImageResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string taskId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_taskid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProcessorTaskImageResponse.taskId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 format = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mipCount = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          mipcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mip = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          mip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 partId = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          partid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 partSize = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          partsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProcessorTaskImageResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProcessorTaskImageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string taskId = 1;
  if (this->taskid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_taskid().data(), static_cast<int>(this->_internal_taskid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProcessorTaskImageResponse.taskId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_taskid(), target);
  }

  // int32 width = 2;
  if (this->width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_width(), target);
  }

  // int32 height = 3;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_height(), target);
  }

  // int32 format = 4;
  if (this->format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_format(), target);
  }

  // int32 mipCount = 5;
  if (this->mipcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_mipcount(), target);
  }

  // int32 mip = 6;
  if (this->mip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_mip(), target);
  }

  // int32 partId = 7;
  if (this->partid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_partid(), target);
  }

  // int32 partSize = 8;
  if (this->partsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_partsize(), target);
  }

  // bytes data = 9;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProcessorTaskImageResponse)
  return target;
}

size_t ProcessorTaskImageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProcessorTaskImageResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string taskId = 1;
  if (this->taskid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_taskid());
  }

  // bytes data = 9;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // int32 width = 2;
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_width());
  }

  // int32 height = 3;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_height());
  }

  // int32 format = 4;
  if (this->format() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_format());
  }

  // int32 mipCount = 5;
  if (this->mipcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mipcount());
  }

  // int32 mip = 6;
  if (this->mip() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mip());
  }

  // int32 partId = 7;
  if (this->partid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_partid());
  }

  // int32 partSize = 8;
  if (this->partsize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_partsize());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcessorTaskImageResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProcessorTaskImageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessorTaskImageResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProcessorTaskImageResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProcessorTaskImageResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProcessorTaskImageResponse)
    MergeFrom(*source);
  }
}

void ProcessorTaskImageResponse::MergeFrom(const ProcessorTaskImageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProcessorTaskImageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.taskid().size() > 0) {

    taskid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.taskid_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from.format() != 0) {
    _internal_set_format(from._internal_format());
  }
  if (from.mipcount() != 0) {
    _internal_set_mipcount(from._internal_mipcount());
  }
  if (from.mip() != 0) {
    _internal_set_mip(from._internal_mip());
  }
  if (from.partid() != 0) {
    _internal_set_partid(from._internal_partid());
  }
  if (from.partsize() != 0) {
    _internal_set_partsize(from._internal_partsize());
  }
}

void ProcessorTaskImageResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProcessorTaskImageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessorTaskImageResponse::CopyFrom(const ProcessorTaskImageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProcessorTaskImageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessorTaskImageResponse::IsInitialized() const {
  return true;
}

void ProcessorTaskImageResponse::InternalSwap(ProcessorTaskImageResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  taskid_.Swap(&other->taskid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(format_, other->format_);
  swap(mipcount_, other->mipcount_);
  swap(mip_, other->mip_);
  swap(partid_, other->partid_);
  swap(partsize_, other->partsize_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessorTaskImageResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProcessorTaskProgress::InitAsDefaultInstance() {
}
class ProcessorTaskProgress::_Internal {
 public:
};

ProcessorTaskProgress::ProcessorTaskProgress()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProcessorTaskProgress)
}
ProcessorTaskProgress::ProcessorTaskProgress(const ProcessorTaskProgress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  taskid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_taskid().empty()) {
    taskid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.taskid_);
  }
  progress_ = from.progress_;
  // @@protoc_insertion_point(copy_constructor:ProcessorTaskProgress)
}

void ProcessorTaskProgress::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProcessorTaskProgress_resourceprotocols_2eproto.base);
  taskid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  progress_ = 0;
}

ProcessorTaskProgress::~ProcessorTaskProgress() {
  // @@protoc_insertion_point(destructor:ProcessorTaskProgress)
  SharedDtor();
}

void ProcessorTaskProgress::SharedDtor() {
  taskid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProcessorTaskProgress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProcessorTaskProgress& ProcessorTaskProgress::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProcessorTaskProgress_resourceprotocols_2eproto.base);
  return *internal_default_instance();
}


void ProcessorTaskProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:ProcessorTaskProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  taskid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  progress_ = 0;
  _internal_metadata_.Clear();
}

const char* ProcessorTaskProgress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string taskId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_taskid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProcessorTaskProgress.taskId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float progress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          progress_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProcessorTaskProgress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProcessorTaskProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string taskId = 1;
  if (this->taskid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_taskid().data(), static_cast<int>(this->_internal_taskid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProcessorTaskProgress.taskId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_taskid(), target);
  }

  // float progress = 2;
  if (!(this->progress() <= 0 && this->progress() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_progress(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProcessorTaskProgress)
  return target;
}

size_t ProcessorTaskProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProcessorTaskProgress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string taskId = 1;
  if (this->taskid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_taskid());
  }

  // float progress = 2;
  if (!(this->progress() <= 0 && this->progress() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcessorTaskProgress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProcessorTaskProgress)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessorTaskProgress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProcessorTaskProgress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProcessorTaskProgress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProcessorTaskProgress)
    MergeFrom(*source);
  }
}

void ProcessorTaskProgress::MergeFrom(const ProcessorTaskProgress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProcessorTaskProgress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.taskid().size() > 0) {

    taskid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.taskid_);
  }
  if (!(from.progress() <= 0 && from.progress() >= 0)) {
    _internal_set_progress(from._internal_progress());
  }
}

void ProcessorTaskProgress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProcessorTaskProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessorTaskProgress::CopyFrom(const ProcessorTaskProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProcessorTaskProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessorTaskProgress::IsInitialized() const {
  return true;
}

void ProcessorTaskProgress::InternalSwap(ProcessorTaskProgress* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  taskid_.Swap(&other->taskid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(progress_, other->progress_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessorTaskProgress::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProcessorTaskMessageProgress::InitAsDefaultInstance() {
}
class ProcessorTaskMessageProgress::_Internal {
 public:
};

ProcessorTaskMessageProgress::ProcessorTaskMessageProgress()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProcessorTaskMessageProgress)
}
ProcessorTaskMessageProgress::ProcessorTaskMessageProgress(const ProcessorTaskMessageProgress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  taskid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_taskid().empty()) {
    taskid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.taskid_);
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  progress_ = from.progress_;
  // @@protoc_insertion_point(copy_constructor:ProcessorTaskMessageProgress)
}

void ProcessorTaskMessageProgress::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProcessorTaskMessageProgress_resourceprotocols_2eproto.base);
  taskid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  progress_ = 0;
}

ProcessorTaskMessageProgress::~ProcessorTaskMessageProgress() {
  // @@protoc_insertion_point(destructor:ProcessorTaskMessageProgress)
  SharedDtor();
}

void ProcessorTaskMessageProgress::SharedDtor() {
  taskid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProcessorTaskMessageProgress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProcessorTaskMessageProgress& ProcessorTaskMessageProgress::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProcessorTaskMessageProgress_resourceprotocols_2eproto.base);
  return *internal_default_instance();
}


void ProcessorTaskMessageProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:ProcessorTaskMessageProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  taskid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  progress_ = 0;
  _internal_metadata_.Clear();
}

const char* ProcessorTaskMessageProgress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string taskId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_taskid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProcessorTaskMessageProgress.taskId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float progress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          progress_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProcessorTaskMessageProgress.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProcessorTaskMessageProgress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProcessorTaskMessageProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string taskId = 1;
  if (this->taskid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_taskid().data(), static_cast<int>(this->_internal_taskid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProcessorTaskMessageProgress.taskId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_taskid(), target);
  }

  // float progress = 2;
  if (!(this->progress() <= 0 && this->progress() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_progress(), target);
  }

  // string message = 3;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProcessorTaskMessageProgress.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProcessorTaskMessageProgress)
  return target;
}

size_t ProcessorTaskMessageProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProcessorTaskMessageProgress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string taskId = 1;
  if (this->taskid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_taskid());
  }

  // string message = 3;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // float progress = 2;
  if (!(this->progress() <= 0 && this->progress() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcessorTaskMessageProgress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProcessorTaskMessageProgress)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessorTaskMessageProgress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProcessorTaskMessageProgress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProcessorTaskMessageProgress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProcessorTaskMessageProgress)
    MergeFrom(*source);
  }
}

void ProcessorTaskMessageProgress::MergeFrom(const ProcessorTaskMessageProgress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProcessorTaskMessageProgress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.taskid().size() > 0) {

    taskid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.taskid_);
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (!(from.progress() <= 0 && from.progress() >= 0)) {
    _internal_set_progress(from._internal_progress());
  }
}

void ProcessorTaskMessageProgress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProcessorTaskMessageProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessorTaskMessageProgress::CopyFrom(const ProcessorTaskMessageProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProcessorTaskMessageProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessorTaskMessageProgress::IsInitialized() const {
  return true;
}

void ProcessorTaskMessageProgress::InternalSwap(ProcessorTaskMessageProgress* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  taskid_.Swap(&other->taskid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(progress_, other->progress_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessorTaskMessageProgress::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProcessorTaskModelRequest::InitAsDefaultInstance() {
}
class ProcessorTaskModelRequest::_Internal {
 public:
};

ProcessorTaskModelRequest::ProcessorTaskModelRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProcessorTaskModelRequest)
}
ProcessorTaskModelRequest::ProcessorTaskModelRequest(const ProcessorTaskModelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  taskid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_taskid().empty()) {
    taskid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.taskid_);
  }
  modeltargetpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_modeltargetpath().empty()) {
    modeltargetpath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.modeltargetpath_);
  }
  assetname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_assetname().empty()) {
    assetname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.assetname_);
  }
  modeldata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_modeldata().empty()) {
    modeldata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.modeldata_);
  }
  ::memcpy(&scalex_, &from.scalex_,
    static_cast<size_t>(reinterpret_cast<char*>(&rotationw_) -
    reinterpret_cast<char*>(&scalex_)) + sizeof(rotationw_));
  // @@protoc_insertion_point(copy_constructor:ProcessorTaskModelRequest)
}

void ProcessorTaskModelRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProcessorTaskModelRequest_resourceprotocols_2eproto.base);
  taskid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modeltargetpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  assetname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modeldata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&scalex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotationw_) -
      reinterpret_cast<char*>(&scalex_)) + sizeof(rotationw_));
}

ProcessorTaskModelRequest::~ProcessorTaskModelRequest() {
  // @@protoc_insertion_point(destructor:ProcessorTaskModelRequest)
  SharedDtor();
}

void ProcessorTaskModelRequest::SharedDtor() {
  taskid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modeltargetpath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  assetname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modeldata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProcessorTaskModelRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProcessorTaskModelRequest& ProcessorTaskModelRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProcessorTaskModelRequest_resourceprotocols_2eproto.base);
  return *internal_default_instance();
}


void ProcessorTaskModelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ProcessorTaskModelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  taskid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modeltargetpath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  assetname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modeldata_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&scalex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotationw_) -
      reinterpret_cast<char*>(&scalex_)) + sizeof(rotationw_));
  _internal_metadata_.Clear();
}

const char* ProcessorTaskModelRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string taskId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_taskid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProcessorTaskModelRequest.taskId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string modelTargetPath = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_modeltargetpath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProcessorTaskModelRequest.modelTargetPath"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string assetName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_assetname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProcessorTaskModelRequest.assetName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float scaleX = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          scalex_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float scaleY = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          scaley_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float scaleZ = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          scalez_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float rotationX = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          rotationx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float rotationY = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          rotationy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float rotationZ = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          rotationz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float rotationW = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          rotationw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bytes modelData = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_modeldata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProcessorTaskModelRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProcessorTaskModelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string taskId = 1;
  if (this->taskid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_taskid().data(), static_cast<int>(this->_internal_taskid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProcessorTaskModelRequest.taskId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_taskid(), target);
  }

  // string modelTargetPath = 2;
  if (this->modeltargetpath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_modeltargetpath().data(), static_cast<int>(this->_internal_modeltargetpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProcessorTaskModelRequest.modelTargetPath");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_modeltargetpath(), target);
  }

  // string assetName = 3;
  if (this->assetname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_assetname().data(), static_cast<int>(this->_internal_assetname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProcessorTaskModelRequest.assetName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_assetname(), target);
  }

  // float scaleX = 4;
  if (!(this->scalex() <= 0 && this->scalex() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_scalex(), target);
  }

  // float scaleY = 5;
  if (!(this->scaley() <= 0 && this->scaley() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_scaley(), target);
  }

  // float scaleZ = 6;
  if (!(this->scalez() <= 0 && this->scalez() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_scalez(), target);
  }

  // float rotationX = 7;
  if (!(this->rotationx() <= 0 && this->rotationx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_rotationx(), target);
  }

  // float rotationY = 8;
  if (!(this->rotationy() <= 0 && this->rotationy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_rotationy(), target);
  }

  // float rotationZ = 9;
  if (!(this->rotationz() <= 0 && this->rotationz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_rotationz(), target);
  }

  // float rotationW = 10;
  if (!(this->rotationw() <= 0 && this->rotationw() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_rotationw(), target);
  }

  // bytes modelData = 11;
  if (this->modeldata().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_modeldata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProcessorTaskModelRequest)
  return target;
}

size_t ProcessorTaskModelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProcessorTaskModelRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string taskId = 1;
  if (this->taskid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_taskid());
  }

  // string modelTargetPath = 2;
  if (this->modeltargetpath().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_modeltargetpath());
  }

  // string assetName = 3;
  if (this->assetname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_assetname());
  }

  // bytes modelData = 11;
  if (this->modeldata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_modeldata());
  }

  // float scaleX = 4;
  if (!(this->scalex() <= 0 && this->scalex() >= 0)) {
    total_size += 1 + 4;
  }

  // float scaleY = 5;
  if (!(this->scaley() <= 0 && this->scaley() >= 0)) {
    total_size += 1 + 4;
  }

  // float scaleZ = 6;
  if (!(this->scalez() <= 0 && this->scalez() >= 0)) {
    total_size += 1 + 4;
  }

  // float rotationX = 7;
  if (!(this->rotationx() <= 0 && this->rotationx() >= 0)) {
    total_size += 1 + 4;
  }

  // float rotationY = 8;
  if (!(this->rotationy() <= 0 && this->rotationy() >= 0)) {
    total_size += 1 + 4;
  }

  // float rotationZ = 9;
  if (!(this->rotationz() <= 0 && this->rotationz() >= 0)) {
    total_size += 1 + 4;
  }

  // float rotationW = 10;
  if (!(this->rotationw() <= 0 && this->rotationw() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcessorTaskModelRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProcessorTaskModelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessorTaskModelRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProcessorTaskModelRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProcessorTaskModelRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProcessorTaskModelRequest)
    MergeFrom(*source);
  }
}

void ProcessorTaskModelRequest::MergeFrom(const ProcessorTaskModelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProcessorTaskModelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.taskid().size() > 0) {

    taskid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.taskid_);
  }
  if (from.modeltargetpath().size() > 0) {

    modeltargetpath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.modeltargetpath_);
  }
  if (from.assetname().size() > 0) {

    assetname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.assetname_);
  }
  if (from.modeldata().size() > 0) {

    modeldata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.modeldata_);
  }
  if (!(from.scalex() <= 0 && from.scalex() >= 0)) {
    _internal_set_scalex(from._internal_scalex());
  }
  if (!(from.scaley() <= 0 && from.scaley() >= 0)) {
    _internal_set_scaley(from._internal_scaley());
  }
  if (!(from.scalez() <= 0 && from.scalez() >= 0)) {
    _internal_set_scalez(from._internal_scalez());
  }
  if (!(from.rotationx() <= 0 && from.rotationx() >= 0)) {
    _internal_set_rotationx(from._internal_rotationx());
  }
  if (!(from.rotationy() <= 0 && from.rotationy() >= 0)) {
    _internal_set_rotationy(from._internal_rotationy());
  }
  if (!(from.rotationz() <= 0 && from.rotationz() >= 0)) {
    _internal_set_rotationz(from._internal_rotationz());
  }
  if (!(from.rotationw() <= 0 && from.rotationw() >= 0)) {
    _internal_set_rotationw(from._internal_rotationw());
  }
}

void ProcessorTaskModelRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProcessorTaskModelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessorTaskModelRequest::CopyFrom(const ProcessorTaskModelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProcessorTaskModelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessorTaskModelRequest::IsInitialized() const {
  return true;
}

void ProcessorTaskModelRequest::InternalSwap(ProcessorTaskModelRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  taskid_.Swap(&other->taskid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  modeltargetpath_.Swap(&other->modeltargetpath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  assetname_.Swap(&other->assetname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  modeldata_.Swap(&other->modeldata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(scalex_, other->scalex_);
  swap(scaley_, other->scaley_);
  swap(scalez_, other->scalez_);
  swap(rotationx_, other->rotationx_);
  swap(rotationy_, other->rotationy_);
  swap(rotationz_, other->rotationz_);
  swap(rotationw_, other->rotationw_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessorTaskModelRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProcessorTaskModelResponse::InitAsDefaultInstance() {
}
class ProcessorTaskModelResponse::_Internal {
 public:
};

ProcessorTaskModelResponse::ProcessorTaskModelResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProcessorTaskModelResponse)
}
ProcessorTaskModelResponse::ProcessorTaskModelResponse(const ProcessorTaskModelResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  taskid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_taskid().empty()) {
    taskid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.taskid_);
  }
  modeldata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_modeldata().empty()) {
    modeldata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.modeldata_);
  }
  prefabdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_prefabdata().empty()) {
    prefabdata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.prefabdata_);
  }
  // @@protoc_insertion_point(copy_constructor:ProcessorTaskModelResponse)
}

void ProcessorTaskModelResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProcessorTaskModelResponse_resourceprotocols_2eproto.base);
  taskid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modeldata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prefabdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ProcessorTaskModelResponse::~ProcessorTaskModelResponse() {
  // @@protoc_insertion_point(destructor:ProcessorTaskModelResponse)
  SharedDtor();
}

void ProcessorTaskModelResponse::SharedDtor() {
  taskid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modeldata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prefabdata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProcessorTaskModelResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProcessorTaskModelResponse& ProcessorTaskModelResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProcessorTaskModelResponse_resourceprotocols_2eproto.base);
  return *internal_default_instance();
}


void ProcessorTaskModelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ProcessorTaskModelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  taskid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modeldata_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prefabdata_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ProcessorTaskModelResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string taskId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_taskid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProcessorTaskModelResponse.taskId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes modelData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_modeldata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes prefabData = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_prefabdata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProcessorTaskModelResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProcessorTaskModelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string taskId = 1;
  if (this->taskid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_taskid().data(), static_cast<int>(this->_internal_taskid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProcessorTaskModelResponse.taskId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_taskid(), target);
  }

  // bytes modelData = 2;
  if (this->modeldata().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_modeldata(), target);
  }

  // bytes prefabData = 3;
  if (this->prefabdata().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_prefabdata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProcessorTaskModelResponse)
  return target;
}

size_t ProcessorTaskModelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProcessorTaskModelResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string taskId = 1;
  if (this->taskid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_taskid());
  }

  // bytes modelData = 2;
  if (this->modeldata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_modeldata());
  }

  // bytes prefabData = 3;
  if (this->prefabdata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_prefabdata());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcessorTaskModelResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProcessorTaskModelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessorTaskModelResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProcessorTaskModelResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProcessorTaskModelResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProcessorTaskModelResponse)
    MergeFrom(*source);
  }
}

void ProcessorTaskModelResponse::MergeFrom(const ProcessorTaskModelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProcessorTaskModelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.taskid().size() > 0) {

    taskid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.taskid_);
  }
  if (from.modeldata().size() > 0) {

    modeldata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.modeldata_);
  }
  if (from.prefabdata().size() > 0) {

    prefabdata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.prefabdata_);
  }
}

void ProcessorTaskModelResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProcessorTaskModelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessorTaskModelResponse::CopyFrom(const ProcessorTaskModelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProcessorTaskModelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessorTaskModelResponse::IsInitialized() const {
  return true;
}

void ProcessorTaskModelResponse::InternalSwap(ProcessorTaskModelResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  taskid_.Swap(&other->taskid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  modeldata_.Swap(&other->modeldata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  prefabdata_.Swap(&other->prefabdata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessorTaskModelResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::HostProcessorMessageType* Arena::CreateMaybeMessage< ::HostProcessorMessageType >(Arena* arena) {
  return Arena::CreateInternal< ::HostProcessorMessageType >(arena);
}
template<> PROTOBUF_NOINLINE ::HostCoreResponse* Arena::CreateMaybeMessage< ::HostCoreResponse >(Arena* arena) {
  return Arena::CreateInternal< ::HostCoreResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::HostTaskImageRequest* Arena::CreateMaybeMessage< ::HostTaskImageRequest >(Arena* arena) {
  return Arena::CreateInternal< ::HostTaskImageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::HostTaskImageResponse* Arena::CreateMaybeMessage< ::HostTaskImageResponse >(Arena* arena) {
  return Arena::CreateInternal< ::HostTaskImageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::HostTaskModelRequest* Arena::CreateMaybeMessage< ::HostTaskModelRequest >(Arena* arena) {
  return Arena::CreateInternal< ::HostTaskModelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::HostTaskModelResponse* Arena::CreateMaybeMessage< ::HostTaskModelResponse >(Arena* arena) {
  return Arena::CreateInternal< ::HostTaskModelResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::HostTaskStarted* Arena::CreateMaybeMessage< ::HostTaskStarted >(Arena* arena) {
  return Arena::CreateInternal< ::HostTaskStarted >(arena);
}
template<> PROTOBUF_NOINLINE ::HostTaskFinished* Arena::CreateMaybeMessage< ::HostTaskFinished >(Arena* arena) {
  return Arena::CreateInternal< ::HostTaskFinished >(arena);
}
template<> PROTOBUF_NOINLINE ::HostTaskProgress* Arena::CreateMaybeMessage< ::HostTaskProgress >(Arena* arena) {
  return Arena::CreateInternal< ::HostTaskProgress >(arena);
}
template<> PROTOBUF_NOINLINE ::HostTaskProgressMessage* Arena::CreateMaybeMessage< ::HostTaskProgressMessage >(Arena* arena) {
  return Arena::CreateInternal< ::HostTaskProgressMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ProcessorTaskMessageType* Arena::CreateMaybeMessage< ::ProcessorTaskMessageType >(Arena* arena) {
  return Arena::CreateInternal< ::ProcessorTaskMessageType >(arena);
}
template<> PROTOBUF_NOINLINE ::ProcessorTaskRequest* Arena::CreateMaybeMessage< ::ProcessorTaskRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ProcessorTaskRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ProcessorTaskImageRequest* Arena::CreateMaybeMessage< ::ProcessorTaskImageRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ProcessorTaskImageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ProcessorTaskImageResponse* Arena::CreateMaybeMessage< ::ProcessorTaskImageResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ProcessorTaskImageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ProcessorTaskProgress* Arena::CreateMaybeMessage< ::ProcessorTaskProgress >(Arena* arena) {
  return Arena::CreateInternal< ::ProcessorTaskProgress >(arena);
}
template<> PROTOBUF_NOINLINE ::ProcessorTaskMessageProgress* Arena::CreateMaybeMessage< ::ProcessorTaskMessageProgress >(Arena* arena) {
  return Arena::CreateInternal< ::ProcessorTaskMessageProgress >(arena);
}
template<> PROTOBUF_NOINLINE ::ProcessorTaskModelRequest* Arena::CreateMaybeMessage< ::ProcessorTaskModelRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ProcessorTaskModelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ProcessorTaskModelResponse* Arena::CreateMaybeMessage< ::ProcessorTaskModelResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ProcessorTaskModelResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
